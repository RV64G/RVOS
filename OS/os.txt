
build/os.elf:     file format elf32-littleriscv


Disassembly of section .text:

80000000 <_start>:
	.global	_start

	.text
_start:
	# park harts with id != 0
	csrr	t0, mhartid		# read current hart id
80000000:	f14022f3          	csrr	t0,mhartid
	mv	tp, t0			# keep CPU's hartid in its tp for later usage.
80000004:	00028213          	mv	tp,t0
	bnez	t0, park		# if we're not on the hart 0
80000008:	04029663          	bnez	t0,80000054 <park>
					# we park the hart

	# Set all bytes in the BSS section to zero.
	la	a0, _bss_start
8000000c:	00006517          	auipc	a0,0x6
80000010:	ffc50513          	addi	a0,a0,-4 # 80006008 <current_ctx>
	la	a1, _bss_end
80000014:	00109597          	auipc	a1,0x109
80000018:	71c58593          	addi	a1,a1,1820 # 80109730 <_bss_end>
	bgeu	a0, a1, 2f
8000001c:	00b57863          	bgeu	a0,a1,8000002c <_start+0x2c>
1:
	sw	zero, (a0)
80000020:	00052023          	sw	zero,0(a0)
	addi	a0, a0, 4
80000024:	00450513          	addi	a0,a0,4
	bltu	a0, a1, 1b
80000028:	feb56ce3          	bltu	a0,a1,80000020 <_start+0x20>
2:
	# Setup stacks, the stack grows from bottom to top, so we put the
	# stack pointer to the very end of the stack range.
	slli	t0, t0, 10		# shift left the hart id by 1024
8000002c:	00a29293          	slli	t0,t0,0xa
	la	sp, stacks + STACK_SIZE	# set the initial stack pointer
80000030:	00000117          	auipc	sp,0x0
80000034:	43010113          	addi	sp,sp,1072 # 80000460 <stacks+0x400>
					# to the end of the first stack space
	add	sp, sp, t0		# move the current hart stack pointer
80000038:	00510133          	add	sp,sp,t0
	# At the end of start_kernel, schedule() will call MRET to switch
	# to the first task, so we parepare the mstatus here.
	# Notice: default mstatus is 0
	# Set mstatus.MPP to 3, so we still run in Machine mode after MRET.
	# Set mstatus.MPIE to 1, so MRET will enable the interrupt.
	li	t0, 3 << 11 | 1 << 7
8000003c:	000022b7          	lui	t0,0x2
80000040:	88028293          	addi	t0,t0,-1920 # 1880 <STACK_SIZE+0x1480>
	csrr	a1, mstatus
80000044:	300025f3          	csrr	a1,mstatus
	or	t0, t0, a1
80000048:	00b2e2b3          	or	t0,t0,a1
	csrw	mstatus, t0
8000004c:	30029073          	csrw	mstatus,t0

	j	start_kernel		# hart 0 jump to c
80000050:	2480206f          	j	80002298 <start_kernel>

80000054 <park>:

park:
	wfi
80000054:	10500073          	wfi
	j	park
80000058:	ffdff06f          	j	80000054 <park>
8000005c:	00000013          	nop

80000060 <stacks>:
	...

80002068 <gethid>:
.global gethid
gethid:
	li a7, 1
80002068:	00100893          	li	a7,1
	ecall
8000206c:	00000073          	ecall
	ret
80002070:	00008067          	ret
	...

80002080 <sys_switch>:
.globl sys_switch
.align 4
sys_switch:

        #ctx_save a0  # a0 => struct context *old
        ctx_load a0  # a1 => struct context *new
80002080:	00052083          	lw	ra,0(a0)
80002084:	00452103          	lw	sp,4(a0)
80002088:	00852403          	lw	s0,8(a0)
8000208c:	00c52483          	lw	s1,12(a0)
80002090:	01052903          	lw	s2,16(a0)
80002094:	01452983          	lw	s3,20(a0)
80002098:	01852a03          	lw	s4,24(a0)
8000209c:	01c52a83          	lw	s5,28(a0)
800020a0:	02052b03          	lw	s6,32(a0)
800020a4:	02452b83          	lw	s7,36(a0)
800020a8:	02852c03          	lw	s8,40(a0)
800020ac:	02c52c83          	lw	s9,44(a0)
800020b0:	03052d03          	lw	s10,48(a0)
800020b4:	03452d83          	lw	s11,52(a0)
800020b8:	03852503          	lw	a0,56(a0)
800020bc:	03c52883          	lw	a7,60(a0)
        
	mret          # pc=ra; swtch to new task (new->ra)
800020c0:	30200073          	mret
800020c4:	00000013          	nop
800020c8:	00000013          	nop
800020cc:	00000013          	nop

800020d0 <atomic_swap>:

.globl atomic_swap
.align 4
atomic_swap:
        li a5, 1
800020d0:	00100793          	li	a5,1
        amoswap.w.aq a5, a5, 0(a0)
800020d4:	0cf527af          	amoswap.w.aq	a5,a5,(a0)
        mv a0, a5
800020d8:	00078513          	mv	a0,a5
        ret
800020dc:	00008067          	ret

800020e0 <trap_vector>:
.globl trap_vector
# the trap vector base address must always be aligned on a 4-byte boundary
.align 4
trap_vector:
	# save context(registers).
	csrrw	t6, mscratch, t6	# swap t6 and mscratch
800020e0:	340f9ff3          	csrrw	t6,mscratch,t6
        reg_save t6
800020e4:	001fa023          	sw	ra,0(t6)
800020e8:	002fa223          	sw	sp,4(t6)
800020ec:	003fa423          	sw	gp,8(t6)
800020f0:	004fa623          	sw	tp,12(t6)
800020f4:	005fa823          	sw	t0,16(t6)
800020f8:	006faa23          	sw	t1,20(t6)
800020fc:	007fac23          	sw	t2,24(t6)
80002100:	008fae23          	sw	s0,28(t6)
80002104:	029fa023          	sw	s1,32(t6)
80002108:	02afa223          	sw	a0,36(t6)
8000210c:	02bfa423          	sw	a1,40(t6)
80002110:	02cfa623          	sw	a2,44(t6)
80002114:	02dfa823          	sw	a3,48(t6)
80002118:	02efaa23          	sw	a4,52(t6)
8000211c:	02ffac23          	sw	a5,56(t6)
80002120:	030fae23          	sw	a6,60(t6)
80002124:	051fa023          	sw	a7,64(t6)
80002128:	052fa223          	sw	s2,68(t6)
8000212c:	053fa423          	sw	s3,72(t6)
80002130:	054fa623          	sw	s4,76(t6)
80002134:	055fa823          	sw	s5,80(t6)
80002138:	056faa23          	sw	s6,84(t6)
8000213c:	057fac23          	sw	s7,88(t6)
80002140:	058fae23          	sw	s8,92(t6)
80002144:	079fa023          	sw	s9,96(t6)
80002148:	07afa223          	sw	s10,100(t6)
8000214c:	07bfa423          	sw	s11,104(t6)
80002150:	07cfa623          	sw	t3,108(t6)
80002154:	07dfa823          	sw	t4,112(t6)
80002158:	07efaa23          	sw	t5,116(t6)
	csrw	mscratch, t6
8000215c:	340f9073          	csrw	mscratch,t6

	# save mepc to context of current task
	csrr	a0, mepc
80002160:	34102573          	csrr	a0,mepc
	sw	a0, 124(t6)
80002164:	06afae23          	sw	a0,124(t6)

	# call the C trap handler in trap.c
	csrr	a0, mepc
80002168:	34102573          	csrr	a0,mepc
	csrr	a1, mcause
8000216c:	342025f3          	csrr	a1,mcause
	csrr	a2, mscratch
80002170:	34002673          	csrr	a2,mscratch
	call	trap_handler
80002174:	4f4020ef          	jal	80004668 <trap_handler>

	# trap_handler will return the return address via a0.
	csrw	mepc, a0
80002178:	34151073          	csrw	mepc,a0

	# load context(registers).
	csrr	t6, mscratch
8000217c:	34002ff3          	csrr	t6,mscratch
	reg_load t6
80002180:	000fa083          	lw	ra,0(t6)
80002184:	004fa103          	lw	sp,4(t6)
80002188:	008fa183          	lw	gp,8(t6)
8000218c:	00cfa203          	lw	tp,12(t6)
80002190:	010fa283          	lw	t0,16(t6)
80002194:	014fa303          	lw	t1,20(t6)
80002198:	018fa383          	lw	t2,24(t6)
8000219c:	01cfa403          	lw	s0,28(t6)
800021a0:	020fa483          	lw	s1,32(t6)
800021a4:	024fa503          	lw	a0,36(t6)
800021a8:	028fa583          	lw	a1,40(t6)
800021ac:	02cfa603          	lw	a2,44(t6)
800021b0:	030fa683          	lw	a3,48(t6)
800021b4:	034fa703          	lw	a4,52(t6)
800021b8:	038fa783          	lw	a5,56(t6)
800021bc:	03cfa803          	lw	a6,60(t6)
800021c0:	040fa883          	lw	a7,64(t6)
800021c4:	044fa903          	lw	s2,68(t6)
800021c8:	048fa983          	lw	s3,72(t6)
800021cc:	04cfaa03          	lw	s4,76(t6)
800021d0:	050faa83          	lw	s5,80(t6)
800021d4:	054fab03          	lw	s6,84(t6)
800021d8:	058fab83          	lw	s7,88(t6)
800021dc:	05cfac03          	lw	s8,92(t6)
800021e0:	060fac83          	lw	s9,96(t6)
800021e4:	064fad03          	lw	s10,100(t6)
800021e8:	068fad83          	lw	s11,104(t6)
800021ec:	06cfae03          	lw	t3,108(t6)
800021f0:	070fae83          	lw	t4,112(t6)
800021f4:	074faf03          	lw	t5,116(t6)
800021f8:	078faf83          	lw	t6,120(t6)
	mret
800021fc:	30200073          	mret

80002200 <switch_to>:
# a0: pointer to the context of the next task
.globl switch_to
.align 4
switch_to:
	# switch mscratch to point to the context of the next task
	csrw	mscratch, a0
80002200:	34051073          	csrw	mscratch,a0
	# set mepc to the pc of the next task
	lw	a1, 124(a0)
80002204:	07c52583          	lw	a1,124(a0)
	csrw	mepc, a1
80002208:	34159073          	csrw	mepc,a1

        lw      a1, 128(a0)     # 加载调度器设置的mstatus
8000220c:	08052583          	lw	a1,128(a0)
        csrw    mstatus, a1     # 这个mstatus包含了正确的MPP值
80002210:	30059073          	csrw	mstatus,a1

	# Restore all GP registers
	# Use t6 to point to the context of the new task
	mv	t6, a0
80002214:	00050f93          	mv	t6,a0
	reg_load t6
80002218:	000fa083          	lw	ra,0(t6)
8000221c:	004fa103          	lw	sp,4(t6)
80002220:	008fa183          	lw	gp,8(t6)
80002224:	00cfa203          	lw	tp,12(t6)
80002228:	010fa283          	lw	t0,16(t6)
8000222c:	014fa303          	lw	t1,20(t6)
80002230:	018fa383          	lw	t2,24(t6)
80002234:	01cfa403          	lw	s0,28(t6)
80002238:	020fa483          	lw	s1,32(t6)
8000223c:	024fa503          	lw	a0,36(t6)
80002240:	028fa583          	lw	a1,40(t6)
80002244:	02cfa603          	lw	a2,44(t6)
80002248:	030fa683          	lw	a3,48(t6)
8000224c:	034fa703          	lw	a4,52(t6)
80002250:	038fa783          	lw	a5,56(t6)
80002254:	03cfa803          	lw	a6,60(t6)
80002258:	040fa883          	lw	a7,64(t6)
8000225c:	044fa903          	lw	s2,68(t6)
80002260:	048fa983          	lw	s3,72(t6)
80002264:	04cfaa03          	lw	s4,76(t6)
80002268:	050faa83          	lw	s5,80(t6)
8000226c:	054fab03          	lw	s6,84(t6)
80002270:	058fab83          	lw	s7,88(t6)
80002274:	05cfac03          	lw	s8,92(t6)
80002278:	060fac83          	lw	s9,96(t6)
8000227c:	064fad03          	lw	s10,100(t6)
80002280:	068fad83          	lw	s11,104(t6)
80002284:	06cfae03          	lw	t3,108(t6)
80002288:	070fae83          	lw	t4,112(t6)
8000228c:	074faf03          	lw	t5,116(t6)
80002290:	078faf83          	lw	t6,120(t6)

	# Do actual context switching.
	# Notice this will enable global interrupt
	mret
80002294:	30200073          	mret

80002298 <start_kernel>:
extern void plic_init(void);
extern void timer_init(void);
extern struct context *current_ctx;

void start_kernel(void)
{
80002298:	ff010113          	addi	sp,sp,-16
8000229c:	00112623          	sw	ra,12(sp)
800022a0:	00812423          	sw	s0,8(sp)
800022a4:	01010413          	addi	s0,sp,16
    uart_init();
800022a8:	054000ef          	jal	800022fc <uart_init>
    uart_puts("Hello, RVOS!\n");
800022ac:	800057b7          	lui	a5,0x80005
800022b0:	31078513          	addi	a0,a5,784 # 80005310 <BSS_END+0x4>
800022b4:	118000ef          	jal	800023cc <uart_puts>

    page_init();
800022b8:	139000ef          	jal	80002bf0 <page_init>

    memory_init(); // 初始化内存管理
800022bc:	19d010ef          	jal	80003c58 <memory_init>

    trap_init();
800022c0:	2fc020ef          	jal	800045bc <trap_init>

    plic_init();
800022c4:	5f8020ef          	jal	800048bc <plic_init>

    timer_init();
800022c8:	07d020ef          	jal	80004b44 <timer_init>

    sched_init();
800022cc:	679000ef          	jal	80003144 <sched_init>

    os_main();
800022d0:	1c0020ef          	jal	80004490 <os_main>

    printf("kernel running\n");
800022d4:	800057b7          	lui	a5,0x80005
800022d8:	32078513          	addi	a0,a5,800 # 80005320 <BSS_END+0x14>
800022dc:	71c000ef          	jal	800029f8 <printf>

    disable_pmp(); // 禁用PMP，允许U-Mode访问所有内存
800022e0:	138020ef          	jal	80004418 <disable_pmp>

    kernel_scheduler();
800022e4:	5f9000ef          	jal	800030dc <kernel_scheduler>

    uart_puts("Would not go here!\n");
800022e8:	800057b7          	lui	a5,0x80005
800022ec:	33078513          	addi	a0,a5,816 # 80005330 <BSS_END+0x24>
800022f0:	0dc000ef          	jal	800023cc <uart_puts>
    while (1)
800022f4:	00000013          	nop
800022f8:	ffdff06f          	j	800022f4 <start_kernel+0x5c>

800022fc <uart_init>:

#define uart_read_reg(reg) (*(UART_REG(reg)))
#define uart_write_reg(reg, v) (*(UART_REG(reg)) = (v))

void uart_init()
{
800022fc:	fe010113          	addi	sp,sp,-32
80002300:	00812e23          	sw	s0,28(sp)
80002304:	02010413          	addi	s0,sp,32
	/* disable interrupts. */
	uart_write_reg(IER, 0x00);
80002308:	100007b7          	lui	a5,0x10000
8000230c:	00178793          	addi	a5,a5,1 # 10000001 <_heap_size+0x8109731>
80002310:	00078023          	sb	zero,0(a5)
	 * We use 38.4K when 1.8432 MHZ crystal, so the corresponding value is 3.
	 * And due to the divisor register is two bytes (16 bits), so we need to
	 * split the value of 3(0x0003) into two bytes, DLL stores the low byte,
	 * DLM stores the high byte.
	 */
	uint8_t lcr = uart_read_reg(LCR);
80002314:	100007b7          	lui	a5,0x10000
80002318:	00378793          	addi	a5,a5,3 # 10000003 <_heap_size+0x8109733>
8000231c:	0007c783          	lbu	a5,0(a5)
80002320:	fef407a3          	sb	a5,-17(s0)
	uart_write_reg(LCR, lcr | (1 << 7));
80002324:	100007b7          	lui	a5,0x10000
80002328:	00378793          	addi	a5,a5,3 # 10000003 <_heap_size+0x8109733>
8000232c:	fef44703          	lbu	a4,-17(s0)
80002330:	f8076713          	ori	a4,a4,-128
80002334:	0ff77713          	zext.b	a4,a4
80002338:	00e78023          	sb	a4,0(a5)
	uart_write_reg(DLL, 0x03);
8000233c:	100007b7          	lui	a5,0x10000
80002340:	00300713          	li	a4,3
80002344:	00e78023          	sb	a4,0(a5) # 10000000 <_heap_size+0x8109730>
	uart_write_reg(DLM, 0x00);
80002348:	100007b7          	lui	a5,0x10000
8000234c:	00178793          	addi	a5,a5,1 # 10000001 <_heap_size+0x8109731>
80002350:	00078023          	sb	zero,0(a5)
	 * - number of stop bits：1 bit when word length is 8 bits
	 * - no parity
	 * - no break control
	 * - disabled baud latch
	 */
	lcr = 0;
80002354:	fe0407a3          	sb	zero,-17(s0)
	uart_write_reg(LCR, lcr | (3 << 0));
80002358:	100007b7          	lui	a5,0x10000
8000235c:	00378793          	addi	a5,a5,3 # 10000003 <_heap_size+0x8109733>
80002360:	fef44703          	lbu	a4,-17(s0)
80002364:	00376713          	ori	a4,a4,3
80002368:	0ff77713          	zext.b	a4,a4
8000236c:	00e78023          	sb	a4,0(a5)
}
80002370:	00000013          	nop
80002374:	01c12403          	lw	s0,28(sp)
80002378:	02010113          	addi	sp,sp,32
8000237c:	00008067          	ret

80002380 <uart_putc>:

int uart_putc(char ch)
{
80002380:	fe010113          	addi	sp,sp,-32
80002384:	00812e23          	sw	s0,28(sp)
80002388:	02010413          	addi	s0,sp,32
8000238c:	00050793          	mv	a5,a0
80002390:	fef407a3          	sb	a5,-17(s0)
	while ((uart_read_reg(LSR) & LSR_TX_IDLE) == 0);
80002394:	00000013          	nop
80002398:	100007b7          	lui	a5,0x10000
8000239c:	00578793          	addi	a5,a5,5 # 10000005 <_heap_size+0x8109735>
800023a0:	0007c783          	lbu	a5,0(a5)
800023a4:	0ff7f793          	zext.b	a5,a5
800023a8:	0207f793          	andi	a5,a5,32
800023ac:	fe0786e3          	beqz	a5,80002398 <uart_putc+0x18>
	return uart_write_reg(THR, ch);
800023b0:	10000737          	lui	a4,0x10000
800023b4:	fef44783          	lbu	a5,-17(s0)
800023b8:	00f70023          	sb	a5,0(a4) # 10000000 <_heap_size+0x8109730>
}
800023bc:	00078513          	mv	a0,a5
800023c0:	01c12403          	lw	s0,28(sp)
800023c4:	02010113          	addi	sp,sp,32
800023c8:	00008067          	ret

800023cc <uart_puts>:

void uart_puts(char *s)
{
800023cc:	fe010113          	addi	sp,sp,-32
800023d0:	00112e23          	sw	ra,28(sp)
800023d4:	00812c23          	sw	s0,24(sp)
800023d8:	02010413          	addi	s0,sp,32
800023dc:	fea42623          	sw	a0,-20(s0)
	while (*s) {
800023e0:	01c0006f          	j	800023fc <uart_puts+0x30>
		uart_putc(*s++);
800023e4:	fec42783          	lw	a5,-20(s0)
800023e8:	00178713          	addi	a4,a5,1
800023ec:	fee42623          	sw	a4,-20(s0)
800023f0:	0007c783          	lbu	a5,0(a5)
800023f4:	00078513          	mv	a0,a5
800023f8:	f89ff0ef          	jal	80002380 <uart_putc>
	while (*s) {
800023fc:	fec42783          	lw	a5,-20(s0)
80002400:	0007c783          	lbu	a5,0(a5)
80002404:	fe0790e3          	bnez	a5,800023e4 <uart_puts+0x18>
	}
}
80002408:	00000013          	nop
8000240c:	00000013          	nop
80002410:	01c12083          	lw	ra,28(sp)
80002414:	01812403          	lw	s0,24(sp)
80002418:	02010113          	addi	sp,sp,32
8000241c:	00008067          	ret

80002420 <uart_getc>:

int uart_getc(void)
{
80002420:	ff010113          	addi	sp,sp,-16
80002424:	00812623          	sw	s0,12(sp)
80002428:	01010413          	addi	s0,sp,16
	if (uart_read_reg(LSR) & LSR_RX_READY){
8000242c:	100007b7          	lui	a5,0x10000
80002430:	00578793          	addi	a5,a5,5 # 10000005 <_heap_size+0x8109735>
80002434:	0007c783          	lbu	a5,0(a5)
80002438:	0ff7f793          	zext.b	a5,a5
8000243c:	0017f793          	andi	a5,a5,1
80002440:	00078a63          	beqz	a5,80002454 <uart_getc+0x34>
		return uart_read_reg(RHR);
80002444:	100007b7          	lui	a5,0x10000
80002448:	0007c783          	lbu	a5,0(a5) # 10000000 <_heap_size+0x8109730>
8000244c:	0ff7f793          	zext.b	a5,a5
80002450:	0080006f          	j	80002458 <uart_getc+0x38>
	} else {
		return -1;
80002454:	fff00793          	li	a5,-1
	}
}
80002458:	00078513          	mv	a0,a5
8000245c:	00c12403          	lw	s0,12(sp)
80002460:	01010113          	addi	sp,sp,16
80002464:	00008067          	ret

80002468 <uart_isr>:

void uart_isr(void)
{
80002468:	fe010113          	addi	sp,sp,-32
8000246c:	00112e23          	sw	ra,28(sp)
80002470:	00812c23          	sw	s0,24(sp)
80002474:	02010413          	addi	s0,sp,32
	while (1) {
		int c = uart_getc();
80002478:	fa9ff0ef          	jal	80002420 <uart_getc>
8000247c:	fea42623          	sw	a0,-20(s0)
		if (c == -1) {
80002480:	fec42703          	lw	a4,-20(s0)
80002484:	fff00793          	li	a5,-1
80002488:	02f70063          	beq	a4,a5,800024a8 <uart_isr+0x40>
			break;
		} else {
			uart_putc((char)c);
8000248c:	fec42783          	lw	a5,-20(s0)
80002490:	0ff7f793          	zext.b	a5,a5
80002494:	00078513          	mv	a0,a5
80002498:	ee9ff0ef          	jal	80002380 <uart_putc>
			uart_putc('\n');
8000249c:	00a00513          	li	a0,10
800024a0:	ee1ff0ef          	jal	80002380 <uart_putc>
	while (1) {
800024a4:	fd5ff06f          	j	80002478 <uart_isr+0x10>
			break;
800024a8:	00000013          	nop
		}
	}
}
800024ac:	00000013          	nop
800024b0:	01c12083          	lw	ra,28(sp)
800024b4:	01812403          	lw	s0,24(sp)
800024b8:	02010113          	addi	sp,sp,32
800024bc:	00008067          	ret

800024c0 <_vsnprintf>:
/*
 * ref: https://github.com/cccriscv/mini-riscv-os/blob/master/05-Preemptive/lib.c
 */

static int _vsnprintf(char * out, size_t n, const char* s, va_list vl)
{
800024c0:	fb010113          	addi	sp,sp,-80
800024c4:	04812623          	sw	s0,76(sp)
800024c8:	05010413          	addi	s0,sp,80
800024cc:	faa42e23          	sw	a0,-68(s0)
800024d0:	fab42c23          	sw	a1,-72(s0)
800024d4:	fac42a23          	sw	a2,-76(s0)
800024d8:	fad42823          	sw	a3,-80(s0)
	int format = 0;
800024dc:	fe042623          	sw	zero,-20(s0)
	int longarg = 0;
800024e0:	fe042423          	sw	zero,-24(s0)
	size_t pos = 0;
800024e4:	fe042223          	sw	zero,-28(s0)
	for (; *s; s++) {
800024e8:	4080006f          	j	800028f0 <_vsnprintf+0x430>
		if (format) {
800024ec:	fec42783          	lw	a5,-20(s0)
800024f0:	38078c63          	beqz	a5,80002888 <_vsnprintf+0x3c8>
			switch(*s) {
800024f4:	fb442783          	lw	a5,-76(s0)
800024f8:	0007c783          	lbu	a5,0(a5)
800024fc:	f9d78793          	addi	a5,a5,-99
80002500:	01500713          	li	a4,21
80002504:	3cf76e63          	bltu	a4,a5,800028e0 <_vsnprintf+0x420>
80002508:	00279713          	slli	a4,a5,0x2
8000250c:	800057b7          	lui	a5,0x80005
80002510:	34478793          	addi	a5,a5,836 # 80005344 <BSS_END+0x38>
80002514:	00f707b3          	add	a5,a4,a5
80002518:	0007a783          	lw	a5,0(a5)
8000251c:	00078067          	jr	a5
			case 'l': {
				longarg = 1;
80002520:	00100793          	li	a5,1
80002524:	fef42423          	sw	a5,-24(s0)
				break;
80002528:	3bc0006f          	j	800028e4 <_vsnprintf+0x424>
			}
			case 'p': {
				longarg = 1;
8000252c:	00100793          	li	a5,1
80002530:	fef42423          	sw	a5,-24(s0)
				if (out && pos < n) {
80002534:	fbc42783          	lw	a5,-68(s0)
80002538:	02078263          	beqz	a5,8000255c <_vsnprintf+0x9c>
8000253c:	fe442703          	lw	a4,-28(s0)
80002540:	fb842783          	lw	a5,-72(s0)
80002544:	00f77c63          	bgeu	a4,a5,8000255c <_vsnprintf+0x9c>
					out[pos] = '0';
80002548:	fbc42703          	lw	a4,-68(s0)
8000254c:	fe442783          	lw	a5,-28(s0)
80002550:	00f707b3          	add	a5,a4,a5
80002554:	03000713          	li	a4,48
80002558:	00e78023          	sb	a4,0(a5)
				}
				pos++;
8000255c:	fe442783          	lw	a5,-28(s0)
80002560:	00178793          	addi	a5,a5,1
80002564:	fef42223          	sw	a5,-28(s0)
				if (out && pos < n) {
80002568:	fbc42783          	lw	a5,-68(s0)
8000256c:	02078263          	beqz	a5,80002590 <_vsnprintf+0xd0>
80002570:	fe442703          	lw	a4,-28(s0)
80002574:	fb842783          	lw	a5,-72(s0)
80002578:	00f77c63          	bgeu	a4,a5,80002590 <_vsnprintf+0xd0>
					out[pos] = 'x';
8000257c:	fbc42703          	lw	a4,-68(s0)
80002580:	fe442783          	lw	a5,-28(s0)
80002584:	00f707b3          	add	a5,a4,a5
80002588:	07800713          	li	a4,120
8000258c:	00e78023          	sb	a4,0(a5)
				}
				pos++;
80002590:	fe442783          	lw	a5,-28(s0)
80002594:	00178793          	addi	a5,a5,1
80002598:	fef42223          	sw	a5,-28(s0)
			}
			case 'x': {
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
8000259c:	fe842783          	lw	a5,-24(s0)
800025a0:	00078c63          	beqz	a5,800025b8 <_vsnprintf+0xf8>
800025a4:	fb042783          	lw	a5,-80(s0)
800025a8:	00478713          	addi	a4,a5,4
800025ac:	fae42823          	sw	a4,-80(s0)
800025b0:	0007a783          	lw	a5,0(a5)
800025b4:	0140006f          	j	800025c8 <_vsnprintf+0x108>
800025b8:	fb042783          	lw	a5,-80(s0)
800025bc:	00478713          	addi	a4,a5,4
800025c0:	fae42823          	sw	a4,-80(s0)
800025c4:	0007a783          	lw	a5,0(a5)
800025c8:	fcf42423          	sw	a5,-56(s0)
				int hexdigits = 2*(longarg ? sizeof(long) : sizeof(int))-1;
800025cc:	00700793          	li	a5,7
800025d0:	fcf42223          	sw	a5,-60(s0)
				for(int i = hexdigits; i >= 0; i--) {
800025d4:	fc442783          	lw	a5,-60(s0)
800025d8:	fef42023          	sw	a5,-32(s0)
800025dc:	0880006f          	j	80002664 <_vsnprintf+0x1a4>
					int d = (num >> (4*i)) & 0xF;
800025e0:	fe042783          	lw	a5,-32(s0)
800025e4:	00279793          	slli	a5,a5,0x2
800025e8:	fc842703          	lw	a4,-56(s0)
800025ec:	40f757b3          	sra	a5,a4,a5
800025f0:	00f7f793          	andi	a5,a5,15
800025f4:	fcf42023          	sw	a5,-64(s0)
					if (out && pos < n) {
800025f8:	fbc42783          	lw	a5,-68(s0)
800025fc:	04078863          	beqz	a5,8000264c <_vsnprintf+0x18c>
80002600:	fe442703          	lw	a4,-28(s0)
80002604:	fb842783          	lw	a5,-72(s0)
80002608:	04f77263          	bgeu	a4,a5,8000264c <_vsnprintf+0x18c>
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
8000260c:	fc042703          	lw	a4,-64(s0)
80002610:	00900793          	li	a5,9
80002614:	00e7cc63          	blt	a5,a4,8000262c <_vsnprintf+0x16c>
80002618:	fc042783          	lw	a5,-64(s0)
8000261c:	0ff7f793          	zext.b	a5,a5
80002620:	03078793          	addi	a5,a5,48
80002624:	0ff7f793          	zext.b	a5,a5
80002628:	0140006f          	j	8000263c <_vsnprintf+0x17c>
8000262c:	fc042783          	lw	a5,-64(s0)
80002630:	0ff7f793          	zext.b	a5,a5
80002634:	05778793          	addi	a5,a5,87
80002638:	0ff7f793          	zext.b	a5,a5
8000263c:	fbc42683          	lw	a3,-68(s0)
80002640:	fe442703          	lw	a4,-28(s0)
80002644:	00e68733          	add	a4,a3,a4
80002648:	00f70023          	sb	a5,0(a4)
					}
					pos++;
8000264c:	fe442783          	lw	a5,-28(s0)
80002650:	00178793          	addi	a5,a5,1
80002654:	fef42223          	sw	a5,-28(s0)
				for(int i = hexdigits; i >= 0; i--) {
80002658:	fe042783          	lw	a5,-32(s0)
8000265c:	fff78793          	addi	a5,a5,-1
80002660:	fef42023          	sw	a5,-32(s0)
80002664:	fe042783          	lw	a5,-32(s0)
80002668:	f607dce3          	bgez	a5,800025e0 <_vsnprintf+0x120>
				}
				longarg = 0;
8000266c:	fe042423          	sw	zero,-24(s0)
				format = 0;
80002670:	fe042623          	sw	zero,-20(s0)
				break;
80002674:	2700006f          	j	800028e4 <_vsnprintf+0x424>
			}
			case 'd': {
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
80002678:	fe842783          	lw	a5,-24(s0)
8000267c:	00078c63          	beqz	a5,80002694 <_vsnprintf+0x1d4>
80002680:	fb042783          	lw	a5,-80(s0)
80002684:	00478713          	addi	a4,a5,4
80002688:	fae42823          	sw	a4,-80(s0)
8000268c:	0007a783          	lw	a5,0(a5)
80002690:	0140006f          	j	800026a4 <_vsnprintf+0x1e4>
80002694:	fb042783          	lw	a5,-80(s0)
80002698:	00478713          	addi	a4,a5,4
8000269c:	fae42823          	sw	a4,-80(s0)
800026a0:	0007a783          	lw	a5,0(a5)
800026a4:	fcf42e23          	sw	a5,-36(s0)
				if (num < 0) {
800026a8:	fdc42783          	lw	a5,-36(s0)
800026ac:	0407d263          	bgez	a5,800026f0 <_vsnprintf+0x230>
					num = -num;
800026b0:	fdc42783          	lw	a5,-36(s0)
800026b4:	40f007b3          	neg	a5,a5
800026b8:	fcf42e23          	sw	a5,-36(s0)
					if (out && pos < n) {
800026bc:	fbc42783          	lw	a5,-68(s0)
800026c0:	02078263          	beqz	a5,800026e4 <_vsnprintf+0x224>
800026c4:	fe442703          	lw	a4,-28(s0)
800026c8:	fb842783          	lw	a5,-72(s0)
800026cc:	00f77c63          	bgeu	a4,a5,800026e4 <_vsnprintf+0x224>
						out[pos] = '-';
800026d0:	fbc42703          	lw	a4,-68(s0)
800026d4:	fe442783          	lw	a5,-28(s0)
800026d8:	00f707b3          	add	a5,a4,a5
800026dc:	02d00713          	li	a4,45
800026e0:	00e78023          	sb	a4,0(a5)
					}
					pos++;
800026e4:	fe442783          	lw	a5,-28(s0)
800026e8:	00178793          	addi	a5,a5,1
800026ec:	fef42223          	sw	a5,-28(s0)
				}
				long digits = 1;
800026f0:	00100793          	li	a5,1
800026f4:	fcf42c23          	sw	a5,-40(s0)
				for (long nn = num; nn /= 10; digits++);
800026f8:	fdc42783          	lw	a5,-36(s0)
800026fc:	fcf42a23          	sw	a5,-44(s0)
80002700:	0100006f          	j	80002710 <_vsnprintf+0x250>
80002704:	fd842783          	lw	a5,-40(s0)
80002708:	00178793          	addi	a5,a5,1
8000270c:	fcf42c23          	sw	a5,-40(s0)
80002710:	fd442703          	lw	a4,-44(s0)
80002714:	00a00793          	li	a5,10
80002718:	02f747b3          	div	a5,a4,a5
8000271c:	fcf42a23          	sw	a5,-44(s0)
80002720:	fd442783          	lw	a5,-44(s0)
80002724:	fe0790e3          	bnez	a5,80002704 <_vsnprintf+0x244>
				for (int i = digits-1; i >= 0; i--) {
80002728:	fd842783          	lw	a5,-40(s0)
8000272c:	fff78793          	addi	a5,a5,-1
80002730:	fcf42823          	sw	a5,-48(s0)
80002734:	06c0006f          	j	800027a0 <_vsnprintf+0x2e0>
					if (out && pos + i < n) {
80002738:	fbc42783          	lw	a5,-68(s0)
8000273c:	04078463          	beqz	a5,80002784 <_vsnprintf+0x2c4>
80002740:	fd042703          	lw	a4,-48(s0)
80002744:	fe442783          	lw	a5,-28(s0)
80002748:	00f707b3          	add	a5,a4,a5
8000274c:	fb842703          	lw	a4,-72(s0)
80002750:	02e7fa63          	bgeu	a5,a4,80002784 <_vsnprintf+0x2c4>
						out[pos + i] = '0' + (num % 10);
80002754:	fdc42703          	lw	a4,-36(s0)
80002758:	00a00793          	li	a5,10
8000275c:	02f767b3          	rem	a5,a4,a5
80002760:	0ff7f713          	zext.b	a4,a5
80002764:	fd042683          	lw	a3,-48(s0)
80002768:	fe442783          	lw	a5,-28(s0)
8000276c:	00f687b3          	add	a5,a3,a5
80002770:	fbc42683          	lw	a3,-68(s0)
80002774:	00f687b3          	add	a5,a3,a5
80002778:	03070713          	addi	a4,a4,48
8000277c:	0ff77713          	zext.b	a4,a4
80002780:	00e78023          	sb	a4,0(a5)
					}
					num /= 10;
80002784:	fdc42703          	lw	a4,-36(s0)
80002788:	00a00793          	li	a5,10
8000278c:	02f747b3          	div	a5,a4,a5
80002790:	fcf42e23          	sw	a5,-36(s0)
				for (int i = digits-1; i >= 0; i--) {
80002794:	fd042783          	lw	a5,-48(s0)
80002798:	fff78793          	addi	a5,a5,-1
8000279c:	fcf42823          	sw	a5,-48(s0)
800027a0:	fd042783          	lw	a5,-48(s0)
800027a4:	f807dae3          	bgez	a5,80002738 <_vsnprintf+0x278>
				}
				pos += digits;
800027a8:	fd842783          	lw	a5,-40(s0)
800027ac:	fe442703          	lw	a4,-28(s0)
800027b0:	00f707b3          	add	a5,a4,a5
800027b4:	fef42223          	sw	a5,-28(s0)
				longarg = 0;
800027b8:	fe042423          	sw	zero,-24(s0)
				format = 0;
800027bc:	fe042623          	sw	zero,-20(s0)
				break;
800027c0:	1240006f          	j	800028e4 <_vsnprintf+0x424>
			}
			case 's': {
				const char* s2 = va_arg(vl, const char*);
800027c4:	fb042783          	lw	a5,-80(s0)
800027c8:	00478713          	addi	a4,a5,4
800027cc:	fae42823          	sw	a4,-80(s0)
800027d0:	0007a783          	lw	a5,0(a5)
800027d4:	fcf42623          	sw	a5,-52(s0)
				while (*s2) {
800027d8:	0480006f          	j	80002820 <_vsnprintf+0x360>
					if (out && pos < n) {
800027dc:	fbc42783          	lw	a5,-68(s0)
800027e0:	02078463          	beqz	a5,80002808 <_vsnprintf+0x348>
800027e4:	fe442703          	lw	a4,-28(s0)
800027e8:	fb842783          	lw	a5,-72(s0)
800027ec:	00f77e63          	bgeu	a4,a5,80002808 <_vsnprintf+0x348>
						out[pos] = *s2;
800027f0:	fbc42703          	lw	a4,-68(s0)
800027f4:	fe442783          	lw	a5,-28(s0)
800027f8:	00f707b3          	add	a5,a4,a5
800027fc:	fcc42703          	lw	a4,-52(s0)
80002800:	00074703          	lbu	a4,0(a4)
80002804:	00e78023          	sb	a4,0(a5)
					}
					pos++;
80002808:	fe442783          	lw	a5,-28(s0)
8000280c:	00178793          	addi	a5,a5,1
80002810:	fef42223          	sw	a5,-28(s0)
					s2++;
80002814:	fcc42783          	lw	a5,-52(s0)
80002818:	00178793          	addi	a5,a5,1
8000281c:	fcf42623          	sw	a5,-52(s0)
				while (*s2) {
80002820:	fcc42783          	lw	a5,-52(s0)
80002824:	0007c783          	lbu	a5,0(a5)
80002828:	fa079ae3          	bnez	a5,800027dc <_vsnprintf+0x31c>
				}
				longarg = 0;
8000282c:	fe042423          	sw	zero,-24(s0)
				format = 0;
80002830:	fe042623          	sw	zero,-20(s0)
				break;
80002834:	0b00006f          	j	800028e4 <_vsnprintf+0x424>
			}
			case 'c': {
				if (out && pos < n) {
80002838:	fbc42783          	lw	a5,-68(s0)
8000283c:	02078a63          	beqz	a5,80002870 <_vsnprintf+0x3b0>
80002840:	fe442703          	lw	a4,-28(s0)
80002844:	fb842783          	lw	a5,-72(s0)
80002848:	02f77463          	bgeu	a4,a5,80002870 <_vsnprintf+0x3b0>
					out[pos] = (char)va_arg(vl,int);
8000284c:	fb042783          	lw	a5,-80(s0)
80002850:	00478713          	addi	a4,a5,4
80002854:	fae42823          	sw	a4,-80(s0)
80002858:	0007a683          	lw	a3,0(a5)
8000285c:	fbc42703          	lw	a4,-68(s0)
80002860:	fe442783          	lw	a5,-28(s0)
80002864:	00f707b3          	add	a5,a4,a5
80002868:	0ff6f713          	zext.b	a4,a3
8000286c:	00e78023          	sb	a4,0(a5)
				}
				pos++;
80002870:	fe442783          	lw	a5,-28(s0)
80002874:	00178793          	addi	a5,a5,1
80002878:	fef42223          	sw	a5,-28(s0)
				longarg = 0;
8000287c:	fe042423          	sw	zero,-24(s0)
				format = 0;
80002880:	fe042623          	sw	zero,-20(s0)
				break;
80002884:	0600006f          	j	800028e4 <_vsnprintf+0x424>
			}
			default:
				break;
			}
		} else if (*s == '%') {
80002888:	fb442783          	lw	a5,-76(s0)
8000288c:	0007c703          	lbu	a4,0(a5)
80002890:	02500793          	li	a5,37
80002894:	00f71863          	bne	a4,a5,800028a4 <_vsnprintf+0x3e4>
			format = 1;
80002898:	00100793          	li	a5,1
8000289c:	fef42623          	sw	a5,-20(s0)
800028a0:	0440006f          	j	800028e4 <_vsnprintf+0x424>
		} else {
			if (out && pos < n) {
800028a4:	fbc42783          	lw	a5,-68(s0)
800028a8:	02078463          	beqz	a5,800028d0 <_vsnprintf+0x410>
800028ac:	fe442703          	lw	a4,-28(s0)
800028b0:	fb842783          	lw	a5,-72(s0)
800028b4:	00f77e63          	bgeu	a4,a5,800028d0 <_vsnprintf+0x410>
				out[pos] = *s;
800028b8:	fbc42703          	lw	a4,-68(s0)
800028bc:	fe442783          	lw	a5,-28(s0)
800028c0:	00f707b3          	add	a5,a4,a5
800028c4:	fb442703          	lw	a4,-76(s0)
800028c8:	00074703          	lbu	a4,0(a4)
800028cc:	00e78023          	sb	a4,0(a5)
			}
			pos++;
800028d0:	fe442783          	lw	a5,-28(s0)
800028d4:	00178793          	addi	a5,a5,1
800028d8:	fef42223          	sw	a5,-28(s0)
800028dc:	0080006f          	j	800028e4 <_vsnprintf+0x424>
				break;
800028e0:	00000013          	nop
	for (; *s; s++) {
800028e4:	fb442783          	lw	a5,-76(s0)
800028e8:	00178793          	addi	a5,a5,1
800028ec:	faf42a23          	sw	a5,-76(s0)
800028f0:	fb442783          	lw	a5,-76(s0)
800028f4:	0007c783          	lbu	a5,0(a5)
800028f8:	be079ae3          	bnez	a5,800024ec <_vsnprintf+0x2c>
		}
    	}
	if (out && pos < n) {
800028fc:	fbc42783          	lw	a5,-68(s0)
80002900:	02078263          	beqz	a5,80002924 <_vsnprintf+0x464>
80002904:	fe442703          	lw	a4,-28(s0)
80002908:	fb842783          	lw	a5,-72(s0)
8000290c:	00f77c63          	bgeu	a4,a5,80002924 <_vsnprintf+0x464>
		out[pos] = 0;
80002910:	fbc42703          	lw	a4,-68(s0)
80002914:	fe442783          	lw	a5,-28(s0)
80002918:	00f707b3          	add	a5,a4,a5
8000291c:	00078023          	sb	zero,0(a5)
80002920:	0280006f          	j	80002948 <_vsnprintf+0x488>
	} else if (out && n) {
80002924:	fbc42783          	lw	a5,-68(s0)
80002928:	02078063          	beqz	a5,80002948 <_vsnprintf+0x488>
8000292c:	fb842783          	lw	a5,-72(s0)
80002930:	00078c63          	beqz	a5,80002948 <_vsnprintf+0x488>
		out[n-1] = 0;
80002934:	fb842783          	lw	a5,-72(s0)
80002938:	fff78793          	addi	a5,a5,-1
8000293c:	fbc42703          	lw	a4,-68(s0)
80002940:	00f707b3          	add	a5,a4,a5
80002944:	00078023          	sb	zero,0(a5)
	}
	return pos;
80002948:	fe442783          	lw	a5,-28(s0)
}
8000294c:	00078513          	mv	a0,a5
80002950:	04c12403          	lw	s0,76(sp)
80002954:	05010113          	addi	sp,sp,80
80002958:	00008067          	ret

8000295c <_vprintf>:

static char out_buf[1000]; // buffer for _vprintf()

static int _vprintf(const char* s, va_list vl)
{
8000295c:	fd010113          	addi	sp,sp,-48
80002960:	02112623          	sw	ra,44(sp)
80002964:	02812423          	sw	s0,40(sp)
80002968:	03010413          	addi	s0,sp,48
8000296c:	fca42e23          	sw	a0,-36(s0)
80002970:	fcb42c23          	sw	a1,-40(s0)
	int res = _vsnprintf(NULL, -1, s, vl);
80002974:	fd842683          	lw	a3,-40(s0)
80002978:	fdc42603          	lw	a2,-36(s0)
8000297c:	fff00593          	li	a1,-1
80002980:	00000513          	li	a0,0
80002984:	b3dff0ef          	jal	800024c0 <_vsnprintf>
80002988:	fea42623          	sw	a0,-20(s0)
	if (res+1 >= sizeof(out_buf)) {
8000298c:	fec42783          	lw	a5,-20(s0)
80002990:	00178793          	addi	a5,a5,1
80002994:	00078713          	mv	a4,a5
80002998:	3e700793          	li	a5,999
8000299c:	00e7fc63          	bgeu	a5,a4,800029b4 <_vprintf+0x58>
		uart_puts("error: output string size overflow\n");
800029a0:	800057b7          	lui	a5,0x80005
800029a4:	39c78513          	addi	a0,a5,924 # 8000539c <BSS_END+0x90>
800029a8:	a25ff0ef          	jal	800023cc <uart_puts>
		while(1) {}
800029ac:	00000013          	nop
800029b0:	ffdff06f          	j	800029ac <_vprintf+0x50>
	}
	_vsnprintf(out_buf, res + 1, s, vl);
800029b4:	fec42783          	lw	a5,-20(s0)
800029b8:	00178793          	addi	a5,a5,1
800029bc:	fd842683          	lw	a3,-40(s0)
800029c0:	fdc42603          	lw	a2,-36(s0)
800029c4:	00078593          	mv	a1,a5
800029c8:	800067b7          	lui	a5,0x80006
800029cc:	01478513          	addi	a0,a5,20 # 80006014 <out_buf>
800029d0:	af1ff0ef          	jal	800024c0 <_vsnprintf>
	uart_puts(out_buf);
800029d4:	800067b7          	lui	a5,0x80006
800029d8:	01478513          	addi	a0,a5,20 # 80006014 <out_buf>
800029dc:	9f1ff0ef          	jal	800023cc <uart_puts>
	return res;
800029e0:	fec42783          	lw	a5,-20(s0)
}
800029e4:	00078513          	mv	a0,a5
800029e8:	02c12083          	lw	ra,44(sp)
800029ec:	02812403          	lw	s0,40(sp)
800029f0:	03010113          	addi	sp,sp,48
800029f4:	00008067          	ret

800029f8 <printf>:

int printf(const char* s, ...)
{
800029f8:	fb010113          	addi	sp,sp,-80
800029fc:	02112623          	sw	ra,44(sp)
80002a00:	02812423          	sw	s0,40(sp)
80002a04:	03010413          	addi	s0,sp,48
80002a08:	fca42e23          	sw	a0,-36(s0)
80002a0c:	00b42223          	sw	a1,4(s0)
80002a10:	00c42423          	sw	a2,8(s0)
80002a14:	00d42623          	sw	a3,12(s0)
80002a18:	00e42823          	sw	a4,16(s0)
80002a1c:	00f42a23          	sw	a5,20(s0)
80002a20:	01042c23          	sw	a6,24(s0)
80002a24:	01142e23          	sw	a7,28(s0)
	int res = 0;
80002a28:	fe042623          	sw	zero,-20(s0)
	va_list vl;
	va_start(vl, s);
80002a2c:	02040793          	addi	a5,s0,32
80002a30:	fcf42c23          	sw	a5,-40(s0)
80002a34:	fd842783          	lw	a5,-40(s0)
80002a38:	fe478793          	addi	a5,a5,-28
80002a3c:	fef42423          	sw	a5,-24(s0)
	res = _vprintf(s, vl);
80002a40:	fe842783          	lw	a5,-24(s0)
80002a44:	00078593          	mv	a1,a5
80002a48:	fdc42503          	lw	a0,-36(s0)
80002a4c:	f11ff0ef          	jal	8000295c <_vprintf>
80002a50:	fea42623          	sw	a0,-20(s0)
	va_end(vl);
	return res;
80002a54:	fec42783          	lw	a5,-20(s0)
}
80002a58:	00078513          	mv	a0,a5
80002a5c:	02c12083          	lw	ra,44(sp)
80002a60:	02812403          	lw	s0,40(sp)
80002a64:	05010113          	addi	sp,sp,80
80002a68:	00008067          	ret

80002a6c <panic>:

void panic(char *s)
{
80002a6c:	fd010113          	addi	sp,sp,-48
80002a70:	02112623          	sw	ra,44(sp)
80002a74:	02812423          	sw	s0,40(sp)
80002a78:	03010413          	addi	s0,sp,48
80002a7c:	fca42e23          	sw	a0,-36(s0)
	printf("panic: ");
80002a80:	800057b7          	lui	a5,0x80005
80002a84:	3c078513          	addi	a0,a5,960 # 800053c0 <BSS_END+0xb4>
80002a88:	f71ff0ef          	jal	800029f8 <printf>
	printf(s);
80002a8c:	fdc42503          	lw	a0,-36(s0)
80002a90:	f69ff0ef          	jal	800029f8 <printf>
	printf("\n");
80002a94:	800057b7          	lui	a5,0x80005
80002a98:	3c878513          	addi	a0,a5,968 # 800053c8 <BSS_END+0xbc>
80002a9c:	f5dff0ef          	jal	800029f8 <printf>
	while(1){
		for(int i=0;i<10000000;i++);
80002aa0:	fe042623          	sw	zero,-20(s0)
80002aa4:	0100006f          	j	80002ab4 <panic+0x48>
80002aa8:	fec42783          	lw	a5,-20(s0)
80002aac:	00178793          	addi	a5,a5,1
80002ab0:	fef42623          	sw	a5,-20(s0)
80002ab4:	fec42703          	lw	a4,-20(s0)
80002ab8:	009897b7          	lui	a5,0x989
80002abc:	67f78793          	addi	a5,a5,1663 # 98967f <STACK_SIZE+0x98927f>
80002ac0:	fee7d4e3          	bge	a5,a4,80002aa8 <panic+0x3c>
80002ac4:	fddff06f          	j	80002aa0 <panic+0x34>

80002ac8 <_clear>:
struct Page {
	uint8_t flags;
};

static inline void _clear(struct Page *page)
{
80002ac8:	fe010113          	addi	sp,sp,-32
80002acc:	00812e23          	sw	s0,28(sp)
80002ad0:	02010413          	addi	s0,sp,32
80002ad4:	fea42623          	sw	a0,-20(s0)
	page->flags = 0;
80002ad8:	fec42783          	lw	a5,-20(s0)
80002adc:	00078023          	sb	zero,0(a5)
}
80002ae0:	00000013          	nop
80002ae4:	01c12403          	lw	s0,28(sp)
80002ae8:	02010113          	addi	sp,sp,32
80002aec:	00008067          	ret

80002af0 <_is_free>:

static inline int _is_free(struct Page *page)
{
80002af0:	fe010113          	addi	sp,sp,-32
80002af4:	00812e23          	sw	s0,28(sp)
80002af8:	02010413          	addi	s0,sp,32
80002afc:	fea42623          	sw	a0,-20(s0)
	if (page->flags & PAGE_TAKEN) {
80002b00:	fec42783          	lw	a5,-20(s0)
80002b04:	0007c783          	lbu	a5,0(a5)
80002b08:	0017f793          	andi	a5,a5,1
80002b0c:	00078663          	beqz	a5,80002b18 <_is_free+0x28>
		return 0;
80002b10:	00000793          	li	a5,0
80002b14:	0080006f          	j	80002b1c <_is_free+0x2c>
	} else {
		return 1;
80002b18:	00100793          	li	a5,1
	}
}
80002b1c:	00078513          	mv	a0,a5
80002b20:	01c12403          	lw	s0,28(sp)
80002b24:	02010113          	addi	sp,sp,32
80002b28:	00008067          	ret

80002b2c <_set_flag>:

static inline void _set_flag(struct Page *page, uint8_t flags)
{
80002b2c:	fe010113          	addi	sp,sp,-32
80002b30:	00812e23          	sw	s0,28(sp)
80002b34:	02010413          	addi	s0,sp,32
80002b38:	fea42623          	sw	a0,-20(s0)
80002b3c:	00058793          	mv	a5,a1
80002b40:	fef405a3          	sb	a5,-21(s0)
	page->flags |= flags;
80002b44:	fec42783          	lw	a5,-20(s0)
80002b48:	0007c783          	lbu	a5,0(a5)
80002b4c:	feb44703          	lbu	a4,-21(s0)
80002b50:	00e7e7b3          	or	a5,a5,a4
80002b54:	0ff7f713          	zext.b	a4,a5
80002b58:	fec42783          	lw	a5,-20(s0)
80002b5c:	00e78023          	sb	a4,0(a5)
}
80002b60:	00000013          	nop
80002b64:	01c12403          	lw	s0,28(sp)
80002b68:	02010113          	addi	sp,sp,32
80002b6c:	00008067          	ret

80002b70 <_is_last>:

static inline int _is_last(struct Page *page)
{
80002b70:	fe010113          	addi	sp,sp,-32
80002b74:	00812e23          	sw	s0,28(sp)
80002b78:	02010413          	addi	s0,sp,32
80002b7c:	fea42623          	sw	a0,-20(s0)
	if (page->flags & PAGE_LAST) {
80002b80:	fec42783          	lw	a5,-20(s0)
80002b84:	0007c783          	lbu	a5,0(a5)
80002b88:	0027f793          	andi	a5,a5,2
80002b8c:	00078663          	beqz	a5,80002b98 <_is_last+0x28>
		return 1;
80002b90:	00100793          	li	a5,1
80002b94:	0080006f          	j	80002b9c <_is_last+0x2c>
	} else {
		return 0;
80002b98:	00000793          	li	a5,0
	}
}
80002b9c:	00078513          	mv	a0,a5
80002ba0:	01c12403          	lw	s0,28(sp)
80002ba4:	02010113          	addi	sp,sp,32
80002ba8:	00008067          	ret

80002bac <_align_page>:

/*
 * align the address to the border of page(4K)
 */
static inline uint32_t _align_page(uint32_t address)
{
80002bac:	fd010113          	addi	sp,sp,-48
80002bb0:	02812623          	sw	s0,44(sp)
80002bb4:	03010413          	addi	s0,sp,48
80002bb8:	fca42e23          	sw	a0,-36(s0)
	uint32_t order = (1 << PAGE_ORDER) - 1;
80002bbc:	000017b7          	lui	a5,0x1
80002bc0:	fff78793          	addi	a5,a5,-1 # fff <STACK_SIZE+0xbff>
80002bc4:	fef42623          	sw	a5,-20(s0)
	return (address + order) & (~order);
80002bc8:	fdc42703          	lw	a4,-36(s0)
80002bcc:	fec42783          	lw	a5,-20(s0)
80002bd0:	00f70733          	add	a4,a4,a5
80002bd4:	fec42783          	lw	a5,-20(s0)
80002bd8:	fff7c793          	not	a5,a5
80002bdc:	00f777b3          	and	a5,a4,a5
}
80002be0:	00078513          	mv	a0,a5
80002be4:	02c12403          	lw	s0,44(sp)
80002be8:	03010113          	addi	sp,sp,48
80002bec:	00008067          	ret

80002bf0 <page_init>:

void page_init()
{
80002bf0:	fe010113          	addi	sp,sp,-32
80002bf4:	00112e23          	sw	ra,28(sp)
80002bf8:	00812c23          	sw	s0,24(sp)
80002bfc:	02010413          	addi	s0,sp,32
	/* 
	 * We reserved 8 Page (8 x 4096) to hold the Page structures.
	 * It should be enough to manage at most 128 MB (8 x 4096 x 4096) 
	 */
	_num_pages = (HEAP_SIZE / PAGE_SIZE) - 8;
80002c00:	800057b7          	lui	a5,0x80005
80002c04:	2ec7a783          	lw	a5,748(a5) # 800052ec <HEAP_SIZE>
80002c08:	00c7d793          	srli	a5,a5,0xc
80002c0c:	ff878713          	addi	a4,a5,-8
80002c10:	800067b7          	lui	a5,0x80006
80002c14:	40e7a223          	sw	a4,1028(a5) # 80006404 <_num_pages>
	printf("HEAP_START = %x, HEAP_SIZE = %x, num of pages = %d\n", HEAP_START, HEAP_SIZE, _num_pages);
80002c18:	800057b7          	lui	a5,0x80005
80002c1c:	2e87a703          	lw	a4,744(a5) # 800052e8 <_text_end>
80002c20:	800057b7          	lui	a5,0x80005
80002c24:	2ec7a603          	lw	a2,748(a5) # 800052ec <HEAP_SIZE>
80002c28:	800067b7          	lui	a5,0x80006
80002c2c:	4047a783          	lw	a5,1028(a5) # 80006404 <_num_pages>
80002c30:	00078693          	mv	a3,a5
80002c34:	00070593          	mv	a1,a4
80002c38:	800057b7          	lui	a5,0x80005
80002c3c:	3cc78513          	addi	a0,a5,972 # 800053cc <BSS_END+0xc0>
80002c40:	db9ff0ef          	jal	800029f8 <printf>
	
	struct Page *page = (struct Page *)HEAP_START;
80002c44:	800057b7          	lui	a5,0x80005
80002c48:	2e87a783          	lw	a5,744(a5) # 800052e8 <_text_end>
80002c4c:	fef42623          	sw	a5,-20(s0)
	for (int i = 0; i < _num_pages; i++) {
80002c50:	fe042423          	sw	zero,-24(s0)
80002c54:	0240006f          	j	80002c78 <page_init+0x88>
		_clear(page);
80002c58:	fec42503          	lw	a0,-20(s0)
80002c5c:	e6dff0ef          	jal	80002ac8 <_clear>
		page++;	
80002c60:	fec42783          	lw	a5,-20(s0)
80002c64:	00178793          	addi	a5,a5,1
80002c68:	fef42623          	sw	a5,-20(s0)
	for (int i = 0; i < _num_pages; i++) {
80002c6c:	fe842783          	lw	a5,-24(s0)
80002c70:	00178793          	addi	a5,a5,1
80002c74:	fef42423          	sw	a5,-24(s0)
80002c78:	fe842703          	lw	a4,-24(s0)
80002c7c:	800067b7          	lui	a5,0x80006
80002c80:	4047a783          	lw	a5,1028(a5) # 80006404 <_num_pages>
80002c84:	fcf76ae3          	bltu	a4,a5,80002c58 <page_init+0x68>
	}

	_alloc_start = _align_page(HEAP_START + 8 * PAGE_SIZE);
80002c88:	800057b7          	lui	a5,0x80005
80002c8c:	2e87a703          	lw	a4,744(a5) # 800052e8 <_text_end>
80002c90:	000087b7          	lui	a5,0x8
80002c94:	00f707b3          	add	a5,a4,a5
80002c98:	00078513          	mv	a0,a5
80002c9c:	f11ff0ef          	jal	80002bac <_align_page>
80002ca0:	00050713          	mv	a4,a0
80002ca4:	800067b7          	lui	a5,0x80006
80002ca8:	3ee7ae23          	sw	a4,1020(a5) # 800063fc <_alloc_start>
	_alloc_end = _alloc_start + (PAGE_SIZE * _num_pages);
80002cac:	800067b7          	lui	a5,0x80006
80002cb0:	4047a783          	lw	a5,1028(a5) # 80006404 <_num_pages>
80002cb4:	00c79713          	slli	a4,a5,0xc
80002cb8:	800067b7          	lui	a5,0x80006
80002cbc:	3fc7a783          	lw	a5,1020(a5) # 800063fc <_alloc_start>
80002cc0:	00f70733          	add	a4,a4,a5
80002cc4:	800067b7          	lui	a5,0x80006
80002cc8:	40e7a023          	sw	a4,1024(a5) # 80006400 <_alloc_end>

	printf("TEXT:   0x%x -> 0x%x\n", TEXT_START, TEXT_END);
80002ccc:	800057b7          	lui	a5,0x80005
80002cd0:	2f07a703          	lw	a4,752(a5) # 800052f0 <TEXT_START>
80002cd4:	800057b7          	lui	a5,0x80005
80002cd8:	2f47a783          	lw	a5,756(a5) # 800052f4 <TEXT_END>
80002cdc:	00078613          	mv	a2,a5
80002ce0:	00070593          	mv	a1,a4
80002ce4:	800057b7          	lui	a5,0x80005
80002ce8:	40078513          	addi	a0,a5,1024 # 80005400 <BSS_END+0xf4>
80002cec:	d0dff0ef          	jal	800029f8 <printf>
	printf("RODATA: 0x%x -> 0x%x\n", RODATA_START, RODATA_END);
80002cf0:	800057b7          	lui	a5,0x80005
80002cf4:	3007a703          	lw	a4,768(a5) # 80005300 <RODATA_START>
80002cf8:	800057b7          	lui	a5,0x80005
80002cfc:	3047a783          	lw	a5,772(a5) # 80005304 <RODATA_END>
80002d00:	00078613          	mv	a2,a5
80002d04:	00070593          	mv	a1,a4
80002d08:	800057b7          	lui	a5,0x80005
80002d0c:	41878513          	addi	a0,a5,1048 # 80005418 <BSS_END+0x10c>
80002d10:	ce9ff0ef          	jal	800029f8 <printf>
	printf("DATA:   0x%x -> 0x%x\n", DATA_START, DATA_END);
80002d14:	800057b7          	lui	a5,0x80005
80002d18:	2f87a703          	lw	a4,760(a5) # 800052f8 <DATA_START>
80002d1c:	800057b7          	lui	a5,0x80005
80002d20:	2fc7a783          	lw	a5,764(a5) # 800052fc <DATA_END>
80002d24:	00078613          	mv	a2,a5
80002d28:	00070593          	mv	a1,a4
80002d2c:	800057b7          	lui	a5,0x80005
80002d30:	43078513          	addi	a0,a5,1072 # 80005430 <BSS_END+0x124>
80002d34:	cc5ff0ef          	jal	800029f8 <printf>
	printf("BSS:    0x%x -> 0x%x\n", BSS_START, BSS_END);
80002d38:	800057b7          	lui	a5,0x80005
80002d3c:	3087a703          	lw	a4,776(a5) # 80005308 <BSS_START>
80002d40:	800057b7          	lui	a5,0x80005
80002d44:	30c7a783          	lw	a5,780(a5) # 8000530c <BSS_END>
80002d48:	00078613          	mv	a2,a5
80002d4c:	00070593          	mv	a1,a4
80002d50:	800057b7          	lui	a5,0x80005
80002d54:	44878513          	addi	a0,a5,1096 # 80005448 <BSS_END+0x13c>
80002d58:	ca1ff0ef          	jal	800029f8 <printf>
	printf("HEAP:   0x%x -> 0x%x\n", _alloc_start, _alloc_end);
80002d5c:	800067b7          	lui	a5,0x80006
80002d60:	3fc7a703          	lw	a4,1020(a5) # 800063fc <_alloc_start>
80002d64:	800067b7          	lui	a5,0x80006
80002d68:	4007a783          	lw	a5,1024(a5) # 80006400 <_alloc_end>
80002d6c:	00078613          	mv	a2,a5
80002d70:	00070593          	mv	a1,a4
80002d74:	800057b7          	lui	a5,0x80005
80002d78:	46078513          	addi	a0,a5,1120 # 80005460 <BSS_END+0x154>
80002d7c:	c7dff0ef          	jal	800029f8 <printf>
}
80002d80:	00000013          	nop
80002d84:	01c12083          	lw	ra,28(sp)
80002d88:	01812403          	lw	s0,24(sp)
80002d8c:	02010113          	addi	sp,sp,32
80002d90:	00008067          	ret

80002d94 <page_alloc>:
/*
 * Allocate a memory block which is composed of contiguous physical pages
 * - npages: the number of PAGE_SIZE pages to allocate
 */
void *page_alloc(int npages)
{
80002d94:	fc010113          	addi	sp,sp,-64
80002d98:	02112e23          	sw	ra,60(sp)
80002d9c:	02812c23          	sw	s0,56(sp)
80002da0:	04010413          	addi	s0,sp,64
80002da4:	fca42623          	sw	a0,-52(s0)
	/* Note we are searching the page descriptor bitmaps. */
	int found = 0;
80002da8:	fe042623          	sw	zero,-20(s0)
	struct Page *page_i = (struct Page *)HEAP_START;
80002dac:	800057b7          	lui	a5,0x80005
80002db0:	2e87a783          	lw	a5,744(a5) # 800052e8 <_text_end>
80002db4:	fef42423          	sw	a5,-24(s0)
	for (int i = 0; i <= (_num_pages - npages); i++) {
80002db8:	fe042223          	sw	zero,-28(s0)
80002dbc:	11c0006f          	j	80002ed8 <page_alloc+0x144>
		if (_is_free(page_i)) {
80002dc0:	fe842503          	lw	a0,-24(s0)
80002dc4:	d2dff0ef          	jal	80002af0 <_is_free>
80002dc8:	00050793          	mv	a5,a0
80002dcc:	0e078a63          	beqz	a5,80002ec0 <page_alloc+0x12c>
			found = 1;
80002dd0:	00100793          	li	a5,1
80002dd4:	fef42623          	sw	a5,-20(s0)
			/* 
			 * meet a free page, continue to check if following
			 * (npages - 1) pages are also unallocated.
			 */
			struct Page *page_j = page_i + 1;
80002dd8:	fe842783          	lw	a5,-24(s0)
80002ddc:	00178793          	addi	a5,a5,1
80002de0:	fef42023          	sw	a5,-32(s0)
			for (int j = i + 1; j < (i + npages); j++) {
80002de4:	fe442783          	lw	a5,-28(s0)
80002de8:	00178793          	addi	a5,a5,1
80002dec:	fcf42e23          	sw	a5,-36(s0)
80002df0:	0340006f          	j	80002e24 <page_alloc+0x90>
				if (!_is_free(page_j)) {
80002df4:	fe042503          	lw	a0,-32(s0)
80002df8:	cf9ff0ef          	jal	80002af0 <_is_free>
80002dfc:	00050793          	mv	a5,a0
80002e00:	00079663          	bnez	a5,80002e0c <page_alloc+0x78>
					found = 0;
80002e04:	fe042623          	sw	zero,-20(s0)
					break;
80002e08:	0300006f          	j	80002e38 <page_alloc+0xa4>
				}
				page_j++;
80002e0c:	fe042783          	lw	a5,-32(s0)
80002e10:	00178793          	addi	a5,a5,1
80002e14:	fef42023          	sw	a5,-32(s0)
			for (int j = i + 1; j < (i + npages); j++) {
80002e18:	fdc42783          	lw	a5,-36(s0)
80002e1c:	00178793          	addi	a5,a5,1
80002e20:	fcf42e23          	sw	a5,-36(s0)
80002e24:	fe442703          	lw	a4,-28(s0)
80002e28:	fcc42783          	lw	a5,-52(s0)
80002e2c:	00f707b3          	add	a5,a4,a5
80002e30:	fdc42703          	lw	a4,-36(s0)
80002e34:	fcf740e3          	blt	a4,a5,80002df4 <page_alloc+0x60>
			/*
			 * get a memory block which is good enough for us,
			 * take housekeeping, then return the actual start
			 * address of the first page of this memory block
			 */
			if (found) {
80002e38:	fec42783          	lw	a5,-20(s0)
80002e3c:	08078263          	beqz	a5,80002ec0 <page_alloc+0x12c>
				struct Page *page_k = page_i;
80002e40:	fe842783          	lw	a5,-24(s0)
80002e44:	fcf42c23          	sw	a5,-40(s0)
				for (int k = i; k < (i + npages); k++) {
80002e48:	fe442783          	lw	a5,-28(s0)
80002e4c:	fcf42a23          	sw	a5,-44(s0)
80002e50:	0280006f          	j	80002e78 <page_alloc+0xe4>
					_set_flag(page_k, PAGE_TAKEN);
80002e54:	00100593          	li	a1,1
80002e58:	fd842503          	lw	a0,-40(s0)
80002e5c:	cd1ff0ef          	jal	80002b2c <_set_flag>
					page_k++;
80002e60:	fd842783          	lw	a5,-40(s0)
80002e64:	00178793          	addi	a5,a5,1
80002e68:	fcf42c23          	sw	a5,-40(s0)
				for (int k = i; k < (i + npages); k++) {
80002e6c:	fd442783          	lw	a5,-44(s0)
80002e70:	00178793          	addi	a5,a5,1
80002e74:	fcf42a23          	sw	a5,-44(s0)
80002e78:	fe442703          	lw	a4,-28(s0)
80002e7c:	fcc42783          	lw	a5,-52(s0)
80002e80:	00f707b3          	add	a5,a4,a5
80002e84:	fd442703          	lw	a4,-44(s0)
80002e88:	fcf746e3          	blt	a4,a5,80002e54 <page_alloc+0xc0>
				}
				page_k--;
80002e8c:	fd842783          	lw	a5,-40(s0)
80002e90:	fff78793          	addi	a5,a5,-1
80002e94:	fcf42c23          	sw	a5,-40(s0)
				_set_flag(page_k, PAGE_LAST);
80002e98:	00200593          	li	a1,2
80002e9c:	fd842503          	lw	a0,-40(s0)
80002ea0:	c8dff0ef          	jal	80002b2c <_set_flag>
				return (void *)(_alloc_start + i * PAGE_SIZE);
80002ea4:	fe442783          	lw	a5,-28(s0)
80002ea8:	00c79793          	slli	a5,a5,0xc
80002eac:	00078713          	mv	a4,a5
80002eb0:	800067b7          	lui	a5,0x80006
80002eb4:	3fc7a783          	lw	a5,1020(a5) # 800063fc <_alloc_start>
80002eb8:	00f707b3          	add	a5,a4,a5
80002ebc:	0380006f          	j	80002ef4 <page_alloc+0x160>
			}
		}
		page_i++;
80002ec0:	fe842783          	lw	a5,-24(s0)
80002ec4:	00178793          	addi	a5,a5,1
80002ec8:	fef42423          	sw	a5,-24(s0)
	for (int i = 0; i <= (_num_pages - npages); i++) {
80002ecc:	fe442783          	lw	a5,-28(s0)
80002ed0:	00178793          	addi	a5,a5,1
80002ed4:	fef42223          	sw	a5,-28(s0)
80002ed8:	800067b7          	lui	a5,0x80006
80002edc:	4047a703          	lw	a4,1028(a5) # 80006404 <_num_pages>
80002ee0:	fcc42783          	lw	a5,-52(s0)
80002ee4:	40f70733          	sub	a4,a4,a5
80002ee8:	fe442783          	lw	a5,-28(s0)
80002eec:	ecf77ae3          	bgeu	a4,a5,80002dc0 <page_alloc+0x2c>
	}
	return NULL;
80002ef0:	00000793          	li	a5,0
}
80002ef4:	00078513          	mv	a0,a5
80002ef8:	03c12083          	lw	ra,60(sp)
80002efc:	03812403          	lw	s0,56(sp)
80002f00:	04010113          	addi	sp,sp,64
80002f04:	00008067          	ret

80002f08 <page_free>:
/*
 * Free the memory block
 * - p: start address of the memory block
 */
void page_free(void *p)
{
80002f08:	fd010113          	addi	sp,sp,-48
80002f0c:	02112623          	sw	ra,44(sp)
80002f10:	02812423          	sw	s0,40(sp)
80002f14:	03010413          	addi	s0,sp,48
80002f18:	fca42e23          	sw	a0,-36(s0)
	/*
	 * Assert (TBD) if p is invalid
	 */
	if (!p || (uint32_t)p >= _alloc_end) {
80002f1c:	fdc42783          	lw	a5,-36(s0)
80002f20:	08078463          	beqz	a5,80002fa8 <page_free+0xa0>
80002f24:	fdc42703          	lw	a4,-36(s0)
80002f28:	800067b7          	lui	a5,0x80006
80002f2c:	4007a783          	lw	a5,1024(a5) # 80006400 <_alloc_end>
80002f30:	06f77c63          	bgeu	a4,a5,80002fa8 <page_free+0xa0>
		return;
	}
	/* get the first page descriptor of this memory block */
	struct Page *page = (struct Page *)HEAP_START;
80002f34:	800057b7          	lui	a5,0x80005
80002f38:	2e87a783          	lw	a5,744(a5) # 800052e8 <_text_end>
80002f3c:	fef42623          	sw	a5,-20(s0)
	page += ((uint32_t)p - _alloc_start)/ PAGE_SIZE;
80002f40:	fdc42703          	lw	a4,-36(s0)
80002f44:	800067b7          	lui	a5,0x80006
80002f48:	3fc7a783          	lw	a5,1020(a5) # 800063fc <_alloc_start>
80002f4c:	40f707b3          	sub	a5,a4,a5
80002f50:	00c7d793          	srli	a5,a5,0xc
80002f54:	fec42703          	lw	a4,-20(s0)
80002f58:	00f707b3          	add	a5,a4,a5
80002f5c:	fef42623          	sw	a5,-20(s0)
	/* loop and clear all the page descriptors of the memory block */
	while (!_is_free(page)) {
80002f60:	0340006f          	j	80002f94 <page_free+0x8c>
		if (_is_last(page)) {
80002f64:	fec42503          	lw	a0,-20(s0)
80002f68:	c09ff0ef          	jal	80002b70 <_is_last>
80002f6c:	00050793          	mv	a5,a0
80002f70:	00078863          	beqz	a5,80002f80 <page_free+0x78>
			_clear(page);
80002f74:	fec42503          	lw	a0,-20(s0)
80002f78:	b51ff0ef          	jal	80002ac8 <_clear>
			break;
80002f7c:	0300006f          	j	80002fac <page_free+0xa4>
		} else {
			_clear(page);
80002f80:	fec42503          	lw	a0,-20(s0)
80002f84:	b45ff0ef          	jal	80002ac8 <_clear>
			page++;;
80002f88:	fec42783          	lw	a5,-20(s0)
80002f8c:	00178793          	addi	a5,a5,1
80002f90:	fef42623          	sw	a5,-20(s0)
	while (!_is_free(page)) {
80002f94:	fec42503          	lw	a0,-20(s0)
80002f98:	b59ff0ef          	jal	80002af0 <_is_free>
80002f9c:	00050793          	mv	a5,a0
80002fa0:	fc0782e3          	beqz	a5,80002f64 <page_free+0x5c>
80002fa4:	0080006f          	j	80002fac <page_free+0xa4>
		return;
80002fa8:	00000013          	nop
		}
	}
}
80002fac:	02c12083          	lw	ra,44(sp)
80002fb0:	02812403          	lw	s0,40(sp)
80002fb4:	03010113          	addi	sp,sp,48
80002fb8:	00008067          	ret

80002fbc <page_test>:

void page_test()
{
80002fbc:	fe010113          	addi	sp,sp,-32
80002fc0:	00112e23          	sw	ra,28(sp)
80002fc4:	00812c23          	sw	s0,24(sp)
80002fc8:	02010413          	addi	s0,sp,32
	void *p = page_alloc(2);
80002fcc:	00200513          	li	a0,2
80002fd0:	dc5ff0ef          	jal	80002d94 <page_alloc>
80002fd4:	fea42623          	sw	a0,-20(s0)
	printf("p = 0x%x\n", p);
80002fd8:	fec42583          	lw	a1,-20(s0)
80002fdc:	800057b7          	lui	a5,0x80005
80002fe0:	47878513          	addi	a0,a5,1144 # 80005478 <BSS_END+0x16c>
80002fe4:	a15ff0ef          	jal	800029f8 <printf>
	//page_free(p);

	void *p2 = page_alloc(7);
80002fe8:	00700513          	li	a0,7
80002fec:	da9ff0ef          	jal	80002d94 <page_alloc>
80002ff0:	fea42423          	sw	a0,-24(s0)
	printf("p2 = 0x%x\n", p2);
80002ff4:	fe842583          	lw	a1,-24(s0)
80002ff8:	800057b7          	lui	a5,0x80005
80002ffc:	48478513          	addi	a0,a5,1156 # 80005484 <BSS_END+0x178>
80003000:	9f9ff0ef          	jal	800029f8 <printf>
	page_free(p2);
80003004:	fe842503          	lw	a0,-24(s0)
80003008:	f01ff0ef          	jal	80002f08 <page_free>

	void *p3 = page_alloc(4);
8000300c:	00400513          	li	a0,4
80003010:	d85ff0ef          	jal	80002d94 <page_alloc>
80003014:	fea42223          	sw	a0,-28(s0)
	printf("p3 = 0x%x\n", p3);
80003018:	fe442583          	lw	a1,-28(s0)
8000301c:	800057b7          	lui	a5,0x80005
80003020:	49078513          	addi	a0,a5,1168 # 80005490 <BSS_END+0x184>
80003024:	9d5ff0ef          	jal	800029f8 <printf>
}
80003028:	00000013          	nop
8000302c:	01c12083          	lw	ra,28(sp)
80003030:	01812403          	lw	s0,24(sp)
80003034:	02010113          	addi	sp,sp,32
80003038:	00008067          	ret

8000303c <r_mhartid>:
 * In the standard RISC-V calling convention, the stack pointer sp
 * is always 16-byte aligned.
 */
uint8_t task_stack[MAX_TASKS][STACK_SIZE];
uint8_t kernel_stack_kernel[KERNEL_STACK_SIZE];
// __attribute__((aligned(16))) 
8000303c:	fe010113          	addi	sp,sp,-32
80003040:	00812e23          	sw	s0,28(sp)
80003044:	02010413          	addi	s0,sp,32
task_t tasks[MAX_TASKS];
struct context kernel_ctx;
80003048:	f14027f3          	csrr	a5,mhartid
8000304c:	fef42623          	sw	a5,-20(s0)
static int _top = 0;
80003050:	fec42783          	lw	a5,-20(s0)
static int current_task_id = -1;
80003054:	00078513          	mv	a0,a5
80003058:	01c12403          	lw	s0,28(sp)
8000305c:	02010113          	addi	sp,sp,32
80003060:	00008067          	ret

80003064 <r_mstatus>:
	while (1)
	{
		SCHEDULE;
	}
}

80003064:	fe010113          	addi	sp,sp,-32
80003068:	00812e23          	sw	s0,28(sp)
8000306c:	02010413          	addi	s0,sp,32
void back_to_os(void)
{
80003070:	300027f3          	csrr	a5,mstatus
80003074:	fef42623          	sw	a5,-20(s0)
	schedule();
80003078:	fec42783          	lw	a5,-20(s0)
}
8000307c:	00078513          	mv	a0,a5
80003080:	01c12403          	lw	s0,28(sp)
80003084:	02010113          	addi	sp,sp,32
80003088:	00008067          	ret

8000308c <r_mie>:
	{
		if (tasks[i].state == TASK_READY && tasks[i].priority < highest_priority)
		{
			highest_priority = tasks[i].priority;
		}
	}
8000308c:	fe010113          	addi	sp,sp,-32
80003090:	00812e23          	sw	s0,28(sp)
80003094:	02010413          	addi	s0,sp,32

	// 在最高优先级中轮转选择下一个任务
80003098:	304027f3          	csrr	a5,mie
8000309c:	fef42623          	sw	a5,-20(s0)
	for (int i = 0; i < _top; i++)
800030a0:	fec42783          	lw	a5,-20(s0)
	{
800030a4:	00078513          	mv	a0,a5
800030a8:	01c12403          	lw	s0,28(sp)
800030ac:	02010113          	addi	sp,sp,32
800030b0:	00008067          	ret

800030b4 <w_mie>:
		int idx = (current_task_id + 1 + i) % _top;
		if (tasks[idx].state == TASK_READY && tasks[idx].priority == highest_priority)
		{
800030b4:	fe010113          	addi	sp,sp,-32
800030b8:	00812e23          	sw	s0,28(sp)
800030bc:	02010413          	addi	s0,sp,32
800030c0:	fea42623          	sw	a0,-20(s0)
			next_task = idx;
800030c4:	fec42783          	lw	a5,-20(s0)
800030c8:	30479073          	csrw	mie,a5
			break;
800030cc:	00000013          	nop
800030d0:	01c12403          	lw	s0,28(sp)
800030d4:	02010113          	addi	sp,sp,32
800030d8:	00008067          	ret

800030dc <kernel_scheduler>:
{
800030dc:	fe010113          	addi	sp,sp,-32
800030e0:	00112e23          	sw	ra,28(sp)
800030e4:	00812c23          	sw	s0,24(sp)
800030e8:	02010413          	addi	s0,sp,32
		SCHEDULE;
800030ec:	f51ff0ef          	jal	8000303c <r_mhartid>
800030f0:	00050793          	mv	a5,a0
800030f4:	fef42623          	sw	a5,-20(s0)
800030f8:	fec42703          	lw	a4,-20(s0)
800030fc:	008007b7          	lui	a5,0x800
80003100:	00f707b3          	add	a5,a4,a5
80003104:	00279793          	slli	a5,a5,0x2
80003108:	00078713          	mv	a4,a5
8000310c:	00100793          	li	a5,1
80003110:	00f72023          	sw	a5,0(a4)
80003114:	00000013          	nop
80003118:	fd5ff06f          	j	800030ec <kernel_scheduler+0x10>

8000311c <back_to_os>:
{
8000311c:	ff010113          	addi	sp,sp,-16
80003120:	00112623          	sw	ra,12(sp)
80003124:	00812423          	sw	s0,8(sp)
80003128:	01010413          	addi	s0,sp,16
	schedule();
8000312c:	08c000ef          	jal	800031b8 <schedule>
}
80003130:	00000013          	nop
80003134:	00c12083          	lw	ra,12(sp)
80003138:	00812403          	lw	s0,8(sp)
8000313c:	01010113          	addi	sp,sp,16
80003140:	00008067          	ret

80003144 <sched_init>:
{
80003144:	ff010113          	addi	sp,sp,-16
80003148:	00112623          	sw	ra,12(sp)
8000314c:	00812423          	sw	s0,8(sp)
80003150:	01010413          	addi	s0,sp,16
	w_mie(r_mie() | MIE_MSIE);
80003154:	f39ff0ef          	jal	8000308c <r_mie>
80003158:	00050793          	mv	a5,a0
8000315c:	0087e793          	ori	a5,a5,8
80003160:	00078513          	mv	a0,a5
80003164:	f51ff0ef          	jal	800030b4 <w_mie>
	kernel_ctx.sp = (reg_t)&kernel_stack_kernel[KERNEL_STACK_SIZE];
80003168:	800097b7          	lui	a5,0x80009
8000316c:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003170:	800097b7          	lui	a5,0x80009
80003174:	62078793          	addi	a5,a5,1568 # 80009620 <kernel_ctx>
80003178:	00e7a223          	sw	a4,4(a5)
	kernel_ctx.ra = (reg_t)kernel_scheduler;
8000317c:	800037b7          	lui	a5,0x80003
80003180:	0dc78713          	addi	a4,a5,220 # 800030dc <kernel_scheduler>
80003184:	800097b7          	lui	a5,0x80009
80003188:	62078793          	addi	a5,a5,1568 # 80009620 <kernel_ctx>
8000318c:	00e7a023          	sw	a4,0(a5)
	kernel_ctx.pc = (reg_t)kernel_scheduler;
80003190:	800037b7          	lui	a5,0x80003
80003194:	0dc78713          	addi	a4,a5,220 # 800030dc <kernel_scheduler>
80003198:	800097b7          	lui	a5,0x80009
8000319c:	62078793          	addi	a5,a5,1568 # 80009620 <kernel_ctx>
800031a0:	06e7ae23          	sw	a4,124(a5)
}
800031a4:	00000013          	nop
800031a8:	00c12083          	lw	ra,12(sp)
800031ac:	00812403          	lw	s0,8(sp)
800031b0:	01010113          	addi	sp,sp,16
800031b4:	00008067          	ret

800031b8 <schedule>:
{
800031b8:	fd010113          	addi	sp,sp,-48
800031bc:	02112623          	sw	ra,44(sp)
800031c0:	02812423          	sw	s0,40(sp)
800031c4:	03010413          	addi	s0,sp,48
	spin_lock();
800031c8:	631010ef          	jal	80004ff8 <spin_lock>
	if (_top <= 0)
800031cc:	800097b7          	lui	a5,0x80009
800031d0:	6a47a783          	lw	a5,1700(a5) # 800096a4 <_top>
800031d4:	00f04663          	bgtz	a5,800031e0 <schedule+0x28>
		spin_unlock();
800031d8:	65d010ef          	jal	80005034 <spin_unlock>
		return;
800031dc:	2840006f          	j	80003460 <schedule+0x2a8>
	int next_task = -1;
800031e0:	fff00793          	li	a5,-1
800031e4:	fef42623          	sw	a5,-20(s0)
	uint8_t highest_priority = 255;
800031e8:	fff00793          	li	a5,-1
800031ec:	fef405a3          	sb	a5,-21(s0)
	if (tasks[current_task_id].state == TASK_RUNNING)
800031f0:	800067b7          	lui	a5,0x80006
800031f4:	0007a683          	lw	a3,0(a5) # 80006000 <current_task_id>
800031f8:	800097b7          	lui	a5,0x80009
800031fc:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003200:	09c00793          	li	a5,156
80003204:	02f687b3          	mul	a5,a3,a5
80003208:	00f707b3          	add	a5,a4,a5
8000320c:	0907a703          	lw	a4,144(a5)
80003210:	00200793          	li	a5,2
80003214:	02f71463          	bne	a4,a5,8000323c <schedule+0x84>
		tasks[current_task_id].state = TASK_READY;
80003218:	800067b7          	lui	a5,0x80006
8000321c:	0007a683          	lw	a3,0(a5) # 80006000 <current_task_id>
80003220:	800097b7          	lui	a5,0x80009
80003224:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003228:	09c00793          	li	a5,156
8000322c:	02f687b3          	mul	a5,a3,a5
80003230:	00f707b3          	add	a5,a4,a5
80003234:	00100713          	li	a4,1
80003238:	08e7a823          	sw	a4,144(a5)
	for (int i = 0; i < _top; i++)
8000323c:	fe042223          	sw	zero,-28(s0)
80003240:	0780006f          	j	800032b8 <schedule+0x100>
		if (tasks[i].state == TASK_READY && tasks[i].priority < highest_priority)
80003244:	800097b7          	lui	a5,0x80009
80003248:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
8000324c:	fe442683          	lw	a3,-28(s0)
80003250:	09c00793          	li	a5,156
80003254:	02f687b3          	mul	a5,a3,a5
80003258:	00f707b3          	add	a5,a4,a5
8000325c:	0907a703          	lw	a4,144(a5)
80003260:	00100793          	li	a5,1
80003264:	04f71463          	bne	a4,a5,800032ac <schedule+0xf4>
80003268:	800097b7          	lui	a5,0x80009
8000326c:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003270:	fe442683          	lw	a3,-28(s0)
80003274:	09c00793          	li	a5,156
80003278:	02f687b3          	mul	a5,a3,a5
8000327c:	00f707b3          	add	a5,a4,a5
80003280:	08c7c783          	lbu	a5,140(a5)
80003284:	feb44703          	lbu	a4,-21(s0)
80003288:	02e7f263          	bgeu	a5,a4,800032ac <schedule+0xf4>
			highest_priority = tasks[i].priority;
8000328c:	800097b7          	lui	a5,0x80009
80003290:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003294:	fe442683          	lw	a3,-28(s0)
80003298:	09c00793          	li	a5,156
8000329c:	02f687b3          	mul	a5,a3,a5
800032a0:	00f707b3          	add	a5,a4,a5
800032a4:	08c7c783          	lbu	a5,140(a5)
800032a8:	fef405a3          	sb	a5,-21(s0)
	for (int i = 0; i < _top; i++)
800032ac:	fe442783          	lw	a5,-28(s0)
800032b0:	00178793          	addi	a5,a5,1
800032b4:	fef42223          	sw	a5,-28(s0)
800032b8:	800097b7          	lui	a5,0x80009
800032bc:	6a47a783          	lw	a5,1700(a5) # 800096a4 <_top>
800032c0:	fe442703          	lw	a4,-28(s0)
800032c4:	f8f740e3          	blt	a4,a5,80003244 <schedule+0x8c>
	for (int i = 0; i < _top; i++)
800032c8:	fe042023          	sw	zero,-32(s0)
800032cc:	0880006f          	j	80003354 <schedule+0x19c>
		int idx = (current_task_id + 1 + i) % _top;
800032d0:	800067b7          	lui	a5,0x80006
800032d4:	0007a783          	lw	a5,0(a5) # 80006000 <current_task_id>
800032d8:	00178713          	addi	a4,a5,1
800032dc:	fe042783          	lw	a5,-32(s0)
800032e0:	00f70733          	add	a4,a4,a5
800032e4:	800097b7          	lui	a5,0x80009
800032e8:	6a47a783          	lw	a5,1700(a5) # 800096a4 <_top>
800032ec:	02f767b3          	rem	a5,a4,a5
800032f0:	fcf42c23          	sw	a5,-40(s0)
		if (tasks[idx].state == TASK_READY && tasks[idx].priority == highest_priority)
800032f4:	800097b7          	lui	a5,0x80009
800032f8:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
800032fc:	fd842683          	lw	a3,-40(s0)
80003300:	09c00793          	li	a5,156
80003304:	02f687b3          	mul	a5,a3,a5
80003308:	00f707b3          	add	a5,a4,a5
8000330c:	0907a703          	lw	a4,144(a5)
80003310:	00100793          	li	a5,1
80003314:	02f71a63          	bne	a4,a5,80003348 <schedule+0x190>
80003318:	800097b7          	lui	a5,0x80009
8000331c:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003320:	fd842683          	lw	a3,-40(s0)
80003324:	09c00793          	li	a5,156
80003328:	02f687b3          	mul	a5,a3,a5
8000332c:	00f707b3          	add	a5,a4,a5
80003330:	08c7c783          	lbu	a5,140(a5)
80003334:	feb44703          	lbu	a4,-21(s0)
80003338:	00f71863          	bne	a4,a5,80003348 <schedule+0x190>
			next_task = idx;
8000333c:	fd842783          	lw	a5,-40(s0)
80003340:	fef42623          	sw	a5,-20(s0)
			break;
80003344:	0200006f          	j	80003364 <schedule+0x1ac>
	for (int i = 0; i < _top; i++)
80003348:	fe042783          	lw	a5,-32(s0)
8000334c:	00178793          	addi	a5,a5,1
80003350:	fef42023          	sw	a5,-32(s0)
80003354:	800097b7          	lui	a5,0x80009
80003358:	6a47a783          	lw	a5,1700(a5) # 800096a4 <_top>
8000335c:	fe042703          	lw	a4,-32(s0)
80003360:	f6f748e3          	blt	a4,a5,800032d0 <schedule+0x118>
		}
	}

	if (next_task == -1)
80003364:	fec42703          	lw	a4,-20(s0)
80003368:	fff00793          	li	a5,-1
8000336c:	06f71c63          	bne	a4,a5,800033e4 <schedule+0x22c>
	{
		for (int i = 0; i < MAX_TASKS; i++)
80003370:	fc042e23          	sw	zero,-36(s0)
80003374:	0640006f          	j	800033d8 <schedule+0x220>
		{
			if (tasks[i].state == TASK_READY && tasks[i].priority == highest_priority)
80003378:	800097b7          	lui	a5,0x80009
8000337c:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003380:	fdc42683          	lw	a3,-36(s0)
80003384:	09c00793          	li	a5,156
80003388:	02f687b3          	mul	a5,a3,a5
8000338c:	00f707b3          	add	a5,a4,a5
80003390:	0907a703          	lw	a4,144(a5)
80003394:	00100793          	li	a5,1
80003398:	02f71a63          	bne	a4,a5,800033cc <schedule+0x214>
8000339c:	800097b7          	lui	a5,0x80009
800033a0:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
800033a4:	fdc42683          	lw	a3,-36(s0)
800033a8:	09c00793          	li	a5,156
800033ac:	02f687b3          	mul	a5,a3,a5
800033b0:	00f707b3          	add	a5,a4,a5
800033b4:	08c7c783          	lbu	a5,140(a5)
800033b8:	feb44703          	lbu	a4,-21(s0)
800033bc:	00f71863          	bne	a4,a5,800033cc <schedule+0x214>
			{
				next_task = i;
800033c0:	fdc42783          	lw	a5,-36(s0)
800033c4:	fef42623          	sw	a5,-20(s0)
				break;
800033c8:	01c0006f          	j	800033e4 <schedule+0x22c>
		for (int i = 0; i < MAX_TASKS; i++)
800033cc:	fdc42783          	lw	a5,-36(s0)
800033d0:	00178793          	addi	a5,a5,1
800033d4:	fcf42e23          	sw	a5,-36(s0)
800033d8:	fdc42703          	lw	a4,-36(s0)
800033dc:	00900793          	li	a5,9
800033e0:	f8e7dce3          	bge	a5,a4,80003378 <schedule+0x1c0>
			}
		}
	}

	if (next_task == -1)
800033e4:	fec42703          	lw	a4,-20(s0)
800033e8:	fff00793          	li	a5,-1
800033ec:	00f71663          	bne	a4,a5,800033f8 <schedule+0x240>
	{
		spin_unlock();
800033f0:	445010ef          	jal	80005034 <spin_unlock>
		// panic("没有可调度的任务");
		return;
800033f4:	06c0006f          	j	80003460 <schedule+0x2a8>
	}

	current_task_id = next_task;
800033f8:	800067b7          	lui	a5,0x80006
800033fc:	fec42703          	lw	a4,-20(s0)
80003400:	00e7a023          	sw	a4,0(a5) # 80006000 <current_task_id>
	current_ctx = &(tasks[next_task].ctx);
80003404:	fec42703          	lw	a4,-20(s0)
80003408:	09c00793          	li	a5,156
8000340c:	02f70733          	mul	a4,a4,a5
80003410:	800097b7          	lui	a5,0x80009
80003414:	00878793          	addi	a5,a5,8 # 80009008 <tasks>
80003418:	00f70733          	add	a4,a4,a5
8000341c:	800067b7          	lui	a5,0x80006
80003420:	00e7a423          	sw	a4,8(a5) # 80006008 <current_ctx>

	tasks[current_task_id].state = TASK_RUNNING;
80003424:	800067b7          	lui	a5,0x80006
80003428:	0007a683          	lw	a3,0(a5) # 80006000 <current_task_id>
8000342c:	800097b7          	lui	a5,0x80009
80003430:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003434:	09c00793          	li	a5,156
80003438:	02f687b3          	mul	a5,a3,a5
8000343c:	00f707b3          	add	a5,a4,a5
80003440:	00200713          	li	a4,2
80003444:	08e7a823          	sw	a4,144(a5)
	check_privilege_level();
80003448:	621000ef          	jal	80004268 <check_privilege_level>
	switch_to(current_ctx);
8000344c:	800067b7          	lui	a5,0x80006
80003450:	0087a783          	lw	a5,8(a5) # 80006008 <current_ctx>
80003454:	00078513          	mv	a0,a5
80003458:	da9fe0ef          	jal	80002200 <switch_to>
	spin_unlock();
8000345c:	3d9010ef          	jal	80005034 <spin_unlock>
}
80003460:	02c12083          	lw	ra,44(sp)
80003464:	02812403          	lw	s0,40(sp)
80003468:	03010113          	addi	sp,sp,48
8000346c:	00008067          	ret

80003470 <task_create>:
 * RETURN VALUE
 *  0: success
 *  -1: if error occurred
 */
int task_create(void (*start_routin)(void *param), void *param, uint8_t priority, uint32_t timeslice)
{
80003470:	fd010113          	addi	sp,sp,-48
80003474:	02112623          	sw	ra,44(sp)
80003478:	02812423          	sw	s0,40(sp)
8000347c:	03010413          	addi	s0,sp,48
80003480:	fca42e23          	sw	a0,-36(s0)
80003484:	fcb42c23          	sw	a1,-40(s0)
80003488:	00060793          	mv	a5,a2
8000348c:	fcd42823          	sw	a3,-48(s0)
80003490:	fcf40ba3          	sb	a5,-41(s0)
	spin_lock();
80003494:	365010ef          	jal	80004ff8 <spin_lock>
	if (_top >= MAX_TASKS)
80003498:	800097b7          	lui	a5,0x80009
8000349c:	6a47a703          	lw	a4,1700(a5) # 800096a4 <_top>
800034a0:	00900793          	li	a5,9
800034a4:	00e7d863          	bge	a5,a4,800034b4 <task_create+0x44>
	{
		spin_unlock();
800034a8:	38d010ef          	jal	80005034 <spin_unlock>
		return -1;
800034ac:	fff00793          	li	a5,-1
800034b0:	1f80006f          	j	800036a8 <task_create+0x238>
	}

	tasks[_top].func = start_routin;
800034b4:	800097b7          	lui	a5,0x80009
800034b8:	6a47a683          	lw	a3,1700(a5) # 800096a4 <_top>
800034bc:	800097b7          	lui	a5,0x80009
800034c0:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
800034c4:	09c00793          	li	a5,156
800034c8:	02f687b3          	mul	a5,a3,a5
800034cc:	00f707b3          	add	a5,a4,a5
800034d0:	fdc42703          	lw	a4,-36(s0)
800034d4:	08e7a423          	sw	a4,136(a5)
	tasks[_top].param = param;
800034d8:	800097b7          	lui	a5,0x80009
800034dc:	6a47a683          	lw	a3,1700(a5) # 800096a4 <_top>
800034e0:	800097b7          	lui	a5,0x80009
800034e4:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
800034e8:	09c00793          	li	a5,156
800034ec:	02f687b3          	mul	a5,a3,a5
800034f0:	00f707b3          	add	a5,a4,a5
800034f4:	fd842703          	lw	a4,-40(s0)
800034f8:	08e7a223          	sw	a4,132(a5)
	tasks[_top].ctx.sp = (reg_t)&task_stack[_top][STACK_SIZE - 1];
800034fc:	800097b7          	lui	a5,0x80009
80003500:	6a47a783          	lw	a5,1700(a5) # 800096a4 <_top>
80003504:	00a79793          	slli	a5,a5,0xa
80003508:	3ff78713          	addi	a4,a5,1023
8000350c:	800067b7          	lui	a5,0x80006
80003510:	40878793          	addi	a5,a5,1032 # 80006408 <task_stack>
80003514:	00f70733          	add	a4,a4,a5
80003518:	800097b7          	lui	a5,0x80009
8000351c:	6a47a683          	lw	a3,1700(a5) # 800096a4 <_top>
80003520:	00070613          	mv	a2,a4
80003524:	800097b7          	lui	a5,0x80009
80003528:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
8000352c:	09c00793          	li	a5,156
80003530:	02f687b3          	mul	a5,a3,a5
80003534:	00f707b3          	add	a5,a4,a5
80003538:	00c7a223          	sw	a2,4(a5)
	//tasks[_top].ctx.ra = (reg_t)start_routin;
	tasks[_top].ctx.pc = (reg_t)start_routin;
8000353c:	800097b7          	lui	a5,0x80009
80003540:	6a47a603          	lw	a2,1700(a5) # 800096a4 <_top>
80003544:	fdc42703          	lw	a4,-36(s0)
80003548:	800097b7          	lui	a5,0x80009
8000354c:	00878693          	addi	a3,a5,8 # 80009008 <tasks>
80003550:	09c00793          	li	a5,156
80003554:	02f607b3          	mul	a5,a2,a5
80003558:	00f687b3          	add	a5,a3,a5
8000355c:	06e7ae23          	sw	a4,124(a5)
	tasks[_top].ctx.a0 = param;
80003560:	800097b7          	lui	a5,0x80009
80003564:	6a47a603          	lw	a2,1700(a5) # 800096a4 <_top>
80003568:	fd842703          	lw	a4,-40(s0)
8000356c:	800097b7          	lui	a5,0x80009
80003570:	00878693          	addi	a3,a5,8 # 80009008 <tasks>
80003574:	09c00793          	li	a5,156
80003578:	02f607b3          	mul	a5,a2,a5
8000357c:	00f687b3          	add	a5,a3,a5
80003580:	02e7a223          	sw	a4,36(a5)

	// 关键修改：设置为用户模式
    // MPP = 00 (用户模式), MPIE = 1 (允许中断)
    uint32_t mstatus = r_mstatus();
80003584:	ae1ff0ef          	jal	80003064 <r_mstatus>
80003588:	fea42623          	sw	a0,-20(s0)
    mstatus &= ~MSTATUS_MPP;  // 清除MPP字段 (设置为00 = 用户模式)
8000358c:	fec42703          	lw	a4,-20(s0)
80003590:	ffffe7b7          	lui	a5,0xffffe
80003594:	7ff78793          	addi	a5,a5,2047 # ffffe7ff <_memory_end+0x77ffe7ff>
80003598:	00f777b3          	and	a5,a4,a5
8000359c:	fef42623          	sw	a5,-20(s0)
    mstatus |= MSTATUS_MPIE;  // 设置MPIE位，在mret后会变为MIE
800035a0:	fec42783          	lw	a5,-20(s0)
800035a4:	0807e793          	ori	a5,a5,128
800035a8:	fef42623          	sw	a5,-20(s0)
    tasks[_top].ctx.mstatus = mstatus;
800035ac:	800097b7          	lui	a5,0x80009
800035b0:	6a47a683          	lw	a3,1700(a5) # 800096a4 <_top>
800035b4:	800097b7          	lui	a5,0x80009
800035b8:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
800035bc:	09c00793          	li	a5,156
800035c0:	02f687b3          	mul	a5,a3,a5
800035c4:	00f707b3          	add	a5,a4,a5
800035c8:	fec42703          	lw	a4,-20(s0)
800035cc:	08e7a023          	sw	a4,128(a5)

	// 参考 minios: 从当前 mstatus 读取，并清除 MPP 字段，再设置 MPIE 位
	// tasks[_top].ctx.mstatus = MSTATUS_MPIE; // 明确设置 MPP=0，即用户模式

	tasks[_top].priority = priority;
800035d0:	800097b7          	lui	a5,0x80009
800035d4:	6a47a683          	lw	a3,1700(a5) # 800096a4 <_top>
800035d8:	800097b7          	lui	a5,0x80009
800035dc:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
800035e0:	09c00793          	li	a5,156
800035e4:	02f687b3          	mul	a5,a3,a5
800035e8:	00f707b3          	add	a5,a4,a5
800035ec:	fd744703          	lbu	a4,-41(s0)
800035f0:	08e78623          	sb	a4,140(a5)
	tasks[_top].state = TASK_READY;
800035f4:	800097b7          	lui	a5,0x80009
800035f8:	6a47a683          	lw	a3,1700(a5) # 800096a4 <_top>
800035fc:	800097b7          	lui	a5,0x80009
80003600:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003604:	09c00793          	li	a5,156
80003608:	02f687b3          	mul	a5,a3,a5
8000360c:	00f707b3          	add	a5,a4,a5
80003610:	00100713          	li	a4,1
80003614:	08e7a823          	sw	a4,144(a5)
	tasks[_top].timeslice = timeslice;
80003618:	800097b7          	lui	a5,0x80009
8000361c:	6a47a683          	lw	a3,1700(a5) # 800096a4 <_top>
80003620:	800097b7          	lui	a5,0x80009
80003624:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003628:	09c00793          	li	a5,156
8000362c:	02f687b3          	mul	a5,a3,a5
80003630:	00f707b3          	add	a5,a4,a5
80003634:	fd042703          	lw	a4,-48(s0)
80003638:	08e7aa23          	sw	a4,148(a5)
	tasks[_top].remaining_timeslice = timeslice;
8000363c:	800097b7          	lui	a5,0x80009
80003640:	6a47a683          	lw	a3,1700(a5) # 800096a4 <_top>
80003644:	800097b7          	lui	a5,0x80009
80003648:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
8000364c:	09c00793          	li	a5,156
80003650:	02f687b3          	mul	a5,a3,a5
80003654:	00f707b3          	add	a5,a4,a5
80003658:	fd042703          	lw	a4,-48(s0)
8000365c:	08e7ac23          	sw	a4,152(a5)

	printf("创建任务: %p\n", (void *)tasks[_top].func);
80003660:	800097b7          	lui	a5,0x80009
80003664:	6a47a683          	lw	a3,1700(a5) # 800096a4 <_top>
80003668:	800097b7          	lui	a5,0x80009
8000366c:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003670:	09c00793          	li	a5,156
80003674:	02f687b3          	mul	a5,a3,a5
80003678:	00f707b3          	add	a5,a4,a5
8000367c:	0887a783          	lw	a5,136(a5)
80003680:	00078593          	mv	a1,a5
80003684:	800057b7          	lui	a5,0x80005
80003688:	49c78513          	addi	a0,a5,1180 # 8000549c <BSS_END+0x190>
8000368c:	b6cff0ef          	jal	800029f8 <printf>

	//_top++;

	spin_unlock();
80003690:	1a5010ef          	jal	80005034 <spin_unlock>
	return _top++;
80003694:	800097b7          	lui	a5,0x80009
80003698:	6a47a783          	lw	a5,1700(a5) # 800096a4 <_top>
8000369c:	00178693          	addi	a3,a5,1
800036a0:	80009737          	lui	a4,0x80009
800036a4:	6ad72223          	sw	a3,1700(a4) # 800096a4 <_top>
}
800036a8:	00078513          	mv	a0,a5
800036ac:	02c12083          	lw	ra,44(sp)
800036b0:	02812403          	lw	s0,40(sp)
800036b4:	03010113          	addi	sp,sp,48
800036b8:	00008067          	ret

800036bc <task_yield>:
 * DESCRIPTION
 *  task_yield() causes the calling task to relinquish the CPU and a new
 *  task gets to run.
 */
void task_yield()
{
800036bc:	ff010113          	addi	sp,sp,-16
800036c0:	00112623          	sw	ra,12(sp)
800036c4:	00812423          	sw	s0,8(sp)
800036c8:	01010413          	addi	s0,sp,16
	spin_lock();
800036cc:	12d010ef          	jal	80004ff8 <spin_lock>
	if (current_task_id != -1 && tasks[current_task_id].state == TASK_RUNNING)
800036d0:	800067b7          	lui	a5,0x80006
800036d4:	0007a703          	lw	a4,0(a5) # 80006000 <current_task_id>
800036d8:	fff00793          	li	a5,-1
800036dc:	04f70863          	beq	a4,a5,8000372c <task_yield+0x70>
800036e0:	800067b7          	lui	a5,0x80006
800036e4:	0007a683          	lw	a3,0(a5) # 80006000 <current_task_id>
800036e8:	800097b7          	lui	a5,0x80009
800036ec:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
800036f0:	09c00793          	li	a5,156
800036f4:	02f687b3          	mul	a5,a3,a5
800036f8:	00f707b3          	add	a5,a4,a5
800036fc:	0907a703          	lw	a4,144(a5)
80003700:	00200793          	li	a5,2
80003704:	02f71463          	bne	a4,a5,8000372c <task_yield+0x70>
	{
		tasks[current_task_id].state = TASK_READY;
80003708:	800067b7          	lui	a5,0x80006
8000370c:	0007a683          	lw	a3,0(a5) # 80006000 <current_task_id>
80003710:	800097b7          	lui	a5,0x80009
80003714:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003718:	09c00793          	li	a5,156
8000371c:	02f687b3          	mul	a5,a3,a5
80003720:	00f707b3          	add	a5,a4,a5
80003724:	00100713          	li	a4,1
80003728:	08e7a823          	sw	a4,144(a5)
	}
	spin_unlock();
8000372c:	109010ef          	jal	80005034 <spin_unlock>

	back_to_os();
80003730:	9edff0ef          	jal	8000311c <back_to_os>
}
80003734:	00000013          	nop
80003738:	00c12083          	lw	ra,12(sp)
8000373c:	00812403          	lw	s0,8(sp)
80003740:	01010113          	addi	sp,sp,16
80003744:	00008067          	ret

80003748 <task_exit>:
/*
 * DESCRIPTION
 *  task_exit() causes the calling task to exit and be removed from the scheduler.
 */
void task_exit()
{
80003748:	ff010113          	addi	sp,sp,-16
8000374c:	00112623          	sw	ra,12(sp)
80003750:	00812423          	sw	s0,8(sp)
80003754:	01010413          	addi	s0,sp,16
	//spin_lock();
	if (current_task_id != -1)
80003758:	800067b7          	lui	a5,0x80006
8000375c:	0007a703          	lw	a4,0(a5) # 80006000 <current_task_id>
80003760:	fff00793          	li	a5,-1
80003764:	02f70a63          	beq	a4,a5,80003798 <task_exit+0x50>
	{
		tasks[current_task_id].state = TASK_EXITED;
80003768:	800067b7          	lui	a5,0x80006
8000376c:	0007a683          	lw	a3,0(a5) # 80006000 <current_task_id>
80003770:	800097b7          	lui	a5,0x80009
80003774:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003778:	09c00793          	li	a5,156
8000377c:	02f687b3          	mul	a5,a3,a5
80003780:	00f707b3          	add	a5,a4,a5
80003784:	00400713          	li	a4,4
80003788:	08e7a823          	sw	a4,144(a5)
		uart_puts("任务已退出，并被调度器回收。\n");
8000378c:	800057b7          	lui	a5,0x80005
80003790:	4b078513          	addi	a0,a5,1200 # 800054b0 <BSS_END+0x1a4>
80003794:	c39fe0ef          	jal	800023cc <uart_puts>
	}
	//spin_unlock();
	back_to_os();
80003798:	985ff0ef          	jal	8000311c <back_to_os>
	// 如果所有任务都退出，内核可以进入空闲状态或重新启动
	panic("所有任务已退出，系统终止。");
8000379c:	800057b7          	lui	a5,0x80005
800037a0:	4dc78513          	addi	a0,a5,1244 # 800054dc <BSS_END+0x1d0>
800037a4:	ac8ff0ef          	jal	80002a6c <panic>
}
800037a8:	00000013          	nop
800037ac:	00c12083          	lw	ra,12(sp)
800037b0:	00812403          	lw	s0,8(sp)
800037b4:	01010113          	addi	sp,sp,16
800037b8:	00008067          	ret

800037bc <wake_up_task>:

// 定时器回调函数，用于唤醒被延迟的任务
void wake_up_task(void *arg)
{
800037bc:	fd010113          	addi	sp,sp,-48
800037c0:	02812623          	sw	s0,44(sp)
800037c4:	03010413          	addi	s0,sp,48
800037c8:	fca42e23          	sw	a0,-36(s0)
	int task_id = (int)arg;
800037cc:	fdc42783          	lw	a5,-36(s0)
800037d0:	fef42623          	sw	a5,-20(s0)

	// spin_lock();
	if (task_id >= 0 && task_id < MAX_TASKS && tasks[task_id].state == TASK_SLEEPING)
800037d4:	fec42783          	lw	a5,-20(s0)
800037d8:	0407ca63          	bltz	a5,8000382c <wake_up_task+0x70>
800037dc:	fec42703          	lw	a4,-20(s0)
800037e0:	00900793          	li	a5,9
800037e4:	04e7c463          	blt	a5,a4,8000382c <wake_up_task+0x70>
800037e8:	800097b7          	lui	a5,0x80009
800037ec:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
800037f0:	fec42683          	lw	a3,-20(s0)
800037f4:	09c00793          	li	a5,156
800037f8:	02f687b3          	mul	a5,a3,a5
800037fc:	00f707b3          	add	a5,a4,a5
80003800:	0907a703          	lw	a4,144(a5)
80003804:	00300793          	li	a5,3
80003808:	02f71263          	bne	a4,a5,8000382c <wake_up_task+0x70>
	{
		tasks[task_id].state = TASK_READY;
8000380c:	800097b7          	lui	a5,0x80009
80003810:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003814:	fec42683          	lw	a3,-20(s0)
80003818:	09c00793          	li	a5,156
8000381c:	02f687b3          	mul	a5,a3,a5
80003820:	00f707b3          	add	a5,a4,a5
80003824:	00100713          	li	a4,1
80003828:	08e7a823          	sw	a4,144(a5)
	}
	// spin_unlock();
}
8000382c:	00000013          	nop
80003830:	02c12403          	lw	s0,44(sp)
80003834:	03010113          	addi	sp,sp,48
80003838:	00008067          	ret

8000383c <task_delay>:
 * DESCRIPTION
 *  task_delay() causes the calling task to sleep for a specified number of ticks.
 *  - ticks: 延迟的时钟周期数
 */
void task_delay(uint32_t ticks)
{
8000383c:	fd010113          	addi	sp,sp,-48
80003840:	02112623          	sw	ra,44(sp)
80003844:	02812423          	sw	s0,40(sp)
80003848:	03010413          	addi	s0,sp,48
8000384c:	fca42e23          	sw	a0,-36(s0)
	spin_lock();
80003850:	7a8010ef          	jal	80004ff8 <spin_lock>
	if (current_task_id == -1)
80003854:	800067b7          	lui	a5,0x80006
80003858:	0007a703          	lw	a4,0(a5) # 80006000 <current_task_id>
8000385c:	fff00793          	li	a5,-1
80003860:	00f71663          	bne	a4,a5,8000386c <task_delay+0x30>
	{
		spin_unlock();
80003864:	7d0010ef          	jal	80005034 <spin_unlock>
		return;
80003868:	0800006f          	j	800038e8 <task_delay+0xac>
	}

	int task_id = current_task_id;
8000386c:	800067b7          	lui	a5,0x80006
80003870:	0007a783          	lw	a5,0(a5) # 80006000 <current_task_id>
80003874:	fef42623          	sw	a5,-20(s0)
	tasks[task_id].state = TASK_SLEEPING;
80003878:	800097b7          	lui	a5,0x80009
8000387c:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003880:	fec42683          	lw	a3,-20(s0)
80003884:	09c00793          	li	a5,156
80003888:	02f687b3          	mul	a5,a3,a5
8000388c:	00f707b3          	add	a5,a4,a5
80003890:	00300713          	li	a4,3
80003894:	08e7a823          	sw	a4,144(a5)
	spin_unlock();
80003898:	79c010ef          	jal	80005034 <spin_unlock>

	// 创建定时器，ticks 后调用 wake_up_task 以唤醒任务
	if (timer_create(wake_up_task, (void *)task_id, ticks) == NULL)
8000389c:	fec42783          	lw	a5,-20(s0)
800038a0:	fdc42603          	lw	a2,-36(s0)
800038a4:	00078593          	mv	a1,a5
800038a8:	800037b7          	lui	a5,0x80003
800038ac:	7bc78513          	addi	a0,a5,1980 # 800037bc <wake_up_task>
800038b0:	2fc010ef          	jal	80004bac <timer_create>
800038b4:	00050793          	mv	a5,a0
800038b8:	02079663          	bnez	a5,800038e4 <task_delay+0xa8>
	{
		// 定时器创建失败，恢复任务状态为就绪
		spin_lock();
800038bc:	73c010ef          	jal	80004ff8 <spin_lock>
		tasks[task_id].state = TASK_READY;
800038c0:	800097b7          	lui	a5,0x80009
800038c4:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
800038c8:	fec42683          	lw	a3,-20(s0)
800038cc:	09c00793          	li	a5,156
800038d0:	02f687b3          	mul	a5,a3,a5
800038d4:	00f707b3          	add	a5,a4,a5
800038d8:	00100713          	li	a4,1
800038dc:	08e7a823          	sw	a4,144(a5)
		spin_unlock();
800038e0:	754010ef          	jal	80005034 <spin_unlock>
	}

	// 让出 CPU，触发调度
	task_yield();
800038e4:	dd9ff0ef          	jal	800036bc <task_yield>
}
800038e8:	02c12083          	lw	ra,44(sp)
800038ec:	02812403          	lw	s0,40(sp)
800038f0:	03010113          	addi	sp,sp,48
800038f4:	00008067          	ret

800038f8 <get_task_func_name>:

/* 获取任务函数名称 */
static const char *get_task_func_name(void (*func)(void *))
{
800038f8:	fe010113          	addi	sp,sp,-32
800038fc:	00812e23          	sw	s0,28(sp)
80003900:	02010413          	addi	s0,sp,32
80003904:	fea42623          	sw	a0,-20(s0)
	if (func == user_task0)
80003908:	fec42703          	lw	a4,-20(s0)
8000390c:	800047b7          	lui	a5,0x80004
80003910:	28c78793          	addi	a5,a5,652 # 8000428c <user_task0>
80003914:	00f71863          	bne	a4,a5,80003924 <get_task_func_name+0x2c>
		return "user_task0";
80003918:	800057b7          	lui	a5,0x80005
8000391c:	50478793          	addi	a5,a5,1284 # 80005504 <BSS_END+0x1f8>
80003920:	07c0006f          	j	8000399c <get_task_func_name+0xa4>
	if (func == user_task1)
80003924:	fec42703          	lw	a4,-20(s0)
80003928:	800047b7          	lui	a5,0x80004
8000392c:	2c878793          	addi	a5,a5,712 # 800042c8 <user_task1>
80003930:	00f71863          	bne	a4,a5,80003940 <get_task_func_name+0x48>
		return "user_task1";
80003934:	800057b7          	lui	a5,0x80005
80003938:	51078793          	addi	a5,a5,1296 # 80005510 <BSS_END+0x204>
8000393c:	0600006f          	j	8000399c <get_task_func_name+0xa4>
	if (func == user_task)
80003940:	fec42703          	lw	a4,-20(s0)
80003944:	800047b7          	lui	a5,0x80004
80003948:	30478793          	addi	a5,a5,772 # 80004304 <user_task>
8000394c:	00f71863          	bne	a4,a5,8000395c <get_task_func_name+0x64>
		return "user_task";
80003950:	800057b7          	lui	a5,0x80005
80003954:	51c78793          	addi	a5,a5,1308 # 8000551c <BSS_END+0x210>
80003958:	0440006f          	j	8000399c <get_task_func_name+0xa4>
	if (func == timer_handler)
8000395c:	fec42703          	lw	a4,-20(s0)
80003960:	800057b7          	lui	a5,0x80005
80003964:	d7c78793          	addi	a5,a5,-644 # 80004d7c <timer_handler>
80003968:	00f71863          	bne	a4,a5,80003978 <get_task_func_name+0x80>
		return "timer_handler";
8000396c:	800057b7          	lui	a5,0x80005
80003970:	52878793          	addi	a5,a5,1320 # 80005528 <BSS_END+0x21c>
80003974:	0280006f          	j	8000399c <get_task_func_name+0xa4>
	if (func == task_yield)
80003978:	fec42703          	lw	a4,-20(s0)
8000397c:	800037b7          	lui	a5,0x80003
80003980:	6bc78793          	addi	a5,a5,1724 # 800036bc <task_yield>
80003984:	00f71863          	bne	a4,a5,80003994 <get_task_func_name+0x9c>
		return "task_yield";
80003988:	800057b7          	lui	a5,0x80005
8000398c:	53878793          	addi	a5,a5,1336 # 80005538 <BSS_END+0x22c>
80003990:	00c0006f          	j	8000399c <get_task_func_name+0xa4>
	return "unknown";
80003994:	800057b7          	lui	a5,0x80005
80003998:	54478793          	addi	a5,a5,1348 # 80005544 <BSS_END+0x238>
}
8000399c:	00078513          	mv	a0,a5
800039a0:	01c12403          	lw	s0,28(sp)
800039a4:	02010113          	addi	sp,sp,32
800039a8:	00008067          	ret

800039ac <print_tasks>:

/* 打印任务槽信息的调试函数 */
void print_tasks(void)
{
800039ac:	fe010113          	addi	sp,sp,-32
800039b0:	00112e23          	sw	ra,28(sp)
800039b4:	00812c23          	sw	s0,24(sp)
800039b8:	02010413          	addi	s0,sp,32
	printf("\n=== Tasks Debug Info ===\n");
800039bc:	800057b7          	lui	a5,0x80005
800039c0:	54c78513          	addi	a0,a5,1356 # 8000554c <BSS_END+0x240>
800039c4:	834ff0ef          	jal	800029f8 <printf>

	int active_tasks = 0;
800039c8:	fe042623          	sw	zero,-20(s0)
	for (int i = 0; i < MAX_TASKS; i++)
800039cc:	fe042423          	sw	zero,-24(s0)
800039d0:	1e00006f          	j	80003bb0 <print_tasks+0x204>
	{
		if (tasks[i].state != TASK_INVALID)
800039d4:	800097b7          	lui	a5,0x80009
800039d8:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
800039dc:	fe842683          	lw	a3,-24(s0)
800039e0:	09c00793          	li	a5,156
800039e4:	02f687b3          	mul	a5,a3,a5
800039e8:	00f707b3          	add	a5,a4,a5
800039ec:	0907a783          	lw	a5,144(a5)
800039f0:	1a078a63          	beqz	a5,80003ba4 <print_tasks+0x1f8>
		{
			printf("Task[%d]:\n", i);
800039f4:	fe842583          	lw	a1,-24(s0)
800039f8:	800057b7          	lui	a5,0x80005
800039fc:	56878513          	addi	a0,a5,1384 # 80005568 <BSS_END+0x25c>
80003a00:	ff9fe0ef          	jal	800029f8 <printf>
			printf("  Function: %s\n", get_task_func_name(tasks[i].func));
80003a04:	800097b7          	lui	a5,0x80009
80003a08:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003a0c:	fe842683          	lw	a3,-24(s0)
80003a10:	09c00793          	li	a5,156
80003a14:	02f687b3          	mul	a5,a3,a5
80003a18:	00f707b3          	add	a5,a4,a5
80003a1c:	0887a783          	lw	a5,136(a5)
80003a20:	00078513          	mv	a0,a5
80003a24:	ed5ff0ef          	jal	800038f8 <get_task_func_name>
80003a28:	00050793          	mv	a5,a0
80003a2c:	00078593          	mv	a1,a5
80003a30:	800057b7          	lui	a5,0x80005
80003a34:	57478513          	addi	a0,a5,1396 # 80005574 <BSS_END+0x268>
80003a38:	fc1fe0ef          	jal	800029f8 <printf>
			if (tasks[i].func == user_task)
80003a3c:	800097b7          	lui	a5,0x80009
80003a40:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003a44:	fe842683          	lw	a3,-24(s0)
80003a48:	09c00793          	li	a5,156
80003a4c:	02f687b3          	mul	a5,a3,a5
80003a50:	00f707b3          	add	a5,a4,a5
80003a54:	0887a703          	lw	a4,136(a5)
80003a58:	800047b7          	lui	a5,0x80004
80003a5c:	30478793          	addi	a5,a5,772 # 80004304 <user_task>
80003a60:	02f71a63          	bne	a4,a5,80003a94 <print_tasks+0xe8>
			{
				int task_id = (int)(tasks[i].param);
80003a64:	800097b7          	lui	a5,0x80009
80003a68:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003a6c:	fe842683          	lw	a3,-24(s0)
80003a70:	09c00793          	li	a5,156
80003a74:	02f687b3          	mul	a5,a3,a5
80003a78:	00f707b3          	add	a5,a4,a5
80003a7c:	0847a783          	lw	a5,132(a5)
80003a80:	fef42023          	sw	a5,-32(s0)
				printf("  Task ID: %d\n", task_id);
80003a84:	fe042583          	lw	a1,-32(s0)
80003a88:	800057b7          	lui	a5,0x80005
80003a8c:	58478513          	addi	a0,a5,1412 # 80005584 <BSS_END+0x278>
80003a90:	f69fe0ef          	jal	800029f8 <printf>
			}
			printf("  Priority: %d\n", tasks[i].priority);
80003a94:	800097b7          	lui	a5,0x80009
80003a98:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003a9c:	fe842683          	lw	a3,-24(s0)
80003aa0:	09c00793          	li	a5,156
80003aa4:	02f687b3          	mul	a5,a3,a5
80003aa8:	00f707b3          	add	a5,a4,a5
80003aac:	08c7c783          	lbu	a5,140(a5)
80003ab0:	00078593          	mv	a1,a5
80003ab4:	800057b7          	lui	a5,0x80005
80003ab8:	59478513          	addi	a0,a5,1428 # 80005594 <BSS_END+0x288>
80003abc:	f3dfe0ef          	jal	800029f8 <printf>

			const char *state_str;
			switch (tasks[i].state)
80003ac0:	800097b7          	lui	a5,0x80009
80003ac4:	00878713          	addi	a4,a5,8 # 80009008 <tasks>
80003ac8:	fe842683          	lw	a3,-24(s0)
80003acc:	09c00793          	li	a5,156
80003ad0:	02f687b3          	mul	a5,a3,a5
80003ad4:	00f707b3          	add	a5,a4,a5
80003ad8:	0907a783          	lw	a5,144(a5)
80003adc:	00400713          	li	a4,4
80003ae0:	06e78063          	beq	a5,a4,80003b40 <print_tasks+0x194>
80003ae4:	00400713          	li	a4,4
80003ae8:	06f76463          	bltu	a4,a5,80003b50 <print_tasks+0x1a4>
80003aec:	00300713          	li	a4,3
80003af0:	04e78063          	beq	a5,a4,80003b30 <print_tasks+0x184>
80003af4:	00300713          	li	a4,3
80003af8:	04f76c63          	bltu	a4,a5,80003b50 <print_tasks+0x1a4>
80003afc:	00100713          	li	a4,1
80003b00:	00e78863          	beq	a5,a4,80003b10 <print_tasks+0x164>
80003b04:	00200713          	li	a4,2
80003b08:	00e78c63          	beq	a5,a4,80003b20 <print_tasks+0x174>
80003b0c:	0440006f          	j	80003b50 <print_tasks+0x1a4>
			{
			case TASK_READY:
				state_str = "READY";
80003b10:	800057b7          	lui	a5,0x80005
80003b14:	5a478793          	addi	a5,a5,1444 # 800055a4 <BSS_END+0x298>
80003b18:	fef42223          	sw	a5,-28(s0)
				break;
80003b1c:	0440006f          	j	80003b60 <print_tasks+0x1b4>
			case TASK_RUNNING:
				state_str = "RUNNING";
80003b20:	800057b7          	lui	a5,0x80005
80003b24:	5ac78793          	addi	a5,a5,1452 # 800055ac <BSS_END+0x2a0>
80003b28:	fef42223          	sw	a5,-28(s0)
				break;
80003b2c:	0340006f          	j	80003b60 <print_tasks+0x1b4>
			case TASK_SLEEPING:
				state_str = "SLEEPING";
80003b30:	800057b7          	lui	a5,0x80005
80003b34:	5b478793          	addi	a5,a5,1460 # 800055b4 <BSS_END+0x2a8>
80003b38:	fef42223          	sw	a5,-28(s0)
				break;
80003b3c:	0240006f          	j	80003b60 <print_tasks+0x1b4>
			case TASK_EXITED:
				state_str = "EXITED";
80003b40:	800057b7          	lui	a5,0x80005
80003b44:	5c078793          	addi	a5,a5,1472 # 800055c0 <BSS_END+0x2b4>
80003b48:	fef42223          	sw	a5,-28(s0)
				break;
80003b4c:	0140006f          	j	80003b60 <print_tasks+0x1b4>
			default:
				state_str = "UNKNOWN";
80003b50:	800057b7          	lui	a5,0x80005
80003b54:	5c878793          	addi	a5,a5,1480 # 800055c8 <BSS_END+0x2bc>
80003b58:	fef42223          	sw	a5,-28(s0)
				break;
80003b5c:	00000013          	nop
			}
			printf("  State: %s\n", state_str);
80003b60:	fe442583          	lw	a1,-28(s0)
80003b64:	800057b7          	lui	a5,0x80005
80003b68:	5d078513          	addi	a0,a5,1488 # 800055d0 <BSS_END+0x2c4>
80003b6c:	e8dfe0ef          	jal	800029f8 <printf>
			if (i == current_task_id)
80003b70:	800067b7          	lui	a5,0x80006
80003b74:	0007a783          	lw	a5,0(a5) # 80006000 <current_task_id>
80003b78:	fe842703          	lw	a4,-24(s0)
80003b7c:	00f71863          	bne	a4,a5,80003b8c <print_tasks+0x1e0>
			{
				printf("  [CURRENT]\n");
80003b80:	800057b7          	lui	a5,0x80005
80003b84:	5e078513          	addi	a0,a5,1504 # 800055e0 <BSS_END+0x2d4>
80003b88:	e71fe0ef          	jal	800029f8 <printf>
			}
			printf("------------------\n");
80003b8c:	800057b7          	lui	a5,0x80005
80003b90:	5f078513          	addi	a0,a5,1520 # 800055f0 <BSS_END+0x2e4>
80003b94:	e65fe0ef          	jal	800029f8 <printf>
			active_tasks++;
80003b98:	fec42783          	lw	a5,-20(s0)
80003b9c:	00178793          	addi	a5,a5,1
80003ba0:	fef42623          	sw	a5,-20(s0)
	for (int i = 0; i < MAX_TASKS; i++)
80003ba4:	fe842783          	lw	a5,-24(s0)
80003ba8:	00178793          	addi	a5,a5,1
80003bac:	fef42423          	sw	a5,-24(s0)
80003bb0:	fe842703          	lw	a4,-24(s0)
80003bb4:	00900793          	li	a5,9
80003bb8:	e0e7dee3          	bge	a5,a4,800039d4 <print_tasks+0x28>
		}
	}
	printf("Active tasks: %d, Current: %d\n", active_tasks, current_task_id);
80003bbc:	800067b7          	lui	a5,0x80006
80003bc0:	0007a783          	lw	a5,0(a5) # 80006000 <current_task_id>
80003bc4:	00078613          	mv	a2,a5
80003bc8:	fec42583          	lw	a1,-20(s0)
80003bcc:	800057b7          	lui	a5,0x80005
80003bd0:	60478513          	addi	a0,a5,1540 # 80005604 <BSS_END+0x2f8>
80003bd4:	e25fe0ef          	jal	800029f8 <printf>
	printf("=== End of Tasks Info ===\n\n");
80003bd8:	800057b7          	lui	a5,0x80005
80003bdc:	62478513          	addi	a0,a5,1572 # 80005624 <BSS_END+0x318>
80003be0:	e19fe0ef          	jal	800029f8 <printf>
80003be4:	00000013          	nop
80003be8:	01c12083          	lw	ra,28(sp)
80003bec:	01812403          	lw	s0,24(sp)
80003bf0:	02010113          	addi	sp,sp,32
80003bf4:	00008067          	ret

80003bf8 <memset>:

static char memory_pool[MEMORY_POOL_SIZE];
static mem_block *free_list = (void *)memory_pool;

void *memset(void *ptr, int value, size_t num)
{
80003bf8:	fd010113          	addi	sp,sp,-48
80003bfc:	02812623          	sw	s0,44(sp)
80003c00:	03010413          	addi	s0,sp,48
80003c04:	fca42e23          	sw	a0,-36(s0)
80003c08:	fcb42c23          	sw	a1,-40(s0)
80003c0c:	fcc42a23          	sw	a2,-44(s0)
    unsigned char *p = ptr;
80003c10:	fdc42783          	lw	a5,-36(s0)
80003c14:	fef42623          	sw	a5,-20(s0)
    while (num--)
80003c18:	01c0006f          	j	80003c34 <memset+0x3c>
    {
        *p++ = (unsigned char)value;
80003c1c:	fec42783          	lw	a5,-20(s0)
80003c20:	00178713          	addi	a4,a5,1
80003c24:	fee42623          	sw	a4,-20(s0)
80003c28:	fd842703          	lw	a4,-40(s0)
80003c2c:	0ff77713          	zext.b	a4,a4
80003c30:	00e78023          	sb	a4,0(a5)
    while (num--)
80003c34:	fd442783          	lw	a5,-44(s0)
80003c38:	fff78713          	addi	a4,a5,-1
80003c3c:	fce42a23          	sw	a4,-44(s0)
80003c40:	fc079ee3          	bnez	a5,80003c1c <memset+0x24>
    }
    return ptr;
80003c44:	fdc42783          	lw	a5,-36(s0)
}
80003c48:	00078513          	mv	a0,a5
80003c4c:	02c12403          	lw	s0,44(sp)
80003c50:	03010113          	addi	sp,sp,48
80003c54:	00008067          	ret

80003c58 <memory_init>:

void memory_init(void)
{
80003c58:	ff010113          	addi	sp,sp,-16
80003c5c:	00812623          	sw	s0,12(sp)
80003c60:	01010413          	addi	s0,sp,16
    free_list->size = MEMORY_POOL_SIZE - sizeof(mem_block);
80003c64:	800067b7          	lui	a5,0x80006
80003c68:	0047a783          	lw	a5,4(a5) # 80006004 <free_list>
80003c6c:	00100737          	lui	a4,0x100
80003c70:	ff470713          	addi	a4,a4,-12 # ffff4 <STACK_SIZE+0xffbf4>
80003c74:	00e7a023          	sw	a4,0(a5)
    free_list->next = NULL;
80003c78:	800067b7          	lui	a5,0x80006
80003c7c:	0047a783          	lw	a5,4(a5) # 80006004 <free_list>
80003c80:	0007a223          	sw	zero,4(a5)
    free_list->free = 1;
80003c84:	800067b7          	lui	a5,0x80006
80003c88:	0047a783          	lw	a5,4(a5) # 80006004 <free_list>
80003c8c:	00100713          	li	a4,1
80003c90:	00e7a423          	sw	a4,8(a5)
}
80003c94:	00000013          	nop
80003c98:	00c12403          	lw	s0,12(sp)
80003c9c:	01010113          	addi	sp,sp,16
80003ca0:	00008067          	ret

80003ca4 <malloc>:

void *malloc(size_t size)
{
80003ca4:	fc010113          	addi	sp,sp,-64
80003ca8:	02112e23          	sw	ra,60(sp)
80003cac:	02812c23          	sw	s0,56(sp)
80003cb0:	04010413          	addi	s0,sp,64
80003cb4:	fca42623          	sw	a0,-52(s0)
    size_t best_fit_size = MEMORY_POOL_SIZE;
80003cb8:	001007b7          	lui	a5,0x100
80003cbc:	fef42623          	sw	a5,-20(s0)
    mem_block *best_fit_block = NULL;
80003cc0:	fe042423          	sw	zero,-24(s0)
    mem_block *current = free_list;
80003cc4:	800067b7          	lui	a5,0x80006
80003cc8:	0047a783          	lw	a5,4(a5) # 80006004 <free_list>
80003ccc:	fef42223          	sw	a5,-28(s0)

    size = ALIGN(size + sizeof(mem_block)); // 包括管理结构的大小
80003cd0:	fcc42783          	lw	a5,-52(s0)
80003cd4:	01b78793          	addi	a5,a5,27
80003cd8:	ff07f793          	andi	a5,a5,-16
80003cdc:	fcf42623          	sw	a5,-52(s0)

    //printf("请求分配 %d 字节的内存\n", size);

    while (current)
80003ce0:	05c0006f          	j	80003d3c <malloc+0x98>
    {
        //printf("检查块：地址=%p，大小=%d\n", (void *)current, current->size);
        if (current->free && current->size >= size)
80003ce4:	fe442783          	lw	a5,-28(s0)
80003ce8:	0087a783          	lw	a5,8(a5)
80003cec:	04078263          	beqz	a5,80003d30 <malloc+0x8c>
80003cf0:	fe442783          	lw	a5,-28(s0)
80003cf4:	0007a783          	lw	a5,0(a5)
80003cf8:	fcc42703          	lw	a4,-52(s0)
80003cfc:	02e7ea63          	bltu	a5,a4,80003d30 <malloc+0x8c>
        {
            size_t current_block_free_space = current->size - size;
80003d00:	fe442783          	lw	a5,-28(s0)
80003d04:	0007a703          	lw	a4,0(a5)
80003d08:	fcc42783          	lw	a5,-52(s0)
80003d0c:	40f707b3          	sub	a5,a4,a5
80003d10:	fcf42c23          	sw	a5,-40(s0)
            if (current_block_free_space < best_fit_size)
80003d14:	fd842703          	lw	a4,-40(s0)
80003d18:	fec42783          	lw	a5,-20(s0)
80003d1c:	00f77a63          	bgeu	a4,a5,80003d30 <malloc+0x8c>
            {
                best_fit_size = current_block_free_space;
80003d20:	fd842783          	lw	a5,-40(s0)
80003d24:	fef42623          	sw	a5,-20(s0)
                best_fit_block = current;
80003d28:	fe442783          	lw	a5,-28(s0)
80003d2c:	fef42423          	sw	a5,-24(s0)
            }
        }
        current = current->next;
80003d30:	fe442783          	lw	a5,-28(s0)
80003d34:	0047a783          	lw	a5,4(a5)
80003d38:	fef42223          	sw	a5,-28(s0)
    while (current)
80003d3c:	fe442783          	lw	a5,-28(s0)
80003d40:	fa0792e3          	bnez	a5,80003ce4 <malloc+0x40>
        //printf("移动到下一个块：地址=%p\n", (void *)current);
    }

    if (!best_fit_block)
80003d44:	fe842783          	lw	a5,-24(s0)
80003d48:	00079e63          	bnez	a5,80003d64 <malloc+0xc0>
    {
        printf("错误：没有足够的空间分配 %d 字节的内存\n", size);
80003d4c:	fcc42583          	lw	a1,-52(s0)
80003d50:	800057b7          	lui	a5,0x80005
80003d54:	64078513          	addi	a0,a5,1600 # 80005640 <BSS_END+0x334>
80003d58:	ca1fe0ef          	jal	800029f8 <printf>
        return NULL; // 没有足够的空间
80003d5c:	00000793          	li	a5,0
80003d60:	0b80006f          	j	80003e18 <malloc+0x174>
    }

    if (best_fit_size <= sizeof(mem_block))
80003d64:	fec42703          	lw	a4,-20(s0)
80003d68:	00c00793          	li	a5,12
80003d6c:	00e7ec63          	bltu	a5,a4,80003d84 <malloc+0xe0>
    {
        // 如果剩余空间不足以创建一个新的mem_block，则不分割，直接分配整个块
        best_fit_block->free = 0;
80003d70:	fe842783          	lw	a5,-24(s0)
80003d74:	0007a423          	sw	zero,8(a5)
        best_fit_block->next = NULL;
80003d78:	fe842783          	lw	a5,-24(s0)
80003d7c:	0007a223          	sw	zero,4(a5)
80003d80:	06c0006f          	j	80003dec <malloc+0x148>
    }
    else
    {
        // 分割内存块
        mem_block *new_block = (mem_block *)((char *)best_fit_block + size);
80003d84:	fe842703          	lw	a4,-24(s0)
80003d88:	fcc42783          	lw	a5,-52(s0)
80003d8c:	00f707b3          	add	a5,a4,a5
80003d90:	fef42023          	sw	a5,-32(s0)
        new_block->size = best_fit_block->size - size;
80003d94:	fe842783          	lw	a5,-24(s0)
80003d98:	0007a703          	lw	a4,0(a5)
80003d9c:	fcc42783          	lw	a5,-52(s0)
80003da0:	40f70733          	sub	a4,a4,a5
80003da4:	fe042783          	lw	a5,-32(s0)
80003da8:	00e7a023          	sw	a4,0(a5)
        new_block->next = best_fit_block->next;
80003dac:	fe842783          	lw	a5,-24(s0)
80003db0:	0047a703          	lw	a4,4(a5)
80003db4:	fe042783          	lw	a5,-32(s0)
80003db8:	00e7a223          	sw	a4,4(a5)
        new_block->free = 1;
80003dbc:	fe042783          	lw	a5,-32(s0)
80003dc0:	00100713          	li	a4,1
80003dc4:	00e7a423          	sw	a4,8(a5)

        best_fit_block->size = size - sizeof(mem_block); // 更新当前块的大小，减去管理结构的大小
80003dc8:	fcc42783          	lw	a5,-52(s0)
80003dcc:	ff478713          	addi	a4,a5,-12
80003dd0:	fe842783          	lw	a5,-24(s0)
80003dd4:	00e7a023          	sw	a4,0(a5)
        best_fit_block->free = 0;
80003dd8:	fe842783          	lw	a5,-24(s0)
80003ddc:	0007a423          	sw	zero,8(a5)
        best_fit_block->next = new_block;
80003de0:	fe842783          	lw	a5,-24(s0)
80003de4:	fe042703          	lw	a4,-32(s0)
80003de8:	00e7a223          	sw	a4,4(a5)
    }

    // 初始化分配的内存块（不包括管理结构）
    void *allocated_memory = (void *)(best_fit_block + 1);
80003dec:	fe842783          	lw	a5,-24(s0)
80003df0:	00c78793          	addi	a5,a5,12
80003df4:	fcf42e23          	sw	a5,-36(s0)
    memset(allocated_memory, 0, best_fit_block->size - sizeof(mem_block));
80003df8:	fe842783          	lw	a5,-24(s0)
80003dfc:	0007a783          	lw	a5,0(a5)
80003e00:	ff478793          	addi	a5,a5,-12
80003e04:	00078613          	mv	a2,a5
80003e08:	00000593          	li	a1,0
80003e0c:	fdc42503          	lw	a0,-36(s0)
80003e10:	de9ff0ef          	jal	80003bf8 <memset>

    //printf("分配了 %d 字节的内存\n", size);
    //printf("分配后块：地址=%p，大小=%d\n", (void *)best_fit_block, best_fit_block->size);
    //printf("新块：地址=%p，大小=%d\n\n", (void *)best_fit_block->next, best_fit_block->next ? best_fit_block->next->size : 0);
    return allocated_memory;
80003e14:	fdc42783          	lw	a5,-36(s0)
}
80003e18:	00078513          	mv	a0,a5
80003e1c:	03c12083          	lw	ra,60(sp)
80003e20:	03812403          	lw	s0,56(sp)
80003e24:	04010113          	addi	sp,sp,64
80003e28:	00008067          	ret

80003e2c <free>:

void free(void *ptr)
{
80003e2c:	fd010113          	addi	sp,sp,-48
80003e30:	02112623          	sw	ra,44(sp)
80003e34:	02812423          	sw	s0,40(sp)
80003e38:	03010413          	addi	s0,sp,48
80003e3c:	fca42e23          	sw	a0,-36(s0)
    if (!ptr)
80003e40:	fdc42783          	lw	a5,-36(s0)
80003e44:	00079a63          	bnez	a5,80003e58 <free+0x2c>
    {
        printf("警告：尝试释放NULL指针\n");
80003e48:	800057b7          	lui	a5,0x80005
80003e4c:	67c78513          	addi	a0,a5,1660 # 8000567c <BSS_END+0x370>
80003e50:	ba9fe0ef          	jal	800029f8 <printf>
        return;
80003e54:	1040006f          	j	80003f58 <free+0x12c>
    }
    mem_block *block_to_free = (mem_block *)((char *)ptr - sizeof(mem_block));
80003e58:	fdc42783          	lw	a5,-36(s0)
80003e5c:	ff478793          	addi	a5,a5,-12
80003e60:	fef42223          	sw	a5,-28(s0)
    block_to_free->free = 1;
80003e64:	fe442783          	lw	a5,-28(s0)
80003e68:	00100713          	li	a4,1
80003e6c:	00e7a423          	sw	a4,8(a5)

    //printf("释放块：地址=%p，大小=%d\n\n", (void *)block_to_free, block_to_free->size);

    // 合并空闲块
    mem_block *current = free_list;
80003e70:	800067b7          	lui	a5,0x80006
80003e74:	0047a783          	lw	a5,4(a5) # 80006004 <free_list>
80003e78:	fef42623          	sw	a5,-20(s0)
    mem_block *prev = NULL;
80003e7c:	fe042423          	sw	zero,-24(s0)
    while (current)
80003e80:	0c80006f          	j	80003f48 <free+0x11c>
    {
        if (current == block_to_free)
80003e84:	fec42703          	lw	a4,-20(s0)
80003e88:	fe442783          	lw	a5,-28(s0)
80003e8c:	0af71463          	bne	a4,a5,80003f34 <free+0x108>
        {
            // 如果前一个块是空闲的，则合并
            if (prev && prev->free)
80003e90:	fe842783          	lw	a5,-24(s0)
80003e94:	04078463          	beqz	a5,80003edc <free+0xb0>
80003e98:	fe842783          	lw	a5,-24(s0)
80003e9c:	0087a783          	lw	a5,8(a5)
80003ea0:	02078e63          	beqz	a5,80003edc <free+0xb0>
            {
                prev->size += current->size + sizeof(mem_block);
80003ea4:	fe842783          	lw	a5,-24(s0)
80003ea8:	0007a703          	lw	a4,0(a5)
80003eac:	fec42783          	lw	a5,-20(s0)
80003eb0:	0007a783          	lw	a5,0(a5)
80003eb4:	00f707b3          	add	a5,a4,a5
80003eb8:	00c78713          	addi	a4,a5,12
80003ebc:	fe842783          	lw	a5,-24(s0)
80003ec0:	00e7a023          	sw	a4,0(a5)
                prev->next = current->next;
80003ec4:	fec42783          	lw	a5,-20(s0)
80003ec8:	0047a703          	lw	a4,4(a5)
80003ecc:	fe842783          	lw	a5,-24(s0)
80003ed0:	00e7a223          	sw	a4,4(a5)
                current = prev; // 更新当前指针以指向合并后的块
80003ed4:	fe842783          	lw	a5,-24(s0)
80003ed8:	fef42623          	sw	a5,-20(s0)
            }
            // 检查并合并下一个空闲块
            if (current->next && current->next->free)
80003edc:	fec42783          	lw	a5,-20(s0)
80003ee0:	0047a783          	lw	a5,4(a5)
80003ee4:	06078863          	beqz	a5,80003f54 <free+0x128>
80003ee8:	fec42783          	lw	a5,-20(s0)
80003eec:	0047a783          	lw	a5,4(a5)
80003ef0:	0087a783          	lw	a5,8(a5)
80003ef4:	06078063          	beqz	a5,80003f54 <free+0x128>
            {
                current->size += current->next->size + sizeof(mem_block);
80003ef8:	fec42783          	lw	a5,-20(s0)
80003efc:	0007a703          	lw	a4,0(a5)
80003f00:	fec42783          	lw	a5,-20(s0)
80003f04:	0047a783          	lw	a5,4(a5)
80003f08:	0007a783          	lw	a5,0(a5)
80003f0c:	00f707b3          	add	a5,a4,a5
80003f10:	00c78713          	addi	a4,a5,12
80003f14:	fec42783          	lw	a5,-20(s0)
80003f18:	00e7a023          	sw	a4,0(a5)
                current->next = current->next->next;
80003f1c:	fec42783          	lw	a5,-20(s0)
80003f20:	0047a783          	lw	a5,4(a5)
80003f24:	0047a703          	lw	a4,4(a5)
80003f28:	fec42783          	lw	a5,-20(s0)
80003f2c:	00e7a223          	sw	a4,4(a5)
            }
            break;
80003f30:	0240006f          	j	80003f54 <free+0x128>
        }
        prev = current;
80003f34:	fec42783          	lw	a5,-20(s0)
80003f38:	fef42423          	sw	a5,-24(s0)
        current = current->next;
80003f3c:	fec42783          	lw	a5,-20(s0)
80003f40:	0047a783          	lw	a5,4(a5)
80003f44:	fef42623          	sw	a5,-20(s0)
    while (current)
80003f48:	fec42783          	lw	a5,-20(s0)
80003f4c:	f2079ce3          	bnez	a5,80003e84 <free+0x58>
80003f50:	0080006f          	j	80003f58 <free+0x12c>
            break;
80003f54:	00000013          	nop
    }
}
80003f58:	02c12083          	lw	ra,44(sp)
80003f5c:	02812403          	lw	s0,40(sp)
80003f60:	03010113          	addi	sp,sp,48
80003f64:	00008067          	ret

80003f68 <print_blocks>:

void print_blocks(void)
{
80003f68:	fe010113          	addi	sp,sp,-32
80003f6c:	00112e23          	sw	ra,28(sp)
80003f70:	00812c23          	sw	s0,24(sp)
80003f74:	02010413          	addi	s0,sp,32
    void *block_ptr = memory_pool;
80003f78:	800097b7          	lui	a5,0x80009
80003f7c:	6a878793          	addi	a5,a5,1704 # 800096a8 <memory_pool>
80003f80:	fef42623          	sw	a5,-20(s0)
    printf("-- start to print blocks --\n");
80003f84:	800057b7          	lui	a5,0x80005
80003f88:	6a078513          	addi	a0,a5,1696 # 800056a0 <BSS_END+0x394>
80003f8c:	a6dfe0ef          	jal	800029f8 <printf>
    do
    {
        printf("\tblock: %p, size: %d, used: %d\n", block_ptr,
80003f90:	fec42783          	lw	a5,-20(s0)
80003f94:	0007a703          	lw	a4,0(a5)
               block_get_size(block_ptr), block_is_used(block_ptr));
80003f98:	fec42783          	lw	a5,-20(s0)
80003f9c:	0087a783          	lw	a5,8(a5)
        printf("\tblock: %p, size: %d, used: %d\n", block_ptr,
80003fa0:	0017b793          	seqz	a5,a5
80003fa4:	0ff7f793          	zext.b	a5,a5
80003fa8:	00078693          	mv	a3,a5
80003fac:	00070613          	mv	a2,a4
80003fb0:	fec42583          	lw	a1,-20(s0)
80003fb4:	800057b7          	lui	a5,0x80005
80003fb8:	6c078513          	addi	a0,a5,1728 # 800056c0 <BSS_END+0x3b4>
80003fbc:	a3dfe0ef          	jal	800029f8 <printf>
        block_ptr = block_get_next(block_ptr);
80003fc0:	fec42783          	lw	a5,-20(s0)
80003fc4:	0047a783          	lw	a5,4(a5)
80003fc8:	fef42623          	sw	a5,-20(s0)
    } while (block_ptr);
80003fcc:	fec42783          	lw	a5,-20(s0)
80003fd0:	fc0790e3          	bnez	a5,80003f90 <print_blocks+0x28>
    printf("-- end to print blocks --\n");
80003fd4:	800057b7          	lui	a5,0x80005
80003fd8:	6e078513          	addi	a0,a5,1760 # 800056e0 <BSS_END+0x3d4>
80003fdc:	a1dfe0ef          	jal	800029f8 <printf>
}
80003fe0:	00000013          	nop
80003fe4:	01c12083          	lw	ra,28(sp)
80003fe8:	01812403          	lw	s0,24(sp)
80003fec:	02010113          	addi	sp,sp,32
80003ff0:	00008067          	ret

80003ff4 <print_block>:

void print_block(void *block_ptr)
{
80003ff4:	fd010113          	addi	sp,sp,-48
80003ff8:	02112623          	sw	ra,44(sp)
80003ffc:	02812423          	sw	s0,40(sp)
80004000:	03010413          	addi	s0,sp,48
80004004:	fca42e23          	sw	a0,-36(s0)
    mem_block *block_info = (mem_block *)(block_ptr - sizeof(mem_block));
80004008:	fdc42783          	lw	a5,-36(s0)
8000400c:	ff478793          	addi	a5,a5,-12
80004010:	fef42223          	sw	a5,-28(s0)
    void *block_end = block_ptr + block_info->size;
80004014:	fe442783          	lw	a5,-28(s0)
80004018:	0007a783          	lw	a5,0(a5)
8000401c:	fdc42703          	lw	a4,-36(s0)
80004020:	00f707b3          	add	a5,a4,a5
80004024:	fef42023          	sw	a5,-32(s0)
    int byte_count = 1;
80004028:	00100793          	li	a5,1
8000402c:	fef42623          	sw	a5,-20(s0)
    int *int_block_ptr = (int *)block_ptr;
80004030:	fdc42783          	lw	a5,-36(s0)
80004034:	fef42423          	sw	a5,-24(s0)
    for (; int_block_ptr < block_end; int_block_ptr++, byte_count++)
80004038:	0640006f          	j	8000409c <print_block+0xa8>
    {
        printf("%d", (*int_block_ptr));
8000403c:	fe842783          	lw	a5,-24(s0)
80004040:	0007a783          	lw	a5,0(a5)
80004044:	00078593          	mv	a1,a5
80004048:	800057b7          	lui	a5,0x80005
8000404c:	6fc78513          	addi	a0,a5,1788 # 800056fc <BSS_END+0x3f0>
80004050:	9a9fe0ef          	jal	800029f8 <printf>
        if (byte_count % 4 == 0)
80004054:	fec42783          	lw	a5,-20(s0)
80004058:	0037f793          	andi	a5,a5,3
8000405c:	00079863          	bnez	a5,8000406c <print_block+0x78>
            printf(" ");
80004060:	800057b7          	lui	a5,0x80005
80004064:	70078513          	addi	a0,a5,1792 # 80005700 <BSS_END+0x3f4>
80004068:	991fe0ef          	jal	800029f8 <printf>
        if (byte_count % 32 == 0)
8000406c:	fec42783          	lw	a5,-20(s0)
80004070:	01f7f793          	andi	a5,a5,31
80004074:	00079863          	bnez	a5,80004084 <print_block+0x90>
            printf("\n");
80004078:	800057b7          	lui	a5,0x80005
8000407c:	70478513          	addi	a0,a5,1796 # 80005704 <BSS_END+0x3f8>
80004080:	979fe0ef          	jal	800029f8 <printf>
    for (; int_block_ptr < block_end; int_block_ptr++, byte_count++)
80004084:	fe842783          	lw	a5,-24(s0)
80004088:	00478793          	addi	a5,a5,4
8000408c:	fef42423          	sw	a5,-24(s0)
80004090:	fec42783          	lw	a5,-20(s0)
80004094:	00178793          	addi	a5,a5,1
80004098:	fef42623          	sw	a5,-20(s0)
8000409c:	fe842703          	lw	a4,-24(s0)
800040a0:	fe042783          	lw	a5,-32(s0)
800040a4:	f8f76ce3          	bltu	a4,a5,8000403c <print_block+0x48>
    }
    printf("\n\n");
800040a8:	800057b7          	lui	a5,0x80005
800040ac:	70878513          	addi	a0,a5,1800 # 80005708 <BSS_END+0x3fc>
800040b0:	949fe0ef          	jal	800029f8 <printf>
800040b4:	00000013          	nop
800040b8:	02c12083          	lw	ra,44(sp)
800040bc:	02812403          	lw	s0,40(sp)
800040c0:	03010113          	addi	sp,sp,48
800040c4:	00008067          	ret

800040c8 <r_mhartid>:
		*ptr_hid = r_mhartid();
		return 0;
	}
}

void do_syscall(struct context *ctx)
800040c8:	fe010113          	addi	sp,sp,-32
800040cc:	00812e23          	sw	s0,28(sp)
800040d0:	02010413          	addi	s0,sp,32
{
	uint32_t syscall_num = ctx->a7;
800040d4:	f14027f3          	csrr	a5,mhartid
800040d8:	fef42623          	sw	a5,-20(s0)
	//printf("syscall_num: %d\n", syscall_num);
800040dc:	fec42783          	lw	a5,-20(s0)
	switch (syscall_num)
800040e0:	00078513          	mv	a0,a5
800040e4:	01c12403          	lw	s0,28(sp)
800040e8:	02010113          	addi	sp,sp,32
800040ec:	00008067          	ret

800040f0 <sys_gethid>:
{
800040f0:	fe010113          	addi	sp,sp,-32
800040f4:	00112e23          	sw	ra,28(sp)
800040f8:	00812c23          	sw	s0,24(sp)
800040fc:	02010413          	addi	s0,sp,32
80004100:	fea42623          	sw	a0,-20(s0)
	if (ptr_hid == NULL)
80004104:	fec42783          	lw	a5,-20(s0)
80004108:	00079c63          	bnez	a5,80004120 <sys_gethid+0x30>
		printf("ptr_hid == NULL\n");
8000410c:	800057b7          	lui	a5,0x80005
80004110:	70c78513          	addi	a0,a5,1804 # 8000570c <BSS_END+0x400>
80004114:	8e5fe0ef          	jal	800029f8 <printf>
		return -1;
80004118:	fff00793          	li	a5,-1
8000411c:	0180006f          	j	80004134 <sys_gethid+0x44>
		*ptr_hid = r_mhartid();
80004120:	fa9ff0ef          	jal	800040c8 <r_mhartid>
80004124:	00050713          	mv	a4,a0
80004128:	fec42783          	lw	a5,-20(s0)
8000412c:	00e7a023          	sw	a4,0(a5)
		return 0;
80004130:	00000793          	li	a5,0
}
80004134:	00078513          	mv	a0,a5
80004138:	01c12083          	lw	ra,28(sp)
8000413c:	01812403          	lw	s0,24(sp)
80004140:	02010113          	addi	sp,sp,32
80004144:	00008067          	ret

80004148 <do_syscall>:
{
80004148:	fd010113          	addi	sp,sp,-48
8000414c:	02112623          	sw	ra,44(sp)
80004150:	02812423          	sw	s0,40(sp)
80004154:	03010413          	addi	s0,sp,48
80004158:	fca42e23          	sw	a0,-36(s0)
	uint32_t syscall_num = ctx->a7;
8000415c:	fdc42783          	lw	a5,-36(s0)
80004160:	0407a783          	lw	a5,64(a5)
80004164:	fef42623          	sw	a5,-20(s0)
	switch (syscall_num)
80004168:	fec42703          	lw	a4,-20(s0)
8000416c:	00100793          	li	a5,1
80004170:	00f70a63          	beq	a4,a5,80004184 <do_syscall+0x3c>
80004174:	fec42703          	lw	a4,-20(s0)
80004178:	00200793          	li	a5,2
8000417c:	02f70663          	beq	a4,a5,800041a8 <do_syscall+0x60>
80004180:	0300006f          	j	800041b0 <do_syscall+0x68>
	{
	case 1:
		ctx->a0 = sys_gethid((unsigned int *)(ctx->a0));
80004184:	fdc42783          	lw	a5,-36(s0)
80004188:	0247a783          	lw	a5,36(a5)
8000418c:	00078513          	mv	a0,a5
80004190:	f61ff0ef          	jal	800040f0 <sys_gethid>
80004194:	00050793          	mv	a5,a0
80004198:	00078713          	mv	a4,a5
8000419c:	fdc42783          	lw	a5,-36(s0)
800041a0:	02e7a223          	sw	a4,36(a5)
		break;
800041a4:	0280006f          	j	800041cc <do_syscall+0x84>
	case 2:
		task_exit();
800041a8:	da0ff0ef          	jal	80003748 <task_exit>
		break;
800041ac:	0200006f          	j	800041cc <do_syscall+0x84>
	default:
		printf("Unknown syscall no: %d\n", syscall_num);
800041b0:	fec42583          	lw	a1,-20(s0)
800041b4:	800057b7          	lui	a5,0x80005
800041b8:	72078513          	addi	a0,a5,1824 # 80005720 <BSS_END+0x414>
800041bc:	83dfe0ef          	jal	800029f8 <printf>
		ctx->a0 = -1;
800041c0:	fdc42783          	lw	a5,-36(s0)
800041c4:	fff00713          	li	a4,-1
800041c8:	02e7a223          	sw	a4,36(a5)
	}

	return;
800041cc:	00000013          	nop
}
800041d0:	02c12083          	lw	ra,44(sp)
800041d4:	02812403          	lw	s0,40(sp)
800041d8:	03010113          	addi	sp,sp,48
800041dc:	00008067          	ret

800041e0 <r_mstatus>:
{
	uart_puts("Task 1: Created!\n");
	while (1)
	{
		uart_puts("Task 1: Running...\n");
		task_delay(DELAY);
800041e0:	fe010113          	addi	sp,sp,-32
800041e4:	00812e23          	sw	s0,28(sp)
800041e8:	02010413          	addi	s0,sp,32
	}
}
800041ec:	300027f3          	csrr	a5,mstatus
800041f0:	fef42623          	sw	a5,-20(s0)

800041f4:	fec42783          	lw	a5,-20(s0)
void user_task(void *param)
800041f8:	00078513          	mv	a0,a5
800041fc:	01c12403          	lw	s0,28(sp)
80004200:	02010113          	addi	sp,sp,32
80004204:	00008067          	ret

80004208 <w_mstatus>:
{
	int task_id = (int)param;
	printf("Task %d: Created!\n", task_id);
80004208:	fe010113          	addi	sp,sp,-32
8000420c:	00812e23          	sw	s0,28(sp)
80004210:	02010413          	addi	s0,sp,32
80004214:	fea42623          	sw	a0,-20(s0)
	int iter_cnt = task_id;
80004218:	fec42783          	lw	a5,-20(s0)
8000421c:	30079073          	csrw	mstatus,a5
	while (1)
80004220:	00000013          	nop
80004224:	01c12403          	lw	s0,28(sp)
80004228:	02010113          	addi	sp,sp,32
8000422c:	00008067          	ret

80004230 <sys_exit>:
    return ret;
}

// 封装 sys_exit
static inline void sys_exit()
{
80004230:	ff010113          	addi	sp,sp,-16
80004234:	00812623          	sw	s0,12(sp)
80004238:	01010413          	addi	s0,sp,16
    register int a7 asm("a7") = SYS_exit;
8000423c:	00200893          	li	a7,2
    asm volatile("ecall"
80004240:	00000073          	ecall
                 :
                 : "r"(a7)
                 :);
}
80004244:	00000013          	nop
80004248:	00c12403          	lw	s0,12(sp)
8000424c:	01010113          	addi	sp,sp,16
80004250:	00008067          	ret

80004254 <just_while>:
{
80004254:	ff010113          	addi	sp,sp,-16
80004258:	00812623          	sw	s0,12(sp)
8000425c:	01010413          	addi	s0,sp,16
	while (1)
80004260:	00000013          	nop
80004264:	ffdff06f          	j	80004260 <just_while+0xc>

80004268 <check_privilege_level>:
void check_privilege_level(void) {
80004268:	fe010113          	addi	sp,sp,-32
8000426c:	00812e23          	sw	s0,28(sp)
80004270:	02010413          	addi	s0,sp,32
    asm volatile("csrr %0, mstatus" : "=r"(mstatus));
80004274:	300027f3          	csrr	a5,mstatus
80004278:	fef42623          	sw	a5,-20(s0)
}
8000427c:	00000013          	nop
80004280:	01c12403          	lw	s0,28(sp)
80004284:	02010113          	addi	sp,sp,32
80004288:	00008067          	ret

8000428c <user_task0>:
{
8000428c:	fe010113          	addi	sp,sp,-32
80004290:	00112e23          	sw	ra,28(sp)
80004294:	00812c23          	sw	s0,24(sp)
80004298:	02010413          	addi	s0,sp,32
8000429c:	fea42623          	sw	a0,-20(s0)
	uart_puts("Task 0: Created!\n");
800042a0:	800057b7          	lui	a5,0x80005
800042a4:	73878513          	addi	a0,a5,1848 # 80005738 <BSS_END+0x42c>
800042a8:	924fe0ef          	jal	800023cc <uart_puts>
		uart_puts("Task 0: Running...\n");
800042ac:	800057b7          	lui	a5,0x80005
800042b0:	74c78513          	addi	a0,a5,1868 # 8000574c <BSS_END+0x440>
800042b4:	918fe0ef          	jal	800023cc <uart_puts>
		task_delay(DELAY);
800042b8:	00100513          	li	a0,1
800042bc:	d80ff0ef          	jal	8000383c <task_delay>
		uart_puts("Task 0: Running...\n");
800042c0:	00000013          	nop
800042c4:	fe9ff06f          	j	800042ac <user_task0+0x20>

800042c8 <user_task1>:
{
800042c8:	fe010113          	addi	sp,sp,-32
800042cc:	00112e23          	sw	ra,28(sp)
800042d0:	00812c23          	sw	s0,24(sp)
800042d4:	02010413          	addi	s0,sp,32
800042d8:	fea42623          	sw	a0,-20(s0)
	uart_puts("Task 1: Created!\n");
800042dc:	800057b7          	lui	a5,0x80005
800042e0:	76078513          	addi	a0,a5,1888 # 80005760 <BSS_END+0x454>
800042e4:	8e8fe0ef          	jal	800023cc <uart_puts>
		uart_puts("Task 1: Running...\n");
800042e8:	800057b7          	lui	a5,0x80005
800042ec:	77478513          	addi	a0,a5,1908 # 80005774 <BSS_END+0x468>
800042f0:	8dcfe0ef          	jal	800023cc <uart_puts>
		task_delay(DELAY);
800042f4:	00100513          	li	a0,1
800042f8:	d44ff0ef          	jal	8000383c <task_delay>
		uart_puts("Task 1: Running...\n");
800042fc:	00000013          	nop
80004300:	fe9ff06f          	j	800042e8 <user_task1+0x20>

80004304 <user_task>:
{
80004304:	fd010113          	addi	sp,sp,-48
80004308:	02112623          	sw	ra,44(sp)
8000430c:	02812423          	sw	s0,40(sp)
80004310:	03010413          	addi	s0,sp,48
80004314:	fca42e23          	sw	a0,-36(s0)
	int task_id = (int)param;
80004318:	fdc42783          	lw	a5,-36(s0)
8000431c:	fef42423          	sw	a5,-24(s0)
	printf("Task %d: Created!\n", task_id);
80004320:	fe842583          	lw	a1,-24(s0)
80004324:	800057b7          	lui	a5,0x80005
80004328:	78878513          	addi	a0,a5,1928 # 80005788 <BSS_END+0x47c>
8000432c:	eccfe0ef          	jal	800029f8 <printf>
	int iter_cnt = task_id;
80004330:	fe842783          	lw	a5,-24(s0)
80004334:	fef42623          	sw	a5,-20(s0)
	{
		printf("Task %d: Running...\n", task_id);
80004338:	fe842583          	lw	a1,-24(s0)
8000433c:	800057b7          	lui	a5,0x80005
80004340:	79c78513          	addi	a0,a5,1948 # 8000579c <BSS_END+0x490>
80004344:	eb4fe0ef          	jal	800029f8 <printf>
		task_delay(DELAY);
80004348:	00100513          	li	a0,1
8000434c:	cf0ff0ef          	jal	8000383c <task_delay>
		if (iter_cnt-- == 0)
80004350:	fec42783          	lw	a5,-20(s0)
80004354:	fff78713          	addi	a4,a5,-1
80004358:	fee42623          	sw	a4,-20(s0)
8000435c:	00078463          	beqz	a5,80004364 <user_task+0x60>
		printf("Task %d: Running...\n", task_id);
80004360:	fd9ff06f          	j	80004338 <user_task+0x34>
		{
			break;
80004364:	00000013          	nop
		}
	}
	printf("Task %d: Finished!\n", task_id);
80004368:	fe842583          	lw	a1,-24(s0)
8000436c:	800057b7          	lui	a5,0x80005
80004370:	7b478513          	addi	a0,a5,1972 # 800057b4 <BSS_END+0x4a8>
80004374:	e84fe0ef          	jal	800029f8 <printf>
	task_exit();
80004378:	bd0ff0ef          	jal	80003748 <task_exit>
}
8000437c:	00000013          	nop
80004380:	02c12083          	lw	ra,44(sp)
80004384:	02812403          	lw	s0,40(sp)
80004388:	03010113          	addi	sp,sp,48
8000438c:	00008067          	ret

80004390 <test_syscalls_task>:

void test_syscalls_task(void *param)
{
80004390:	fd010113          	addi	sp,sp,-48
80004394:	02112623          	sw	ra,44(sp)
80004398:	02812423          	sw	s0,40(sp)
8000439c:	03010413          	addi	s0,sp,48
800043a0:	fca42e23          	sw	a0,-36(s0)
	//check_privilege_level();
	uart_puts("Task: test_syscalls_task\n");
800043a4:	800057b7          	lui	a5,0x80005
800043a8:	7c878513          	addi	a0,a5,1992 # 800057c8 <BSS_END+0x4bc>
800043ac:	820fe0ef          	jal	800023cc <uart_puts>
	unsigned int hid = -1;
800043b0:	fff00793          	li	a5,-1
800043b4:	fef42423          	sw	a5,-24(s0)

	int ret = -1;
800043b8:	fff00793          	li	a5,-1
800043bc:	fef42623          	sw	a5,-20(s0)
	ret = gethid(&hid);
800043c0:	fe840793          	addi	a5,s0,-24
800043c4:	00078513          	mv	a0,a5
800043c8:	ca1fd0ef          	jal	80002068 <gethid>
800043cc:	fea42623          	sw	a0,-20(s0)
	// ret = gethid(NULL);
	if (!ret)
800043d0:	fec42783          	lw	a5,-20(s0)
800043d4:	00079e63          	bnez	a5,800043f0 <test_syscalls_task+0x60>
	{
		printf("system call returned!, hart id is %d\n", hid);
800043d8:	fe842783          	lw	a5,-24(s0)
800043dc:	00078593          	mv	a1,a5
800043e0:	800057b7          	lui	a5,0x80005
800043e4:	7e478513          	addi	a0,a5,2020 # 800057e4 <BSS_END+0x4d8>
800043e8:	e10fe0ef          	jal	800029f8 <printf>
800043ec:	0140006f          	j	80004400 <test_syscalls_task+0x70>
	}
	else
	{
		printf("gethid() failed, return: %d\n", ret);
800043f0:	fec42583          	lw	a1,-20(s0)
800043f4:	800067b7          	lui	a5,0x80006
800043f8:	80c78513          	addi	a0,a5,-2036 # 8000580c <BSS_END+0x500>
800043fc:	dfcfe0ef          	jal	800029f8 <printf>
	}
	sys_exit();
80004400:	e31ff0ef          	jal	80004230 <sys_exit>
}
80004404:	00000013          	nop
80004408:	02c12083          	lw	ra,44(sp)
8000440c:	02812403          	lw	s0,40(sp)
80004410:	03010113          	addi	sp,sp,48
80004414:	00008067          	ret

80004418 <disable_pmp>:

// 在你的 test_privilege_switch 函数中，mret 之前
void disable_pmp(void) {
80004418:	fe010113          	addi	sp,sp,-32
8000441c:	00112e23          	sw	ra,28(sp)
80004420:	00812c23          	sw	s0,24(sp)
80004424:	02010413          	addi	s0,sp,32
    // 准备用户模式上下文
    uint32_t mstatus = r_mstatus();
80004428:	db9ff0ef          	jal	800041e0 <r_mstatus>
8000442c:	fea42623          	sw	a0,-20(s0)
    mstatus &= ~MSTATUS_MPP; // 设置返回到用户模式 (U-Mode)
80004430:	fec42703          	lw	a4,-20(s0)
80004434:	ffffe7b7          	lui	a5,0xffffe
80004438:	7ff78793          	addi	a5,a5,2047 # ffffe7ff <_memory_end+0x77ffe7ff>
8000443c:	00f777b3          	and	a5,a4,a5
80004440:	fef42623          	sw	a5,-20(s0)
    mstatus |= MSTATUS_MPIE;  // 在用户模式使能中断
80004444:	fec42783          	lw	a5,-20(s0)
80004448:	0807e793          	ori	a5,a5,128
8000444c:	fef42623          	sw	a5,-20(s0)

    w_mstatus(mstatus);
80004450:	fec42503          	lw	a0,-20(s0)
80004454:	db5ff0ef          	jal	80004208 <w_mstatus>
    // pmpcfg0 设置模式为 TOR (Top of Range), 权限为 R/W/X
    // TOR 模式: 匹配 pmpaddr(i-1) 到 pmpaddr(i) 的地址范围。
    // 当 i=0, pmpaddr-1 隐式为 0。
    
    // pmpcfg0[A] = 0b01 (TOR), pmpcfg0[XWR] = 0b111
    const uint8_t pmp_config = (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0); // 0x0F
80004458:	00f00793          	li	a5,15
8000445c:	fef405a3          	sb	a5,-21(s0)
                                // A(TOR)    R         W         X

    printf("配置PMP，允许U-Mode访问所有内存...\n");
80004460:	800067b7          	lui	a5,0x80006
80004464:	82c78513          	addi	a0,a5,-2004 # 8000582c <BSS_END+0x520>
80004468:	d90fe0ef          	jal	800029f8 <printf>
    asm volatile(
8000446c:	fff00793          	li	a5,-1
80004470:	feb44703          	lbu	a4,-21(s0)
80004474:	3b079073          	csrw	pmpaddr0,a5
80004478:	3a071073          	csrw	pmpcfg0,a4
    );
    // =====================================

    //printf("即将切换到用户模式...\n");
    //asm volatile("mret");
}
8000447c:	00000013          	nop
80004480:	01c12083          	lw	ra,28(sp)
80004484:	01812403          	lw	s0,24(sp)
80004488:	02010113          	addi	sp,sp,32
8000448c:	00008067          	ret

80004490 <os_main>:

/* NOTICE: DON'T LOOP INFINITELY IN main() */
void os_main(void)
{
80004490:	ff010113          	addi	sp,sp,-16
80004494:	00112623          	sw	ra,12(sp)
80004498:	00812423          	sw	s0,8(sp)
8000449c:	01010413          	addi	s0,sp,16
	// 将测试任务添加到任务调度中，确保该任务在 U 模式下运行
	task_create(test_syscalls_task, NULL, 1, DEFAULT_TIMESLICE);
800044a0:	00200693          	li	a3,2
800044a4:	00100613          	li	a2,1
800044a8:	00000593          	li	a1,0
800044ac:	800047b7          	lui	a5,0x80004
800044b0:	39078513          	addi	a0,a5,912 # 80004390 <test_syscalls_task>
800044b4:	fbdfe0ef          	jal	80003470 <task_create>
	// 继续添加其他用户任务或内核任务...
	task_create(just_while, NULL, 129, DEFAULT_TIMESLICE);
800044b8:	00200693          	li	a3,2
800044bc:	08100613          	li	a2,129
800044c0:	00000593          	li	a1,0
800044c4:	800047b7          	lui	a5,0x80004
800044c8:	25478513          	addi	a0,a5,596 # 80004254 <just_while>
800044cc:	fa5fe0ef          	jal	80003470 <task_create>
	task_create(user_task0, NULL, 128, DEFAULT_TIMESLICE);
800044d0:	00200693          	li	a3,2
800044d4:	08000613          	li	a2,128
800044d8:	00000593          	li	a1,0
800044dc:	800047b7          	lui	a5,0x80004
800044e0:	28c78513          	addi	a0,a5,652 # 8000428c <user_task0>
800044e4:	f8dfe0ef          	jal	80003470 <task_create>
	task_create(user_task1, NULL, 128, DEFAULT_TIMESLICE);
800044e8:	00200693          	li	a3,2
800044ec:	08000613          	li	a2,128
800044f0:	00000593          	li	a1,0
800044f4:	800047b7          	lui	a5,0x80004
800044f8:	2c878513          	addi	a0,a5,712 # 800042c8 <user_task1>
800044fc:	f75fe0ef          	jal	80003470 <task_create>
	task_create(user_task, (void *)2, 3, DEFAULT_TIMESLICE);
80004500:	00200693          	li	a3,2
80004504:	00300613          	li	a2,3
80004508:	00200593          	li	a1,2
8000450c:	800047b7          	lui	a5,0x80004
80004510:	30478513          	addi	a0,a5,772 # 80004304 <user_task>
80004514:	f5dfe0ef          	jal	80003470 <task_create>
	task_create(user_task, (void *)3, 3, DEFAULT_TIMESLICE);
80004518:	00200693          	li	a3,2
8000451c:	00300613          	li	a2,3
80004520:	00300593          	li	a1,3
80004524:	800047b7          	lui	a5,0x80004
80004528:	30478513          	addi	a0,a5,772 # 80004304 <user_task>
8000452c:	f45fe0ef          	jal	80003470 <task_create>
	
}
80004530:	00000013          	nop
80004534:	00c12083          	lw	ra,12(sp)
80004538:	00812403          	lw	s0,8(sp)
8000453c:	01010113          	addi	sp,sp,16
80004540:	00008067          	ret

80004544 <r_mhartid>:
void trap_init()
{
	/*
	 * set the trap-vector base-address for machine-mode
	 */
	w_mtvec((reg_t)trap_vector);
80004544:	fe010113          	addi	sp,sp,-32
80004548:	00812e23          	sw	s0,28(sp)
8000454c:	02010413          	addi	s0,sp,32
	w_mscratch((reg_t)&context_inited);
}
80004550:	f14027f3          	csrr	a5,mhartid
80004554:	fef42623          	sw	a5,-20(s0)

80004558:	fec42783          	lw	a5,-20(s0)
void external_interrupt_handler()
8000455c:	00078513          	mv	a0,a5
80004560:	01c12403          	lw	s0,28(sp)
80004564:	02010113          	addi	sp,sp,32
80004568:	00008067          	ret

8000456c <w_mscratch>:
		case 11:
			external_interrupt_handler();
			break;
		default:
			uart_puts("未知的异步异常！\n");
			break;
8000456c:	fe010113          	addi	sp,sp,-32
80004570:	00812e23          	sw	s0,28(sp)
80004574:	02010413          	addi	s0,sp,32
80004578:	fea42623          	sw	a0,-20(s0)
		}
8000457c:	fec42783          	lw	a5,-20(s0)
80004580:	34079073          	csrw	mscratch,a5
	}
80004584:	00000013          	nop
80004588:	01c12403          	lw	s0,28(sp)
8000458c:	02010113          	addi	sp,sp,32
80004590:	00008067          	ret

80004594 <w_mtvec>:
	else
	{
		// 同步异常
		switch (cause_code)
80004594:	fe010113          	addi	sp,sp,-32
80004598:	00812e23          	sw	s0,28(sp)
8000459c:	02010413          	addi	s0,sp,32
800045a0:	fea42623          	sw	a0,-20(s0)
		{
800045a4:	fec42783          	lw	a5,-20(s0)
800045a8:	30579073          	csrw	mtvec,a5
		case 2:
800045ac:	00000013          	nop
800045b0:	01c12403          	lw	s0,28(sp)
800045b4:	02010113          	addi	sp,sp,32
800045b8:	00008067          	ret

800045bc <trap_init>:
{
800045bc:	ff010113          	addi	sp,sp,-16
800045c0:	00112623          	sw	ra,12(sp)
800045c4:	00812423          	sw	s0,8(sp)
800045c8:	01010413          	addi	s0,sp,16
	w_mtvec((reg_t)trap_vector);
800045cc:	800027b7          	lui	a5,0x80002
800045d0:	0e078793          	addi	a5,a5,224 # 800020e0 <trap_vector>
800045d4:	00078513          	mv	a0,a5
800045d8:	fbdff0ef          	jal	80004594 <w_mtvec>
	w_mscratch((reg_t)&context_inited);
800045dc:	801097b7          	lui	a5,0x80109
800045e0:	6a878793          	addi	a5,a5,1704 # 801096a8 <context_inited>
800045e4:	00078513          	mv	a0,a5
800045e8:	f85ff0ef          	jal	8000456c <w_mscratch>
}
800045ec:	00000013          	nop
800045f0:	00c12083          	lw	ra,12(sp)
800045f4:	00812403          	lw	s0,8(sp)
800045f8:	01010113          	addi	sp,sp,16
800045fc:	00008067          	ret

80004600 <external_interrupt_handler>:
{
80004600:	fe010113          	addi	sp,sp,-32
80004604:	00112e23          	sw	ra,28(sp)
80004608:	00812c23          	sw	s0,24(sp)
8000460c:	02010413          	addi	s0,sp,32
	int irq = plic_claim();
80004610:	354000ef          	jal	80004964 <plic_claim>
80004614:	fea42623          	sw	a0,-20(s0)
	if (irq == UART0_IRQ)
80004618:	fec42703          	lw	a4,-20(s0)
8000461c:	00a00793          	li	a5,10
80004620:	00f71663          	bne	a4,a5,8000462c <external_interrupt_handler+0x2c>
		uart_isr();
80004624:	e45fd0ef          	jal	80002468 <uart_isr>
80004628:	01c0006f          	j	80004644 <external_interrupt_handler+0x44>
	else if (irq)
8000462c:	fec42783          	lw	a5,-20(s0)
80004630:	00078a63          	beqz	a5,80004644 <external_interrupt_handler+0x44>
		printf("unexpected interrupt irq = %d\n", irq);
80004634:	fec42583          	lw	a1,-20(s0)
80004638:	800067b7          	lui	a5,0x80006
8000463c:	85c78513          	addi	a0,a5,-1956 # 8000585c <BSS_END+0x550>
80004640:	bb8fe0ef          	jal	800029f8 <printf>
	if (irq)
80004644:	fec42783          	lw	a5,-20(s0)
80004648:	00078663          	beqz	a5,80004654 <external_interrupt_handler+0x54>
		plic_complete(irq);
8000464c:	fec42503          	lw	a0,-20(s0)
80004650:	364000ef          	jal	800049b4 <plic_complete>
}
80004654:	00000013          	nop
80004658:	01c12083          	lw	ra,28(sp)
8000465c:	01812403          	lw	s0,24(sp)
80004660:	02010113          	addi	sp,sp,32
80004664:	00008067          	ret

80004668 <trap_handler>:
{
80004668:	fd010113          	addi	sp,sp,-48
8000466c:	02112623          	sw	ra,44(sp)
80004670:	02812423          	sw	s0,40(sp)
80004674:	03010413          	addi	s0,sp,48
80004678:	fca42e23          	sw	a0,-36(s0)
8000467c:	fcb42c23          	sw	a1,-40(s0)
80004680:	fcc42a23          	sw	a2,-44(s0)
	reg_t return_pc = epc;
80004684:	fdc42783          	lw	a5,-36(s0)
80004688:	fef42623          	sw	a5,-20(s0)
	reg_t cause_code = cause & 0xfff;
8000468c:	fd842703          	lw	a4,-40(s0)
80004690:	000017b7          	lui	a5,0x1
80004694:	fff78793          	addi	a5,a5,-1 # fff <STACK_SIZE+0xbff>
80004698:	00f777b3          	and	a5,a4,a5
8000469c:	fef42423          	sw	a5,-24(s0)
	uart_puts("trap_handler\n");
800046a0:	800067b7          	lui	a5,0x80006
800046a4:	87c78513          	addi	a0,a5,-1924 # 8000587c <BSS_END+0x570>
800046a8:	d25fd0ef          	jal	800023cc <uart_puts>
	if (cause & 0x80000000)
800046ac:	fd842783          	lw	a5,-40(s0)
800046b0:	0807d063          	bgez	a5,80004730 <trap_handler+0xc8>
		switch (cause_code)
800046b4:	fe842703          	lw	a4,-24(s0)
800046b8:	00b00793          	li	a5,11
800046bc:	04f70e63          	beq	a4,a5,80004718 <trap_handler+0xb0>
800046c0:	fe842703          	lw	a4,-24(s0)
800046c4:	00b00793          	li	a5,11
800046c8:	04e7ec63          	bltu	a5,a4,80004720 <trap_handler+0xb8>
800046cc:	fe842703          	lw	a4,-24(s0)
800046d0:	00300793          	li	a5,3
800046d4:	00f70a63          	beq	a4,a5,800046e8 <trap_handler+0x80>
800046d8:	fe842703          	lw	a4,-24(s0)
800046dc:	00700793          	li	a5,7
800046e0:	02f70863          	beq	a4,a5,80004710 <trap_handler+0xa8>
800046e4:	03c0006f          	j	80004720 <trap_handler+0xb8>
			int id = r_mhartid();
800046e8:	e5dff0ef          	jal	80004544 <r_mhartid>
800046ec:	00050793          	mv	a5,a0
800046f0:	fef42223          	sw	a5,-28(s0)
			*(uint32_t *)CLINT_MSIP(id) = 0;
800046f4:	fe442703          	lw	a4,-28(s0)
800046f8:	008007b7          	lui	a5,0x800
800046fc:	00f707b3          	add	a5,a4,a5
80004700:	00279793          	slli	a5,a5,0x2
80004704:	0007a023          	sw	zero,0(a5) # 800000 <STACK_SIZE+0x7ffc00>
			schedule();
80004708:	ab1fe0ef          	jal	800031b8 <schedule>
			break;
8000470c:	0d00006f          	j	800047dc <trap_handler+0x174>
			timer_handler();
80004710:	66c000ef          	jal	80004d7c <timer_handler>
			break;
80004714:	0c80006f          	j	800047dc <trap_handler+0x174>
			external_interrupt_handler();
80004718:	ee9ff0ef          	jal	80004600 <external_interrupt_handler>
			break;
8000471c:	0c00006f          	j	800047dc <trap_handler+0x174>
			uart_puts("未知的异步异常！\n");
80004720:	800067b7          	lui	a5,0x80006
80004724:	88c78513          	addi	a0,a5,-1908 # 8000588c <BSS_END+0x580>
80004728:	ca5fd0ef          	jal	800023cc <uart_puts>
			break;
8000472c:	0b00006f          	j	800047dc <trap_handler+0x174>
		switch (cause_code)
80004730:	fe842703          	lw	a4,-24(s0)
80004734:	00b00793          	li	a5,11
80004738:	08e7e663          	bltu	a5,a4,800047c4 <trap_handler+0x15c>
8000473c:	fe842783          	lw	a5,-24(s0)
80004740:	00279713          	slli	a4,a5,0x2
80004744:	800067b7          	lui	a5,0x80006
80004748:	92478793          	addi	a5,a5,-1756 # 80005924 <BSS_END+0x618>
8000474c:	00f707b3          	add	a5,a4,a5
80004750:	0007a783          	lw	a5,0(a5)
80004754:	00078067          	jr	a5
			uart_puts("Illegal instruction!\n");
80004758:	800067b7          	lui	a5,0x80006
8000475c:	8a878513          	addi	a0,a5,-1880 # 800058a8 <BSS_END+0x59c>
80004760:	c6dfd0ef          	jal	800023cc <uart_puts>
			break;
80004764:	0780006f          	j	800047dc <trap_handler+0x174>
		case 5:
			uart_puts("Fault load!\n");
80004768:	800067b7          	lui	a5,0x80006
8000476c:	8c078513          	addi	a0,a5,-1856 # 800058c0 <BSS_END+0x5b4>
80004770:	c5dfd0ef          	jal	800023cc <uart_puts>
			break;
80004774:	0680006f          	j	800047dc <trap_handler+0x174>
		case 7:
			uart_puts("Fault store!\n");
80004778:	800067b7          	lui	a5,0x80006
8000477c:	8d078513          	addi	a0,a5,-1840 # 800058d0 <BSS_END+0x5c4>
80004780:	c4dfd0ef          	jal	800023cc <uart_puts>
			break;
80004784:	0580006f          	j	800047dc <trap_handler+0x174>
		case 8:
			uart_puts("Environment call from U-mode!\n");
80004788:	800067b7          	lui	a5,0x80006
8000478c:	8e078513          	addi	a0,a5,-1824 # 800058e0 <BSS_END+0x5d4>
80004790:	c3dfd0ef          	jal	800023cc <uart_puts>
			do_syscall(ctx);
80004794:	fd442503          	lw	a0,-44(s0)
80004798:	9b1ff0ef          	jal	80004148 <do_syscall>
			return_pc += 4;
8000479c:	fec42783          	lw	a5,-20(s0)
800047a0:	00478793          	addi	a5,a5,4
800047a4:	fef42623          	sw	a5,-20(s0)
			break;
800047a8:	0340006f          	j	800047dc <trap_handler+0x174>
		case 11:
			//uart_puts("Environment call from M-mode!\n");
			do_syscall(ctx);
800047ac:	fd442503          	lw	a0,-44(s0)
800047b0:	999ff0ef          	jal	80004148 <do_syscall>
			return_pc += 4;
800047b4:	fec42783          	lw	a5,-20(s0)
800047b8:	00478793          	addi	a5,a5,4
800047bc:	fef42623          	sw	a5,-20(s0)
			break;
800047c0:	01c0006f          	j	800047dc <trap_handler+0x174>
		default:
			/* Synchronous trap - exception */
			printf("Sync exceptions! cause code: %d\n", cause_code);
800047c4:	fe842583          	lw	a1,-24(s0)
800047c8:	800067b7          	lui	a5,0x80006
800047cc:	90078513          	addi	a0,a5,-1792 # 80005900 <BSS_END+0x5f4>
800047d0:	a28fe0ef          	jal	800029f8 <printf>
			while (1)
800047d4:	00000013          	nop
800047d8:	ffdff06f          	j	800047d4 <trap_handler+0x16c>
			}
			
			break;
		}
	}
	return return_pc;
800047dc:	fec42783          	lw	a5,-20(s0)
}
800047e0:	00078513          	mv	a0,a5
800047e4:	02c12083          	lw	ra,44(sp)
800047e8:	02812403          	lw	s0,40(sp)
800047ec:	03010113          	addi	sp,sp,48
800047f0:	00008067          	ret

800047f4 <r_tp>:
  
	/* 
	 * Set priority for UART0.
	 *
	 * Each PLIC interrupt source can be assigned a priority by writing 
	 * to its 32-bit memory-mapped priority register.
800047f4:	fe010113          	addi	sp,sp,-32
800047f8:	00812e23          	sw	s0,28(sp)
800047fc:	02010413          	addi	s0,sp,32
	 * The QEMU-virt (the same as FU540-C000) supports 7 levels of priority. 
	 * A priority value of 0 is reserved to mean "never interrupt" and 
80004800:	00020793          	mv	a5,tp
80004804:	fef42623          	sw	a5,-20(s0)
	 * effectively disables the interrupt. 
80004808:	fec42783          	lw	a5,-20(s0)
	 * Priority 1 is the lowest active priority, and priority 7 is the highest. 
8000480c:	00078513          	mv	a0,a5
80004810:	01c12403          	lw	s0,28(sp)
80004814:	02010113          	addi	sp,sp,32
80004818:	00008067          	ret

8000481c <r_mstatus>:
	 * PLIC will mask all interrupts of a priority less than or equal to threshold.
	 * Maximum threshold is 7.
	 * For example, a threshold value of zero permits all interrupts with
	 * non-zero priority, whereas a value of 7 masks all interrupts.
	 * Notice, the threshold is global for PLIC, not for each interrupt source.
	 */
8000481c:	fe010113          	addi	sp,sp,-32
80004820:	00812e23          	sw	s0,28(sp)
80004824:	02010413          	addi	s0,sp,32
	*(uint32_t*)PLIC_MTHRESHOLD(hart) = 0;

80004828:	300027f3          	csrr	a5,mstatus
8000482c:	fef42623          	sw	a5,-20(s0)
	/* enable machine-mode external interrupts. */
80004830:	fec42783          	lw	a5,-20(s0)
	w_mie(r_mie() | MIE_MEIE);
80004834:	00078513          	mv	a0,a5
80004838:	01c12403          	lw	s0,28(sp)
8000483c:	02010113          	addi	sp,sp,32
80004840:	00008067          	ret

80004844 <w_mstatus>:


	/* enable machine-mode global interrupts. */
80004844:	fe010113          	addi	sp,sp,-32
80004848:	00812e23          	sw	s0,28(sp)
8000484c:	02010413          	addi	s0,sp,32
80004850:	fea42623          	sw	a0,-20(s0)
	w_mstatus(r_mstatus() | MSTATUS_MIE);
80004854:	fec42783          	lw	a5,-20(s0)
80004858:	30079073          	csrw	mstatus,a5
}
8000485c:	00000013          	nop
80004860:	01c12403          	lw	s0,28(sp)
80004864:	02010113          	addi	sp,sp,32
80004868:	00008067          	ret

8000486c <r_mie>:
{
	int hart = r_tp();
	*(uint32_t*)PLIC_MCOMPLETE(hart) = irq;
}
8000486c:	fe010113          	addi	sp,sp,-32
80004870:	00812e23          	sw	s0,28(sp)
80004874:	02010413          	addi	s0,sp,32
80004878:	304027f3          	csrr	a5,mie
8000487c:	fef42623          	sw	a5,-20(s0)
80004880:	fec42783          	lw	a5,-20(s0)
80004884:	00078513          	mv	a0,a5
80004888:	01c12403          	lw	s0,28(sp)
8000488c:	02010113          	addi	sp,sp,32
80004890:	00008067          	ret

80004894 <w_mie>:
80004894:	fe010113          	addi	sp,sp,-32
80004898:	00812e23          	sw	s0,28(sp)
8000489c:	02010413          	addi	s0,sp,32
800048a0:	fea42623          	sw	a0,-20(s0)
800048a4:	fec42783          	lw	a5,-20(s0)
800048a8:	30479073          	csrw	mie,a5
800048ac:	00000013          	nop
800048b0:	01c12403          	lw	s0,28(sp)
800048b4:	02010113          	addi	sp,sp,32
800048b8:	00008067          	ret

800048bc <plic_init>:
{
800048bc:	fe010113          	addi	sp,sp,-32
800048c0:	00112e23          	sw	ra,28(sp)
800048c4:	00812c23          	sw	s0,24(sp)
800048c8:	02010413          	addi	s0,sp,32
	int hart = r_tp();
800048cc:	f29ff0ef          	jal	800047f4 <r_tp>
800048d0:	00050793          	mv	a5,a0
800048d4:	fef42623          	sw	a5,-20(s0)
	*(uint32_t*)PLIC_PRIORITY(UART0_IRQ) = 1;
800048d8:	0c0007b7          	lui	a5,0xc000
800048dc:	02878793          	addi	a5,a5,40 # c000028 <_heap_size+0x4109758>
800048e0:	00100713          	li	a4,1
800048e4:	00e7a023          	sw	a4,0(a5)
	*(uint32_t*)PLIC_MENABLE(hart)= (1 << UART0_IRQ);
800048e8:	fec42703          	lw	a4,-20(s0)
800048ec:	001807b7          	lui	a5,0x180
800048f0:	04078793          	addi	a5,a5,64 # 180040 <STACK_SIZE+0x17fc40>
800048f4:	00f707b3          	add	a5,a4,a5
800048f8:	00779793          	slli	a5,a5,0x7
800048fc:	00078713          	mv	a4,a5
80004900:	40000793          	li	a5,1024
80004904:	00f72023          	sw	a5,0(a4)
	*(uint32_t*)PLIC_MTHRESHOLD(hart) = 0;
80004908:	fec42703          	lw	a4,-20(s0)
8000490c:	0000c7b7          	lui	a5,0xc
80004910:	20078793          	addi	a5,a5,512 # c200 <STACK_SIZE+0xbe00>
80004914:	00f707b3          	add	a5,a4,a5
80004918:	00c79793          	slli	a5,a5,0xc
8000491c:	0007a023          	sw	zero,0(a5)
	w_mie(r_mie() | MIE_MEIE);
80004920:	f4dff0ef          	jal	8000486c <r_mie>
80004924:	00050713          	mv	a4,a0
80004928:	000017b7          	lui	a5,0x1
8000492c:	80078793          	addi	a5,a5,-2048 # 800 <STACK_SIZE+0x400>
80004930:	00f767b3          	or	a5,a4,a5
80004934:	00078513          	mv	a0,a5
80004938:	f5dff0ef          	jal	80004894 <w_mie>
	w_mstatus(r_mstatus() | MSTATUS_MIE);
8000493c:	ee1ff0ef          	jal	8000481c <r_mstatus>
80004940:	00050793          	mv	a5,a0
80004944:	0087e793          	ori	a5,a5,8
80004948:	00078513          	mv	a0,a5
8000494c:	ef9ff0ef          	jal	80004844 <w_mstatus>
}
80004950:	00000013          	nop
80004954:	01c12083          	lw	ra,28(sp)
80004958:	01812403          	lw	s0,24(sp)
8000495c:	02010113          	addi	sp,sp,32
80004960:	00008067          	ret

80004964 <plic_claim>:
{
80004964:	fe010113          	addi	sp,sp,-32
80004968:	00112e23          	sw	ra,28(sp)
8000496c:	00812c23          	sw	s0,24(sp)
80004970:	02010413          	addi	s0,sp,32
	int hart = r_tp();
80004974:	e81ff0ef          	jal	800047f4 <r_tp>
80004978:	00050793          	mv	a5,a0
8000497c:	fef42623          	sw	a5,-20(s0)
	int irq = *(uint32_t*)PLIC_MCLAIM(hart);
80004980:	fec42783          	lw	a5,-20(s0)
80004984:	00c79713          	slli	a4,a5,0xc
80004988:	0c2007b7          	lui	a5,0xc200
8000498c:	00478793          	addi	a5,a5,4 # c200004 <_heap_size+0x4309734>
80004990:	00f707b3          	add	a5,a4,a5
80004994:	0007a783          	lw	a5,0(a5)
80004998:	fef42423          	sw	a5,-24(s0)
	return irq;
8000499c:	fe842783          	lw	a5,-24(s0)
}
800049a0:	00078513          	mv	a0,a5
800049a4:	01c12083          	lw	ra,28(sp)
800049a8:	01812403          	lw	s0,24(sp)
800049ac:	02010113          	addi	sp,sp,32
800049b0:	00008067          	ret

800049b4 <plic_complete>:
{
800049b4:	fd010113          	addi	sp,sp,-48
800049b8:	02112623          	sw	ra,44(sp)
800049bc:	02812423          	sw	s0,40(sp)
800049c0:	03010413          	addi	s0,sp,48
800049c4:	fca42e23          	sw	a0,-36(s0)
	int hart = r_tp();
800049c8:	e2dff0ef          	jal	800047f4 <r_tp>
800049cc:	00050793          	mv	a5,a0
800049d0:	fef42623          	sw	a5,-20(s0)
	*(uint32_t*)PLIC_MCOMPLETE(hart) = irq;
800049d4:	fec42783          	lw	a5,-20(s0)
800049d8:	00c79713          	slli	a4,a5,0xc
800049dc:	0c2007b7          	lui	a5,0xc200
800049e0:	00478793          	addi	a5,a5,4 # c200004 <_heap_size+0x4309734>
800049e4:	00f707b3          	add	a5,a4,a5
800049e8:	00078713          	mv	a4,a5
800049ec:	fdc42783          	lw	a5,-36(s0)
800049f0:	00f72023          	sw	a5,0(a4)
}
800049f4:	00000013          	nop
800049f8:	02c12083          	lw	ra,44(sp)
800049fc:	02812403          	lw	s0,40(sp)
80004a00:	03010113          	addi	sp,sp,48
80004a04:	00008067          	ret

80004a08 <r_mhartid>:
    int id = r_mhartid();

    *(uint64_t *)CLINT_MTIMECMP(id) = timeout_tick;
}

uint32_t get_mtimecmp(void)
80004a08:	fe010113          	addi	sp,sp,-32
80004a0c:	00812e23          	sw	s0,28(sp)
80004a10:	02010413          	addi	s0,sp,32
{
    int id = r_mhartid();
80004a14:	f14027f3          	csrr	a5,mhartid
80004a18:	fef42623          	sw	a5,-20(s0)
    volatile uint32_t *mtimecmp_ptr = (volatile uint32_t *)CLINT_MTIMECMP(id);
80004a1c:	fec42783          	lw	a5,-20(s0)
    return *mtimecmp_ptr;
80004a20:	00078513          	mv	a0,a5
80004a24:	01c12403          	lw	s0,28(sp)
80004a28:	02010113          	addi	sp,sp,32
80004a2c:	00008067          	ret

80004a30 <r_mie>:
        expired->func(expired->arg);
        
        // 释放定时器
        free(expired);
    }
    if (timers == NULL)
80004a30:	fe010113          	addi	sp,sp,-32
80004a34:	00812e23          	sw	s0,28(sp)
80004a38:	02010413          	addi	s0,sp,32
    {
        timer_create(schedule, NULL, 1);
80004a3c:	304027f3          	csrr	a5,mie
80004a40:	fef42623          	sw	a5,-20(s0)
        spin_unlock();
80004a44:	fec42783          	lw	a5,-20(s0)
        return;
80004a48:	00078513          	mv	a0,a5
80004a4c:	01c12403          	lw	s0,28(sp)
80004a50:	02010113          	addi	sp,sp,32
80004a54:	00008067          	ret

80004a58 <w_mie>:
    }
    timer_load(timers->timeout_tick);
}
80004a58:	fe010113          	addi	sp,sp,-32
80004a5c:	00812e23          	sw	s0,28(sp)
80004a60:	02010413          	addi	s0,sp,32
80004a64:	fea42623          	sw	a0,-20(s0)

80004a68:	fec42783          	lw	a5,-20(s0)
80004a6c:	30479073          	csrw	mie,a5
void timer_handler()
80004a70:	00000013          	nop
80004a74:	01c12403          	lw	s0,28(sp)
80004a78:	02010113          	addi	sp,sp,32
80004a7c:	00008067          	ret

80004a80 <timer_load>:
{
80004a80:	fd010113          	addi	sp,sp,-48
80004a84:	02112623          	sw	ra,44(sp)
80004a88:	02812423          	sw	s0,40(sp)
80004a8c:	03212223          	sw	s2,36(sp)
80004a90:	03312023          	sw	s3,32(sp)
80004a94:	03010413          	addi	s0,sp,48
80004a98:	fca42e23          	sw	a0,-36(s0)
    int id = r_mhartid();
80004a9c:	f6dff0ef          	jal	80004a08 <r_mhartid>
80004aa0:	00050793          	mv	a5,a0
80004aa4:	fef42623          	sw	a5,-20(s0)
    *(uint64_t *)CLINT_MTIMECMP(id) = timeout_tick;
80004aa8:	fec42703          	lw	a4,-20(s0)
80004aac:	004017b7          	lui	a5,0x401
80004ab0:	80078793          	addi	a5,a5,-2048 # 400800 <STACK_SIZE+0x400400>
80004ab4:	00f707b3          	add	a5,a4,a5
80004ab8:	00379793          	slli	a5,a5,0x3
80004abc:	00078713          	mv	a4,a5
80004ac0:	fdc42783          	lw	a5,-36(s0)
80004ac4:	00078913          	mv	s2,a5
80004ac8:	41f7d793          	srai	a5,a5,0x1f
80004acc:	00078993          	mv	s3,a5
80004ad0:	01272023          	sw	s2,0(a4)
80004ad4:	01372223          	sw	s3,4(a4)
}
80004ad8:	00000013          	nop
80004adc:	02c12083          	lw	ra,44(sp)
80004ae0:	02812403          	lw	s0,40(sp)
80004ae4:	02412903          	lw	s2,36(sp)
80004ae8:	02012983          	lw	s3,32(sp)
80004aec:	03010113          	addi	sp,sp,48
80004af0:	00008067          	ret

80004af4 <get_mtimecmp>:
{
80004af4:	fe010113          	addi	sp,sp,-32
80004af8:	00112e23          	sw	ra,28(sp)
80004afc:	00812c23          	sw	s0,24(sp)
80004b00:	02010413          	addi	s0,sp,32
    int id = r_mhartid();
80004b04:	f05ff0ef          	jal	80004a08 <r_mhartid>
80004b08:	00050793          	mv	a5,a0
80004b0c:	fef42623          	sw	a5,-20(s0)
    volatile uint32_t *mtimecmp_ptr = (volatile uint32_t *)CLINT_MTIMECMP(id);
80004b10:	fec42703          	lw	a4,-20(s0)
80004b14:	004017b7          	lui	a5,0x401
80004b18:	80078793          	addi	a5,a5,-2048 # 400800 <STACK_SIZE+0x400400>
80004b1c:	00f707b3          	add	a5,a4,a5
80004b20:	00379793          	slli	a5,a5,0x3
80004b24:	fef42423          	sw	a5,-24(s0)
    return *mtimecmp_ptr;
80004b28:	fe842783          	lw	a5,-24(s0)
80004b2c:	0007a783          	lw	a5,0(a5)
}
80004b30:	00078513          	mv	a0,a5
80004b34:	01c12083          	lw	ra,28(sp)
80004b38:	01812403          	lw	s0,24(sp)
80004b3c:	02010113          	addi	sp,sp,32
80004b40:	00008067          	ret

80004b44 <timer_init>:
{
80004b44:	ff010113          	addi	sp,sp,-16
80004b48:	00112623          	sw	ra,12(sp)
80004b4c:	00812423          	sw	s0,8(sp)
80004b50:	01010413          	addi	s0,sp,16
    w_mie(r_mie() | MIE_MTIE);
80004b54:	eddff0ef          	jal	80004a30 <r_mie>
80004b58:	00050793          	mv	a5,a0
80004b5c:	0807e793          	ori	a5,a5,128
80004b60:	00078513          	mv	a0,a5
80004b64:	ef5ff0ef          	jal	80004a58 <w_mie>
}
80004b68:	00000013          	nop
80004b6c:	00c12083          	lw	ra,12(sp)
80004b70:	00812403          	lw	s0,8(sp)
80004b74:	01010113          	addi	sp,sp,16
80004b78:	00008067          	ret

80004b7c <get_mtime>:
{
80004b7c:	fe010113          	addi	sp,sp,-32
80004b80:	00812e23          	sw	s0,28(sp)
80004b84:	02010413          	addi	s0,sp,32
    volatile uint32_t *mtime_ptr = (volatile uint32_t *)(CLINT_BASE + 0xBFF8);
80004b88:	0200c7b7          	lui	a5,0x200c
80004b8c:	ff878793          	addi	a5,a5,-8 # 200bff8 <STACK_SIZE+0x200bbf8>
80004b90:	fef42623          	sw	a5,-20(s0)
    return *mtime_ptr;
80004b94:	fec42783          	lw	a5,-20(s0)
80004b98:	0007a783          	lw	a5,0(a5)
}
80004b9c:	00078513          	mv	a0,a5
80004ba0:	01c12403          	lw	s0,28(sp)
80004ba4:	02010113          	addi	sp,sp,32
80004ba8:	00008067          	ret

80004bac <timer_create>:
{
80004bac:	fd010113          	addi	sp,sp,-48
80004bb0:	02112623          	sw	ra,44(sp)
80004bb4:	02812423          	sw	s0,40(sp)
80004bb8:	03010413          	addi	s0,sp,48
80004bbc:	fca42e23          	sw	a0,-36(s0)
80004bc0:	fcb42c23          	sw	a1,-40(s0)
80004bc4:	fcc42a23          	sw	a2,-44(s0)
    timer *t = malloc(sizeof(timer));
80004bc8:	01000513          	li	a0,16
80004bcc:	8d8ff0ef          	jal	80003ca4 <malloc>
80004bd0:	fea42623          	sw	a0,-20(s0)
    if (t == NULL)
80004bd4:	fec42783          	lw	a5,-20(s0)
80004bd8:	00079663          	bnez	a5,80004be4 <timer_create+0x38>
        return NULL;
80004bdc:	00000793          	li	a5,0
80004be0:	06c0006f          	j	80004c4c <timer_create+0xa0>
    t->func = handler;
80004be4:	fec42783          	lw	a5,-20(s0)
80004be8:	fdc42703          	lw	a4,-36(s0)
80004bec:	00e7a023          	sw	a4,0(a5)
    t->arg = arg;
80004bf0:	fec42783          	lw	a5,-20(s0)
80004bf4:	fd842703          	lw	a4,-40(s0)
80004bf8:	00e7a223          	sw	a4,4(a5)
    t->timeout_tick = get_mtime() + timeout * TIMER_INTERVAL;
80004bfc:	f81ff0ef          	jal	80004b7c <get_mtime>
80004c00:	00050693          	mv	a3,a0
80004c04:	fd442703          	lw	a4,-44(s0)
80004c08:	009897b7          	lui	a5,0x989
80004c0c:	68078793          	addi	a5,a5,1664 # 989680 <STACK_SIZE+0x989280>
80004c10:	02f707b3          	mul	a5,a4,a5
80004c14:	00f68733          	add	a4,a3,a5
80004c18:	fec42783          	lw	a5,-20(s0)
80004c1c:	00e7a423          	sw	a4,8(a5)
    t->next = NULL;
80004c20:	fec42783          	lw	a5,-20(s0)
80004c24:	0007a623          	sw	zero,12(a5)
    timers = insert_to_timer_list(timers, t);
80004c28:	800067b7          	lui	a5,0x80006
80004c2c:	00c7a783          	lw	a5,12(a5) # 8000600c <timers>
80004c30:	fec42583          	lw	a1,-20(s0)
80004c34:	00078513          	mv	a0,a5
80004c38:	438000ef          	jal	80005070 <insert_to_timer_list>
80004c3c:	00050713          	mv	a4,a0
80004c40:	800067b7          	lui	a5,0x80006
80004c44:	00e7a623          	sw	a4,12(a5) # 8000600c <timers>
    return t;
80004c48:	fec42783          	lw	a5,-20(s0)
}
80004c4c:	00078513          	mv	a0,a5
80004c50:	02c12083          	lw	ra,44(sp)
80004c54:	02812403          	lw	s0,40(sp)
80004c58:	03010113          	addi	sp,sp,48
80004c5c:	00008067          	ret

80004c60 <timer_delete>:
{
80004c60:	fe010113          	addi	sp,sp,-32
80004c64:	00112e23          	sw	ra,28(sp)
80004c68:	00812c23          	sw	s0,24(sp)
80004c6c:	02010413          	addi	s0,sp,32
80004c70:	fea42623          	sw	a0,-20(s0)
    timers = delete_from_timer_list(timers, timer);
80004c74:	800067b7          	lui	a5,0x80006
80004c78:	00c7a783          	lw	a5,12(a5) # 8000600c <timers>
80004c7c:	fec42583          	lw	a1,-20(s0)
80004c80:	00078513          	mv	a0,a5
80004c84:	580000ef          	jal	80005204 <delete_from_timer_list>
80004c88:	00050713          	mv	a4,a0
80004c8c:	800067b7          	lui	a5,0x80006
80004c90:	00e7a623          	sw	a4,12(a5) # 8000600c <timers>
    free(timer);
80004c94:	fec42503          	lw	a0,-20(s0)
80004c98:	994ff0ef          	jal	80003e2c <free>
}
80004c9c:	00000013          	nop
80004ca0:	01c12083          	lw	ra,28(sp)
80004ca4:	01812403          	lw	s0,24(sp)
80004ca8:	02010113          	addi	sp,sp,32
80004cac:	00008067          	ret

80004cb0 <run_timer_list>:
{
80004cb0:	fe010113          	addi	sp,sp,-32
80004cb4:	00112e23          	sw	ra,28(sp)
80004cb8:	00812c23          	sw	s0,24(sp)
80004cbc:	00912a23          	sw	s1,20(sp)
80004cc0:	02010413          	addi	s0,sp,32
    while (timers != NULL && timers->timeout_tick <= get_mtime())
80004cc4:	0440006f          	j	80004d08 <run_timer_list+0x58>
        timer *expired = timers;
80004cc8:	800067b7          	lui	a5,0x80006
80004ccc:	00c7a783          	lw	a5,12(a5) # 8000600c <timers>
80004cd0:	fef42623          	sw	a5,-20(s0)
        timers = timers->next;
80004cd4:	800067b7          	lui	a5,0x80006
80004cd8:	00c7a783          	lw	a5,12(a5) # 8000600c <timers>
80004cdc:	00c7a703          	lw	a4,12(a5)
80004ce0:	800067b7          	lui	a5,0x80006
80004ce4:	00e7a623          	sw	a4,12(a5) # 8000600c <timers>
        expired->func(expired->arg);
80004ce8:	fec42783          	lw	a5,-20(s0)
80004cec:	0007a783          	lw	a5,0(a5)
80004cf0:	fec42703          	lw	a4,-20(s0)
80004cf4:	00472703          	lw	a4,4(a4)
80004cf8:	00070513          	mv	a0,a4
80004cfc:	000780e7          	jalr	a5
        free(expired);
80004d00:	fec42503          	lw	a0,-20(s0)
80004d04:	928ff0ef          	jal	80003e2c <free>
    while (timers != NULL && timers->timeout_tick <= get_mtime())
80004d08:	800067b7          	lui	a5,0x80006
80004d0c:	00c7a783          	lw	a5,12(a5) # 8000600c <timers>
80004d10:	00078e63          	beqz	a5,80004d2c <run_timer_list+0x7c>
80004d14:	800067b7          	lui	a5,0x80006
80004d18:	00c7a783          	lw	a5,12(a5) # 8000600c <timers>
80004d1c:	0087a483          	lw	s1,8(a5)
80004d20:	e5dff0ef          	jal	80004b7c <get_mtime>
80004d24:	00050793          	mv	a5,a0
80004d28:	fa97f0e3          	bgeu	a5,s1,80004cc8 <run_timer_list+0x18>
    if (timers == NULL)
80004d2c:	800067b7          	lui	a5,0x80006
80004d30:	00c7a783          	lw	a5,12(a5) # 8000600c <timers>
80004d34:	02079063          	bnez	a5,80004d54 <run_timer_list+0xa4>
        timer_create(schedule, NULL, 1);
80004d38:	00100613          	li	a2,1
80004d3c:	00000593          	li	a1,0
80004d40:	800037b7          	lui	a5,0x80003
80004d44:	1b878513          	addi	a0,a5,440 # 800031b8 <schedule>
80004d48:	e65ff0ef          	jal	80004bac <timer_create>
        spin_unlock();
80004d4c:	2e8000ef          	jal	80005034 <spin_unlock>
        return;
80004d50:	0180006f          	j	80004d68 <run_timer_list+0xb8>
    timer_load(timers->timeout_tick);
80004d54:	800067b7          	lui	a5,0x80006
80004d58:	00c7a783          	lw	a5,12(a5) # 8000600c <timers>
80004d5c:	0087a783          	lw	a5,8(a5)
80004d60:	00078513          	mv	a0,a5
80004d64:	d1dff0ef          	jal	80004a80 <timer_load>
}
80004d68:	01c12083          	lw	ra,28(sp)
80004d6c:	01812403          	lw	s0,24(sp)
80004d70:	01412483          	lw	s1,20(sp)
80004d74:	02010113          	addi	sp,sp,32
80004d78:	00008067          	ret

80004d7c <timer_handler>:
{
80004d7c:	ff010113          	addi	sp,sp,-16
80004d80:	00112623          	sw	ra,12(sp)
80004d84:	00812423          	sw	s0,8(sp)
80004d88:	01010413          	addi	s0,sp,16
    spin_lock();
80004d8c:	26c000ef          	jal	80004ff8 <spin_lock>
    printf("tick: %d\n", _tick++);
80004d90:	801097b7          	lui	a5,0x80109
80004d94:	72c7a783          	lw	a5,1836(a5) # 8010972c <_tick>
80004d98:	00178693          	addi	a3,a5,1
80004d9c:	80109737          	lui	a4,0x80109
80004da0:	72d72623          	sw	a3,1836(a4) # 8010972c <_tick>
80004da4:	00078593          	mv	a1,a5
80004da8:	800067b7          	lui	a5,0x80006
80004dac:	95478513          	addi	a0,a5,-1708 # 80005954 <BSS_END+0x648>
80004db0:	c49fd0ef          	jal	800029f8 <printf>
    printf("mtime: %d\n", get_mtime());
80004db4:	dc9ff0ef          	jal	80004b7c <get_mtime>
80004db8:	00050793          	mv	a5,a0
80004dbc:	00078593          	mv	a1,a5
80004dc0:	800067b7          	lui	a5,0x80006
80004dc4:	96078513          	addi	a0,a5,-1696 # 80005960 <BSS_END+0x654>
80004dc8:	c31fd0ef          	jal	800029f8 <printf>
    printf("mtimecmp: %d\n", get_mtimecmp());
80004dcc:	d29ff0ef          	jal	80004af4 <get_mtimecmp>
80004dd0:	00050793          	mv	a5,a0
80004dd4:	00078593          	mv	a1,a5
80004dd8:	800067b7          	lui	a5,0x80006
80004ddc:	96c78513          	addi	a0,a5,-1684 # 8000596c <BSS_END+0x660>
80004de0:	c19fd0ef          	jal	800029f8 <printf>
    print_tasks();
80004de4:	bc9fe0ef          	jal	800039ac <print_tasks>
    print_timers();
80004de8:	020000ef          	jal	80004e08 <print_timers>
    // if (timers->func == timer_handler)
    // {
    //     timer_create(timer_handler, NULL, 1);
    // }
    run_timer_list();
80004dec:	ec5ff0ef          	jal	80004cb0 <run_timer_list>
    spin_unlock();
80004df0:	244000ef          	jal	80005034 <spin_unlock>
    // check_timeslice();
}
80004df4:	00000013          	nop
80004df8:	00c12083          	lw	ra,12(sp)
80004dfc:	00812403          	lw	s0,8(sp)
80004e00:	01010113          	addi	sp,sp,16
80004e04:	00008067          	ret

80004e08 <print_timers>:

/* 打印定时器链表信息的调试函数 */
void print_timers(void)
{
80004e08:	fe010113          	addi	sp,sp,-32
80004e0c:	00112e23          	sw	ra,28(sp)
80004e10:	00812c23          	sw	s0,24(sp)
80004e14:	02010413          	addi	s0,sp,32
    printf("\n=== Timer List Debug Info ===\n");
80004e18:	800067b7          	lui	a5,0x80006
80004e1c:	97c78513          	addi	a0,a5,-1668 # 8000597c <BSS_END+0x670>
80004e20:	bd9fd0ef          	jal	800029f8 <printf>
    printf("MTIMECMP:%d\n", get_mtimecmp());
80004e24:	cd1ff0ef          	jal	80004af4 <get_mtimecmp>
80004e28:	00050793          	mv	a5,a0
80004e2c:	00078593          	mv	a1,a5
80004e30:	800067b7          	lui	a5,0x80006
80004e34:	99c78513          	addi	a0,a5,-1636 # 8000599c <BSS_END+0x690>
80004e38:	bc1fd0ef          	jal	800029f8 <printf>
    if (timers == NULL)
80004e3c:	800067b7          	lui	a5,0x80006
80004e40:	00c7a783          	lw	a5,12(a5) # 8000600c <timers>
80004e44:	00079a63          	bnez	a5,80004e58 <print_timers+0x50>
    {
        printf("Timer list is empty\n");
80004e48:	800067b7          	lui	a5,0x80006
80004e4c:	9ac78513          	addi	a0,a5,-1620 # 800059ac <BSS_END+0x6a0>
80004e50:	ba9fd0ef          	jal	800029f8 <printf>
        return;
80004e54:	1440006f          	j	80004f98 <print_timers+0x190>
    }

    timer *current = timers;
80004e58:	800067b7          	lui	a5,0x80006
80004e5c:	00c7a783          	lw	a5,12(a5) # 8000600c <timers>
80004e60:	fef42623          	sw	a5,-20(s0)
    int count = 0;
80004e64:	fe042423          	sw	zero,-24(s0)

    while (current != NULL)
80004e68:	11c0006f          	j	80004f84 <print_timers+0x17c>
    {
        printf("Timer[%d]:\n", count++);
80004e6c:	fe842783          	lw	a5,-24(s0)
80004e70:	00178713          	addi	a4,a5,1
80004e74:	fee42423          	sw	a4,-24(s0)
80004e78:	00078593          	mv	a1,a5
80004e7c:	800067b7          	lui	a5,0x80006
80004e80:	9c478513          	addi	a0,a5,-1596 # 800059c4 <BSS_END+0x6b8>
80004e84:	b75fd0ef          	jal	800029f8 <printf>
        printf("  timeout_tick: %d\n", current->timeout_tick);
80004e88:	fec42783          	lw	a5,-20(s0)
80004e8c:	0087a783          	lw	a5,8(a5)
80004e90:	00078593          	mv	a1,a5
80004e94:	800067b7          	lui	a5,0x80006
80004e98:	9d078513          	addi	a0,a5,-1584 # 800059d0 <BSS_END+0x6c4>
80004e9c:	b5dfd0ef          	jal	800029f8 <printf>
        const char *func_name = "unknown";
80004ea0:	800067b7          	lui	a5,0x80006
80004ea4:	9e478793          	addi	a5,a5,-1564 # 800059e4 <BSS_END+0x6d8>
80004ea8:	fef42223          	sw	a5,-28(s0)
        if (current->func == timer_handler)
80004eac:	fec42783          	lw	a5,-20(s0)
80004eb0:	0007a703          	lw	a4,0(a5)
80004eb4:	800057b7          	lui	a5,0x80005
80004eb8:	d7c78793          	addi	a5,a5,-644 # 80004d7c <timer_handler>
80004ebc:	00f71a63          	bne	a4,a5,80004ed0 <print_timers+0xc8>
        {
            func_name = "timer_handler";
80004ec0:	800067b7          	lui	a5,0x80006
80004ec4:	9ec78793          	addi	a5,a5,-1556 # 800059ec <BSS_END+0x6e0>
80004ec8:	fef42223          	sw	a5,-28(s0)
80004ecc:	06c0006f          	j	80004f38 <print_timers+0x130>
        }
        else if (current->func == task_yield)
80004ed0:	fec42783          	lw	a5,-20(s0)
80004ed4:	0007a703          	lw	a4,0(a5)
80004ed8:	800037b7          	lui	a5,0x80003
80004edc:	6bc78793          	addi	a5,a5,1724 # 800036bc <task_yield>
80004ee0:	00f71a63          	bne	a4,a5,80004ef4 <print_timers+0xec>
        {
            func_name = "task_yield";
80004ee4:	800067b7          	lui	a5,0x80006
80004ee8:	9fc78793          	addi	a5,a5,-1540 # 800059fc <BSS_END+0x6f0>
80004eec:	fef42223          	sw	a5,-28(s0)
80004ef0:	0480006f          	j	80004f38 <print_timers+0x130>
        }
        else if (current->func == wake_up_task)
80004ef4:	fec42783          	lw	a5,-20(s0)
80004ef8:	0007a703          	lw	a4,0(a5)
80004efc:	800037b7          	lui	a5,0x80003
80004f00:	7bc78793          	addi	a5,a5,1980 # 800037bc <wake_up_task>
80004f04:	00f71a63          	bne	a4,a5,80004f18 <print_timers+0x110>
        {
            func_name = "wake_up_task";
80004f08:	800067b7          	lui	a5,0x80006
80004f0c:	a0878793          	addi	a5,a5,-1528 # 80005a08 <BSS_END+0x6fc>
80004f10:	fef42223          	sw	a5,-28(s0)
80004f14:	0240006f          	j	80004f38 <print_timers+0x130>
        }
        else if (current->func == schedule)
80004f18:	fec42783          	lw	a5,-20(s0)
80004f1c:	0007a703          	lw	a4,0(a5)
80004f20:	800037b7          	lui	a5,0x80003
80004f24:	1b878793          	addi	a5,a5,440 # 800031b8 <schedule>
80004f28:	00f71863          	bne	a4,a5,80004f38 <print_timers+0x130>
        {
            func_name = "schedule";
80004f2c:	800067b7          	lui	a5,0x80006
80004f30:	a1878793          	addi	a5,a5,-1512 # 80005a18 <BSS_END+0x70c>
80004f34:	fef42223          	sw	a5,-28(s0)
        }

        // ... 添加其他你需要识别的函数

        printf("  func name: %s\n", func_name);
80004f38:	fe442583          	lw	a1,-28(s0)
80004f3c:	800067b7          	lui	a5,0x80006
80004f40:	a2478513          	addi	a0,a5,-1500 # 80005a24 <BSS_END+0x718>
80004f44:	ab5fd0ef          	jal	800029f8 <printf>
        printf("  arg: %p\n", current->arg);
80004f48:	fec42783          	lw	a5,-20(s0)
80004f4c:	0047a783          	lw	a5,4(a5)
80004f50:	00078593          	mv	a1,a5
80004f54:	800067b7          	lui	a5,0x80006
80004f58:	a3878513          	addi	a0,a5,-1480 # 80005a38 <BSS_END+0x72c>
80004f5c:	a9dfd0ef          	jal	800029f8 <printf>
        printf("  next: %p\n", (void *)current->next);
80004f60:	fec42783          	lw	a5,-20(s0)
80004f64:	00c7a783          	lw	a5,12(a5)
80004f68:	00078593          	mv	a1,a5
80004f6c:	800067b7          	lui	a5,0x80006
80004f70:	a4478513          	addi	a0,a5,-1468 # 80005a44 <BSS_END+0x738>
80004f74:	a85fd0ef          	jal	800029f8 <printf>

        current = current->next;
80004f78:	fec42783          	lw	a5,-20(s0)
80004f7c:	00c7a783          	lw	a5,12(a5)
80004f80:	fef42623          	sw	a5,-20(s0)
    while (current != NULL)
80004f84:	fec42783          	lw	a5,-20(s0)
80004f88:	ee0792e3          	bnez	a5,80004e6c <print_timers+0x64>
    }
    printf("=== End of Timer List ===\n\n");
80004f8c:	800067b7          	lui	a5,0x80006
80004f90:	a5078513          	addi	a0,a5,-1456 # 80005a50 <BSS_END+0x744>
80004f94:	a65fd0ef          	jal	800029f8 <printf>
80004f98:	01c12083          	lw	ra,28(sp)
80004f9c:	01812403          	lw	s0,24(sp)
80004fa0:	02010113          	addi	sp,sp,32
80004fa4:	00008067          	ret

80004fa8 <r_mstatus>:
80004fa8:	fe010113          	addi	sp,sp,-32
80004fac:	00812e23          	sw	s0,28(sp)
80004fb0:	02010413          	addi	s0,sp,32
80004fb4:	300027f3          	csrr	a5,mstatus
80004fb8:	fef42623          	sw	a5,-20(s0)
80004fbc:	fec42783          	lw	a5,-20(s0)
80004fc0:	00078513          	mv	a0,a5
80004fc4:	01c12403          	lw	s0,28(sp)
80004fc8:	02010113          	addi	sp,sp,32
80004fcc:	00008067          	ret

80004fd0 <w_mstatus>:
80004fd0:	fe010113          	addi	sp,sp,-32
80004fd4:	00812e23          	sw	s0,28(sp)
80004fd8:	02010413          	addi	s0,sp,32
80004fdc:	fea42623          	sw	a0,-20(s0)
80004fe0:	fec42783          	lw	a5,-20(s0)
80004fe4:	30079073          	csrw	mstatus,a5
80004fe8:	00000013          	nop
80004fec:	01c12403          	lw	s0,28(sp)
80004ff0:	02010113          	addi	sp,sp,32
80004ff4:	00008067          	ret

80004ff8 <spin_lock>:
{
80004ff8:	ff010113          	addi	sp,sp,-16
80004ffc:	00112623          	sw	ra,12(sp)
80005000:	00812423          	sw	s0,8(sp)
80005004:	01010413          	addi	s0,sp,16
	w_mstatus(r_mstatus() & ~MSTATUS_MIE);
80005008:	fa1ff0ef          	jal	80004fa8 <r_mstatus>
8000500c:	00050793          	mv	a5,a0
80005010:	ff77f793          	andi	a5,a5,-9
80005014:	00078513          	mv	a0,a5
80005018:	fb9ff0ef          	jal	80004fd0 <w_mstatus>
	return 0;
8000501c:	00000793          	li	a5,0
}
80005020:	00078513          	mv	a0,a5
80005024:	00c12083          	lw	ra,12(sp)
80005028:	00812403          	lw	s0,8(sp)
8000502c:	01010113          	addi	sp,sp,16
80005030:	00008067          	ret

80005034 <spin_unlock>:
{
80005034:	ff010113          	addi	sp,sp,-16
80005038:	00112623          	sw	ra,12(sp)
8000503c:	00812423          	sw	s0,8(sp)
80005040:	01010413          	addi	s0,sp,16
	w_mstatus(r_mstatus() | MSTATUS_MIE);
80005044:	f65ff0ef          	jal	80004fa8 <r_mstatus>
80005048:	00050793          	mv	a5,a0
8000504c:	0087e793          	ori	a5,a5,8
80005050:	00078513          	mv	a0,a5
80005054:	f7dff0ef          	jal	80004fd0 <w_mstatus>
	return 0;
80005058:	00000793          	li	a5,0
}
8000505c:	00078513          	mv	a0,a5
80005060:	00c12083          	lw	ra,12(sp)
80005064:	00812403          	lw	s0,8(sp)
80005068:	01010113          	addi	sp,sp,16
8000506c:	00008067          	ret

80005070 <insert_to_timer_list>:
#include "os.h"
timer *insert_to_timer_list(timer *timer_head, timer *_timer)
{
80005070:	fd010113          	addi	sp,sp,-48
80005074:	02112623          	sw	ra,44(sp)
80005078:	02812423          	sw	s0,40(sp)
8000507c:	03010413          	addi	s0,sp,48
80005080:	fca42e23          	sw	a0,-36(s0)
80005084:	fcb42c23          	sw	a1,-40(s0)
    if (timer_head == NULL)
80005088:	fdc42783          	lw	a5,-36(s0)
8000508c:	02079463          	bnez	a5,800050b4 <insert_to_timer_list+0x44>
    {
        next_timer = _timer;
80005090:	800067b7          	lui	a5,0x80006
80005094:	fd842703          	lw	a4,-40(s0)
80005098:	00e7a823          	sw	a4,16(a5) # 80006010 <next_timer>
        timer_load(_timer->timeout_tick);
8000509c:	fd842783          	lw	a5,-40(s0)
800050a0:	0087a783          	lw	a5,8(a5)
800050a4:	00078513          	mv	a0,a5
800050a8:	9d9ff0ef          	jal	80004a80 <timer_load>
        return _timer;
800050ac:	fd842783          	lw	a5,-40(s0)
800050b0:	1400006f          	j	800051f0 <insert_to_timer_list+0x180>
    }
    if (timer_head->timeout_tick > _timer->timeout_tick)
800050b4:	fdc42783          	lw	a5,-36(s0)
800050b8:	0087a703          	lw	a4,8(a5)
800050bc:	fd842783          	lw	a5,-40(s0)
800050c0:	0087a783          	lw	a5,8(a5)
800050c4:	02e7fa63          	bgeu	a5,a4,800050f8 <insert_to_timer_list+0x88>
    {
        _timer->next = timer_head;
800050c8:	fd842783          	lw	a5,-40(s0)
800050cc:	fdc42703          	lw	a4,-36(s0)
800050d0:	00e7a623          	sw	a4,12(a5)
        next_timer = _timer;
800050d4:	800067b7          	lui	a5,0x80006
800050d8:	fd842703          	lw	a4,-40(s0)
800050dc:	00e7a823          	sw	a4,16(a5) # 80006010 <next_timer>
        timer_load(_timer->timeout_tick);
800050e0:	fd842783          	lw	a5,-40(s0)
800050e4:	0087a783          	lw	a5,8(a5)
800050e8:	00078513          	mv	a0,a5
800050ec:	995ff0ef          	jal	80004a80 <timer_load>
        return _timer;
800050f0:	fd842783          	lw	a5,-40(s0)
800050f4:	0fc0006f          	j	800051f0 <insert_to_timer_list+0x180>
    }

    timer *current_timer = timer_head;
800050f8:	fdc42783          	lw	a5,-36(s0)
800050fc:	fef42623          	sw	a5,-20(s0)
    timer_load(timer_head->timeout_tick);
80005100:	fdc42783          	lw	a5,-36(s0)
80005104:	0087a783          	lw	a5,8(a5)
80005108:	00078513          	mv	a0,a5
8000510c:	975ff0ef          	jal	80004a80 <timer_load>
    while (current_timer->next != NULL)
80005110:	0840006f          	j	80005194 <insert_to_timer_list+0x124>
    {
        if (current_timer->next->timeout_tick > _timer->timeout_tick && current_timer->timeout_tick < _timer->timeout_tick)
80005114:	fec42783          	lw	a5,-20(s0)
80005118:	00c7a783          	lw	a5,12(a5)
8000511c:	0087a703          	lw	a4,8(a5)
80005120:	fd842783          	lw	a5,-40(s0)
80005124:	0087a783          	lw	a5,8(a5)
80005128:	06e7f063          	bgeu	a5,a4,80005188 <insert_to_timer_list+0x118>
8000512c:	fec42783          	lw	a5,-20(s0)
80005130:	0087a703          	lw	a4,8(a5)
80005134:	fd842783          	lw	a5,-40(s0)
80005138:	0087a783          	lw	a5,8(a5)
8000513c:	04f77663          	bgeu	a4,a5,80005188 <insert_to_timer_list+0x118>
        {
            _timer->next = current_timer->next;
80005140:	fec42783          	lw	a5,-20(s0)
80005144:	00c7a703          	lw	a4,12(a5)
80005148:	fd842783          	lw	a5,-40(s0)
8000514c:	00e7a623          	sw	a4,12(a5)
            current_timer->next = _timer;
80005150:	fec42783          	lw	a5,-20(s0)
80005154:	fd842703          	lw	a4,-40(s0)
80005158:	00e7a623          	sw	a4,12(a5)

            if (_timer->timeout_tick < next_timer->timeout_tick)
8000515c:	fd842783          	lw	a5,-40(s0)
80005160:	0087a703          	lw	a4,8(a5)
80005164:	800067b7          	lui	a5,0x80006
80005168:	0107a783          	lw	a5,16(a5) # 80006010 <next_timer>
8000516c:	0087a783          	lw	a5,8(a5)
80005170:	00f77863          	bgeu	a4,a5,80005180 <insert_to_timer_list+0x110>
            {
                next_timer = _timer;
80005174:	800067b7          	lui	a5,0x80006
80005178:	fd842703          	lw	a4,-40(s0)
8000517c:	00e7a823          	sw	a4,16(a5) # 80006010 <next_timer>
            }
            return timer_head;
80005180:	fdc42783          	lw	a5,-36(s0)
80005184:	06c0006f          	j	800051f0 <insert_to_timer_list+0x180>
        }
        current_timer = current_timer->next;
80005188:	fec42783          	lw	a5,-20(s0)
8000518c:	00c7a783          	lw	a5,12(a5)
80005190:	fef42623          	sw	a5,-20(s0)
    while (current_timer->next != NULL)
80005194:	fec42783          	lw	a5,-20(s0)
80005198:	00c7a783          	lw	a5,12(a5)
8000519c:	f6079ce3          	bnez	a5,80005114 <insert_to_timer_list+0xa4>
    }
    current_timer->next = _timer;
800051a0:	fec42783          	lw	a5,-20(s0)
800051a4:	fd842703          	lw	a4,-40(s0)
800051a8:	00e7a623          	sw	a4,12(a5)
    if (next_timer == NULL || (_timer->timeout_tick < next_timer->timeout_tick))
800051ac:	800067b7          	lui	a5,0x80006
800051b0:	0107a783          	lw	a5,16(a5) # 80006010 <next_timer>
800051b4:	00078e63          	beqz	a5,800051d0 <insert_to_timer_list+0x160>
800051b8:	fd842783          	lw	a5,-40(s0)
800051bc:	0087a703          	lw	a4,8(a5)
800051c0:	800067b7          	lui	a5,0x80006
800051c4:	0107a783          	lw	a5,16(a5) # 80006010 <next_timer>
800051c8:	0087a783          	lw	a5,8(a5)
800051cc:	00f77863          	bgeu	a4,a5,800051dc <insert_to_timer_list+0x16c>
    {
        next_timer = _timer;
800051d0:	800067b7          	lui	a5,0x80006
800051d4:	fd842703          	lw	a4,-40(s0)
800051d8:	00e7a823          	sw	a4,16(a5) # 80006010 <next_timer>
    }
    timer_load(timer_head->timeout_tick);
800051dc:	fdc42783          	lw	a5,-36(s0)
800051e0:	0087a783          	lw	a5,8(a5)
800051e4:	00078513          	mv	a0,a5
800051e8:	899ff0ef          	jal	80004a80 <timer_load>

    return timer_head;
800051ec:	fdc42783          	lw	a5,-36(s0)
}
800051f0:	00078513          	mv	a0,a5
800051f4:	02c12083          	lw	ra,44(sp)
800051f8:	02812403          	lw	s0,40(sp)
800051fc:	03010113          	addi	sp,sp,48
80005200:	00008067          	ret

80005204 <delete_from_timer_list>:

timer *delete_from_timer_list(timer *timer_head, timer *_timer)
{
80005204:	fd010113          	addi	sp,sp,-48
80005208:	02812623          	sw	s0,44(sp)
8000520c:	03010413          	addi	s0,sp,48
80005210:	fca42e23          	sw	a0,-36(s0)
80005214:	fcb42c23          	sw	a1,-40(s0)
    if (timer_head == NULL)
80005218:	fdc42783          	lw	a5,-36(s0)
8000521c:	00079663          	bnez	a5,80005228 <delete_from_timer_list+0x24>
        return NULL;
80005220:	00000793          	li	a5,0
80005224:	0b40006f          	j	800052d8 <delete_from_timer_list+0xd4>
    if (timer_head == _timer)
80005228:	fdc42703          	lw	a4,-36(s0)
8000522c:	fd842783          	lw	a5,-40(s0)
80005230:	02f71a63          	bne	a4,a5,80005264 <delete_from_timer_list+0x60>
    {
        timer *new_head = timer_head->next;
80005234:	fdc42783          	lw	a5,-36(s0)
80005238:	00c7a783          	lw	a5,12(a5)
8000523c:	fef42423          	sw	a5,-24(s0)
        if (next_timer == timer_head)
80005240:	800067b7          	lui	a5,0x80006
80005244:	0107a783          	lw	a5,16(a5) # 80006010 <next_timer>
80005248:	fdc42703          	lw	a4,-36(s0)
8000524c:	00f71863          	bne	a4,a5,8000525c <delete_from_timer_list+0x58>
        {
            next_timer = new_head;
80005250:	800067b7          	lui	a5,0x80006
80005254:	fe842703          	lw	a4,-24(s0)
80005258:	00e7a823          	sw	a4,16(a5) # 80006010 <next_timer>
        }
        return new_head;
8000525c:	fe842783          	lw	a5,-24(s0)
80005260:	0780006f          	j	800052d8 <delete_from_timer_list+0xd4>
    }
    timer *current_timer = timer_head;
80005264:	fdc42783          	lw	a5,-36(s0)
80005268:	fef42623          	sw	a5,-20(s0)
    while (current_timer->next != NULL)
8000526c:	05c0006f          	j	800052c8 <delete_from_timer_list+0xc4>
    {
        if (current_timer->next == _timer)
80005270:	fec42783          	lw	a5,-20(s0)
80005274:	00c7a783          	lw	a5,12(a5)
80005278:	fd842703          	lw	a4,-40(s0)
8000527c:	04f71063          	bne	a4,a5,800052bc <delete_from_timer_list+0xb8>
        {
            current_timer->next = current_timer->next->next;
80005280:	fec42783          	lw	a5,-20(s0)
80005284:	00c7a783          	lw	a5,12(a5)
80005288:	00c7a703          	lw	a4,12(a5)
8000528c:	fec42783          	lw	a5,-20(s0)
80005290:	00e7a623          	sw	a4,12(a5)
            if (next_timer == _timer)
80005294:	800067b7          	lui	a5,0x80006
80005298:	0107a783          	lw	a5,16(a5) # 80006010 <next_timer>
8000529c:	fd842703          	lw	a4,-40(s0)
800052a0:	00f71a63          	bne	a4,a5,800052b4 <delete_from_timer_list+0xb0>
            {
                next_timer = current_timer->next;
800052a4:	fec42783          	lw	a5,-20(s0)
800052a8:	00c7a703          	lw	a4,12(a5)
800052ac:	800067b7          	lui	a5,0x80006
800052b0:	00e7a823          	sw	a4,16(a5) # 80006010 <next_timer>
            }
            return timer_head;
800052b4:	fdc42783          	lw	a5,-36(s0)
800052b8:	0200006f          	j	800052d8 <delete_from_timer_list+0xd4>
        }
        current_timer = current_timer->next;
800052bc:	fec42783          	lw	a5,-20(s0)
800052c0:	00c7a783          	lw	a5,12(a5)
800052c4:	fef42623          	sw	a5,-20(s0)
    while (current_timer->next != NULL)
800052c8:	fec42783          	lw	a5,-20(s0)
800052cc:	00c7a783          	lw	a5,12(a5)
800052d0:	fa0790e3          	bnez	a5,80005270 <delete_from_timer_list+0x6c>
    }
    return timer_head;
800052d4:	fdc42783          	lw	a5,-36(s0)
}
800052d8:	00078513          	mv	a0,a5
800052dc:	02c12403          	lw	s0,44(sp)
800052e0:	03010113          	addi	sp,sp,48
800052e4:	00008067          	ret
